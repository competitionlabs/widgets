/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/javascript/leaderboard.v3.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/identicon.js/identicon.js":
/*!************************************************!*\
  !*** ./node_modules/identicon.js/identicon.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {/**
 * Identicon.js 2.3.3
 * http://github.com/stewartlord/identicon.js
 *
 * PNGLib required for PNG output
 * http://www.xarg.org/download/pnglib.js
 *
 * Copyright 2018, Stewart Lord
 * Released under the BSD license
 * http://www.opensource.org/licenses/bsd-license.php
 */

(function() {
    var PNGlib;
    if ( true && typeof module.exports !== 'undefined') {
        PNGlib = __webpack_require__(/*! ./pnglib */ "./node_modules/identicon.js/pnglib.js");
    } else {
        PNGlib = window.PNGlib;
    }

    var Identicon = function(hash, options){
        if (typeof(hash) !== 'string' || hash.length < 15) {
            throw 'A hash of at least 15 characters is required.';
        }

        this.defaults = {
            background: [240, 240, 240, 255],
            margin:     0.08,
            size:       64,
            saturation: 0.7,
            brightness: 0.5,
            format:     'png'
        };

        this.options = typeof(options) === 'object' ? options : this.defaults;

        // backward compatibility with old constructor (hash, size, margin)
        if (typeof(arguments[1]) === 'number') { this.options.size   = arguments[1]; }
        if (arguments[2])                      { this.options.margin = arguments[2]; }

        this.hash        = hash
        this.background  = this.options.background || this.defaults.background;
        this.size        = this.options.size       || this.defaults.size;
        this.format      = this.options.format     || this.defaults.format;
        this.margin      = this.options.margin !== undefined ? this.options.margin : this.defaults.margin;

        // foreground defaults to last 7 chars as hue at 70% saturation, 50% brightness
        var hue          = parseInt(this.hash.substr(-7), 16) / 0xfffffff;
        var saturation   = this.options.saturation || this.defaults.saturation;
        var brightness   = this.options.brightness || this.defaults.brightness;
        this.foreground  = this.options.foreground || this.hsl2rgb(hue, saturation, brightness);
    };

    Identicon.prototype = {
        background: null,
        foreground: null,
        hash:       null,
        margin:     null,
        size:       null,
        format:     null,

        image: function(){
            return this.isSvg()
                ? new Svg(this.size, this.foreground, this.background)
                : new PNGlib(this.size, this.size, 256);
        },

        render: function(){
            var image      = this.image(),
                size       = this.size,
                baseMargin = Math.floor(size * this.margin),
                cell       = Math.floor((size - (baseMargin * 2)) / 5),
                margin     = Math.floor((size - cell * 5) / 2),
                bg         = image.color.apply(image, this.background),
                fg         = image.color.apply(image, this.foreground);

            // the first 15 characters of the hash control the pixels (even/odd)
            // they are drawn down the middle first, then mirrored outwards
            var i, color;
            for (i = 0; i < 15; i++) {
                color = parseInt(this.hash.charAt(i), 16) % 2 ? bg : fg;
                if (i < 5) {
                    this.rectangle(2 * cell + margin, i * cell + margin, cell, cell, color, image);
                } else if (i < 10) {
                    this.rectangle(1 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);
                    this.rectangle(3 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);
                } else if (i < 15) {
                    this.rectangle(0 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);
                    this.rectangle(4 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);
                }
            }

            return image;
        },

        rectangle: function(x, y, w, h, color, image){
            if (this.isSvg()) {
                image.rectangles.push({x: x, y: y, w: w, h: h, color: color});
            } else {
                var i, j;
                for (i = x; i < x + w; i++) {
                    for (j = y; j < y + h; j++) {
                        image.buffer[image.index(i, j)] = color;
                    }
                }
            }
        },

        // adapted from: https://gist.github.com/aemkei/1325937
        hsl2rgb: function(h, s, b){
            h *= 6;
            s = [
                b += s *= b < .5 ? b : 1 - b,
                b - h % 1 * s * 2,
                b -= s *= 2,
                b,
                b + h % 1 * s,
                b + s
            ];

            return[
                s[ ~~h    % 6 ] * 255, // red
                s[ (h|16) % 6 ] * 255, // green
                s[ (h|8)  % 6 ] * 255  // blue
            ];
        },

        toString: function(raw){
            // backward compatibility with old toString, default to base64
            if (raw) {
                return this.render().getDump();
            } else {
                return this.render().getBase64();
            }
        },

        isSvg: function(){
            return this.format.match(/svg/i)
        }
    };

    var Svg = function(size, foreground, background){
        this.size       = size;
        this.foreground = this.color.apply(this, foreground);
        this.background = this.color.apply(this, background);
        this.rectangles = [];
    };

    Svg.prototype = {
        size:       null,
        foreground: null,
        background: null,
        rectangles: null,

        color: function(r, g, b, a){
            var values = [r, g, b].map(Math.round);
            values.push((a >= 0) && (a <= 255) ? a/255 : 1);
            return 'rgba(' + values.join(',') + ')';
        },

        getDump: function(){
          var i,
                xml,
                rect,
                fg     = this.foreground,
                bg     = this.background,
                stroke = this.size * 0.005;

            xml = "<svg xmlns='http://www.w3.org/2000/svg'"
                + " width='" + this.size + "' height='" + this.size + "'"
                + " style='background-color:" + bg + ";'>"
                + "<g style='fill:" + fg + "; stroke:" + fg + "; stroke-width:" + stroke + ";'>";

            for (i = 0; i < this.rectangles.length; i++) {
                rect = this.rectangles[i];
                if (rect.color == bg) continue;
                xml += "<rect "
                    + " x='"      + rect.x + "'"
                    + " y='"      + rect.y + "'"
                    + " width='"  + rect.w + "'"
                    + " height='" + rect.h + "'"
                    + "/>";
            }
            xml += "</g></svg>"

            return xml;
        },

        getBase64: function(){
            if ('function' === typeof btoa) {
                return btoa(this.getDump());
            } else if (Buffer) {
                return new Buffer(this.getDump(), 'binary').toString('base64');
            } else {
                throw 'Cannot generate base64 output';
            }
        }
    };

    if ( true && typeof module.exports !== 'undefined') {
        module.exports = Identicon;
    } else {
        window.Identicon = Identicon;
    }
})();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/identicon.js/pnglib.js":
/*!*********************************************!*\
  !*** ./node_modules/identicon.js/pnglib.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
* A handy class to calculate color values.
*
* @version 1.0
* @author Robert Eisele <robert@xarg.org>
* @copyright Copyright (c) 2010, Robert Eisele
* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/
* @license http://www.opensource.org/licenses/bsd-license.php BSD License
*
*/

(function() {

	// helper functions for that ctx
	function write(buffer, offs) {
		for (var i = 2; i < arguments.length; i++) {
			for (var j = 0; j < arguments[i].length; j++) {
				buffer[offs++] = arguments[i].charAt(j);
			}
		}
	}

	function byte2(w) {
		return String.fromCharCode((w >> 8) & 255, w & 255);
	}

	function byte4(w) {
		return String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);
	}

	function byte2lsb(w) {
		return String.fromCharCode(w & 255, (w >> 8) & 255);
	}

	// modified from original source to support NPM
	var PNGlib = function(width,height,depth) {

		this.width   = width;
		this.height  = height;
		this.depth   = depth;

		// pixel data and row filter identifier size
		this.pix_size = height * (width + 1);

		// deflate header, pix_size, block headers, adler32 checksum
		this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;

		// offsets and sizes of Png chunks
		this.ihdr_offs = 0;									// IHDR offset and size
		this.ihdr_size = 4 + 4 + 13 + 4;
		this.plte_offs = this.ihdr_offs + this.ihdr_size;	// PLTE offset and size
		this.plte_size = 4 + 4 + 3 * depth + 4;
		this.trns_offs = this.plte_offs + this.plte_size;	// tRNS offset and size
		this.trns_size = 4 + 4 + depth + 4;
		this.idat_offs = this.trns_offs + this.trns_size;	// IDAT offset and size
		this.idat_size = 4 + 4 + this.data_size + 4;
		this.iend_offs = this.idat_offs + this.idat_size;	// IEND offset and size
		this.iend_size = 4 + 4 + 4;
		this.buffer_size  = this.iend_offs + this.iend_size;	// total PNG size

		this.buffer  = new Array();
		this.palette = new Object();
		this.pindex  = 0;

		var _crc32 = new Array();

		// initialize buffer with zero bytes
		for (var i = 0; i < this.buffer_size; i++) {
			this.buffer[i] = "\x00";
		}

		// initialize non-zero elements
		write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), "\x08\x03");
		write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');
		write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');
		write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');
		write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');

		// initialize deflate header
		var header = ((8 + (7 << 4)) << 8) | (3 << 6);
		header+= 31 - (header % 31);

		write(this.buffer, this.idat_offs + 8, byte2(header));

		// initialize deflate block headers
		for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {
			var size, bits;
			if (i + 0xffff < this.pix_size) {
				size = 0xffff;
				bits = "\x00";
			} else {
				size = this.pix_size - (i << 16) - i;
				bits = "\x01";
			}
			write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));
		}

		/* Create crc32 lookup table */
		for (var i = 0; i < 256; i++) {
			var c = i;
			for (var j = 0; j < 8; j++) {
				if (c & 1) {
					c = -306674912 ^ ((c >> 1) & 0x7fffffff);
				} else {
					c = (c >> 1) & 0x7fffffff;
				}
			}
			_crc32[i] = c;
		}

		// compute the index into a png for a given pixel
		this.index = function(x,y) {
			var i = y * (this.width + 1) + x + 1;
			var j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;
			return j;
		}

		// convert a color and build up the palette
		this.color = function(red, green, blue, alpha) {

			alpha = alpha >= 0 ? alpha : 255;
			var color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;

			if (typeof this.palette[color] == "undefined") {
				if (this.pindex == this.depth) return "\x00";

				var ndx = this.plte_offs + 8 + 3 * this.pindex;

				this.buffer[ndx + 0] = String.fromCharCode(red);
				this.buffer[ndx + 1] = String.fromCharCode(green);
				this.buffer[ndx + 2] = String.fromCharCode(blue);
				this.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);

				this.palette[color] = String.fromCharCode(this.pindex++);
			}
			return this.palette[color];
		}

		// output a PNG string, Base64 encoded
		this.getBase64 = function() {

			var s = this.getDump();

			var ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
			var c1, c2, c3, e1, e2, e3, e4;
			var l = s.length;
			var i = 0;
			var r = "";

			do {
				c1 = s.charCodeAt(i);
				e1 = c1 >> 2;
				c2 = s.charCodeAt(i+1);
				e2 = ((c1 & 3) << 4) | (c2 >> 4);
				c3 = s.charCodeAt(i+2);
				if (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }
				if (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }
				r+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);
			} while ((i+= 3) < l);
			return r;
		}

		// output a PNG string
		this.getDump = function() {

			// compute adler32 of output pixels + row filter bytes
			var BASE = 65521; /* largest prime smaller than 65536 */
			var NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */
			var s1 = 1;
			var s2 = 0;
			var n = NMAX;

			for (var y = 0; y < this.height; y++) {
				for (var x = -1; x < this.width; x++) {
					s1+= this.buffer[this.index(x, y)].charCodeAt(0);
					s2+= s1;
					if ((n-= 1) == 0) {
						s1%= BASE;
						s2%= BASE;
						n = NMAX;
					}
				}
			}
			s1%= BASE;
			s2%= BASE;
			write(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));

			// compute crc32 of the PNG chunks
			function crc32(png, offs, size) {
				var crc = -1;
				for (var i = 4; i < size-4; i += 1) {
					crc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);
				}
				write(png, offs+size-4, byte4(crc ^ -1));
			}

			crc32(this.buffer, this.ihdr_offs, this.ihdr_size);
			crc32(this.buffer, this.plte_offs, this.plte_size);
			crc32(this.buffer, this.trns_offs, this.trns_size);
			crc32(this.buffer, this.idat_offs, this.idat_size);
			crc32(this.buffer, this.iend_offs, this.iend_size);

			// convert PNG to string
			return "\x89PNG\r\n\x1a\n"+this.buffer.join('');
		}
	}

	// modified from original source to support NPM
	if ( true && typeof module.exports !== 'undefined') {
		module.exports = PNGlib;
	} else {
		window.PNGlib = PNGlib;
	}
})();


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/jssha/dist/sha.mjs":
/*!*****************************************!*\
  !*** ./node_modules/jssha/dist/sha.mjs ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * A JavaScript implementation of the SHA family of hashes - defined in FIPS PUB 180-4, FIPS PUB 202,
 * and SP 800-185 - as well as the corresponding HMAC implementation as defined in FIPS PUB 198-1.
 *
 * Copyright 2008-2020 Brian Turek, 1998-2009 Paul Johnston & Contributors
 * Distributed under the BSD License
 * See http://caligatio.github.com/jsSHA/ for more information
 */
const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function n(t,n,e,r){let i,s,o;const h=n||[0],u=(e=e||0)>>>3,w=-1===r?3:0;for(i=0;i<t.length;i+=1)o=i+u,s=o>>>2,h.length<=s&&h.push(0),h[s]|=t[i]<<8*(w+r*(o%4));return{value:h,binLen:8*t.length+e}}function e(e,r,i){switch(r){case"UTF8":case"UTF16BE":case"UTF16LE":break;default:throw new Error("encoding must be UTF8, UTF16BE, or UTF16LE")}switch(e){case"HEX":return function(t,n,e){return function(t,n,e,r){let i,s,o,h;if(0!=t.length%2)throw new Error("String of HEX type must be in byte increments");const u=n||[0],w=(e=e||0)>>>3,c=-1===r?3:0;for(i=0;i<t.length;i+=2){if(s=parseInt(t.substr(i,2),16),isNaN(s))throw new Error("String of HEX type contains invalid characters");for(h=(i>>>1)+w,o=h>>>2;u.length<=o;)u.push(0);u[o]|=s<<8*(c+r*(h%4))}return{value:u,binLen:4*t.length+e}}(t,n,e,i)};case"TEXT":return function(t,n,e){return function(t,n,e,r,i){let s,o,h,u,w,c,f,a,l=0;const A=e||[0],E=(r=r||0)>>>3;if("UTF8"===n)for(f=-1===i?3:0,h=0;h<t.length;h+=1)for(s=t.charCodeAt(h),o=[],128>s?o.push(s):2048>s?(o.push(192|s>>>6),o.push(128|63&s)):55296>s||57344<=s?o.push(224|s>>>12,128|s>>>6&63,128|63&s):(h+=1,s=65536+((1023&s)<<10|1023&t.charCodeAt(h)),o.push(240|s>>>18,128|s>>>12&63,128|s>>>6&63,128|63&s)),u=0;u<o.length;u+=1){for(c=l+E,w=c>>>2;A.length<=w;)A.push(0);A[w]|=o[u]<<8*(f+i*(c%4)),l+=1}else for(f=-1===i?2:0,a="UTF16LE"===n&&1!==i||"UTF16LE"!==n&&1===i,h=0;h<t.length;h+=1){for(s=t.charCodeAt(h),!0===a&&(u=255&s,s=u<<8|s>>>8),c=l+E,w=c>>>2;A.length<=w;)A.push(0);A[w]|=s<<8*(f+i*(c%4)),l+=2}return{value:A,binLen:8*l+r}}(t,r,n,e,i)};case"B64":return function(n,e,r){return function(n,e,r,i){let s,o,h,u,w,c,f,a=0;const l=e||[0],A=(r=r||0)>>>3,E=-1===i?3:0,H=n.indexOf("=");if(-1===n.search(/^[a-zA-Z0-9=+/]+$/))throw new Error("Invalid character in base-64 string");if(n=n.replace(/=/g,""),-1!==H&&H<n.length)throw new Error("Invalid '=' found in base-64 string");for(o=0;o<n.length;o+=4){for(w=n.substr(o,4),u=0,h=0;h<w.length;h+=1)s=t.indexOf(w.charAt(h)),u|=s<<18-6*h;for(h=0;h<w.length-1;h+=1){for(f=a+A,c=f>>>2;l.length<=c;)l.push(0);l[c]|=(u>>>16-8*h&255)<<8*(E+i*(f%4)),a+=1}}return{value:l,binLen:8*a+r}}(n,e,r,i)};case"BYTES":return function(t,n,e){return function(t,n,e,r){let i,s,o,h;const u=n||[0],w=(e=e||0)>>>3,c=-1===r?3:0;for(s=0;s<t.length;s+=1)i=t.charCodeAt(s),h=s+w,o=h>>>2,u.length<=o&&u.push(0),u[o]|=i<<8*(c+r*(h%4));return{value:u,binLen:8*t.length+e}}(t,n,e,i)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t,e,r){return function(t,e,r,i){return n(new Uint8Array(t),e,r,i)}(t,e,r,i)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t,e,r){return n(t,e,r,i)};default:throw new Error("format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}function r(n,e,r,i){switch(n){case"HEX":return function(t){return function(t,n,e,r){let i,s,o="";const h=n/8,u=-1===e?3:0;for(i=0;i<h;i+=1)s=t[i>>>2]>>>8*(u+e*(i%4)),o+="0123456789abcdef".charAt(s>>>4&15)+"0123456789abcdef".charAt(15&s);return r.outputUpper?o.toUpperCase():o}(t,e,r,i)};case"B64":return function(n){return function(n,e,r,i){let s,o,h,u,w,c="";const f=e/8,a=-1===r?3:0;for(s=0;s<f;s+=3)for(u=s+1<f?n[s+1>>>2]:0,w=s+2<f?n[s+2>>>2]:0,h=(n[s>>>2]>>>8*(a+r*(s%4))&255)<<16|(u>>>8*(a+r*((s+1)%4))&255)<<8|w>>>8*(a+r*((s+2)%4))&255,o=0;o<4;o+=1)c+=8*s+6*o<=e?t.charAt(h>>>6*(3-o)&63):i.b64Pad;return c}(n,e,r,i)};case"BYTES":return function(t){return function(t,n,e){let r,i,s="";const o=n/8,h=-1===e?3:0;for(r=0;r<o;r+=1)i=t[r>>>2]>>>8*(h+e*(r%4))&255,s+=String.fromCharCode(i);return s}(t,e,r)};case"ARRAYBUFFER":try{new ArrayBuffer(0)}catch(t){throw new Error("ARRAYBUFFER not supported by this environment")}return function(t){return function(t,n,e){let r;const i=n/8,s=new ArrayBuffer(i),o=new Uint8Array(s),h=-1===e?3:0;for(r=0;r<i;r+=1)o[r]=t[r>>>2]>>>8*(h+e*(r%4))&255;return s}(t,e,r)};case"UINT8ARRAY":try{new Uint8Array(0)}catch(t){throw new Error("UINT8ARRAY not supported by this environment")}return function(t){return function(t,n,e){let r;const i=n/8,s=-1===e?3:0,o=new Uint8Array(i);for(r=0;r<i;r+=1)o[r]=t[r>>>2]>>>8*(s+e*(r%4))&255;return o}(t,e,r)};default:throw new Error("format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY")}}const i=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298],s=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],o=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],h="Chosen SHA variant is not supported";function u(t,n){let e,r;const i=t.binLen>>>3,s=n.binLen>>>3,o=i<<3,h=4-i<<3;if(i%4!=0){for(e=0;e<s;e+=4)r=i+e>>>2,t.value[r]|=n.value[e>>>2]<<o,t.value.push(0),t.value[r+1]|=n.value[e>>>2]>>>h;return(t.value.length<<2)-4>=s+i&&t.value.pop(),{value:t.value,binLen:t.binLen+n.binLen}}return{value:t.value.concat(n.value),binLen:t.binLen+n.binLen}}function w(t){const n={outputUpper:!1,b64Pad:"=",outputLen:-1},e=t||{},r="Output length must be a multiple of 8";if(n.outputUpper=e.outputUpper||!1,e.b64Pad&&(n.b64Pad=e.b64Pad),e.outputLen){if(e.outputLen%8!=0)throw new Error(r);n.outputLen=e.outputLen}else if(e.shakeLen){if(e.shakeLen%8!=0)throw new Error(r);n.outputLen=e.shakeLen}if("boolean"!=typeof n.outputUpper)throw new Error("Invalid outputUpper formatting option");if("string"!=typeof n.b64Pad)throw new Error("Invalid b64Pad formatting option");return n}function c(t,n,r,i){const s=t+" must include a value and format";if(!n){if(!i)throw new Error(s);return i}if(void 0===n.value||!n.format)throw new Error(s);return e(n.format,n.encoding||"UTF8",r)(n.value)}class f{constructor(t,n,e){const r=e||{};if(this.t=n,this.i=r.encoding||"UTF8",this.numRounds=r.numRounds||1,isNaN(this.numRounds)||this.numRounds!==parseInt(this.numRounds,10)||1>this.numRounds)throw new Error("numRounds must a integer >= 1");this.s=t,this.o=[],this.h=0,this.u=!1,this.l=0,this.A=!1,this.H=[],this.S=[]}update(t){let n,e=0;const r=this.p>>>5,i=this.m(t,this.o,this.h),s=i.binLen,o=i.value,h=s>>>5;for(n=0;n<h;n+=r)e+this.p<=s&&(this.C=this.R(o.slice(n,n+r),this.C),e+=this.p);this.l+=e,this.o=o.slice(e>>>5),this.h=s%this.p,this.u=!0}getHash(t,n){let e,i,s=this.U;const o=w(n);if(this.v){if(-1===o.outputLen)throw new Error("Output length must be specified in options");s=o.outputLen}const h=r(t,s,this.K,o);if(this.A&&this.T)return h(this.T(o));for(i=this.F(this.o.slice(),this.h,this.l,this.g(this.C),s),e=1;e<this.numRounds;e+=1)this.v&&s%32!=0&&(i[i.length-1]&=16777215>>>24-s%32),i=this.F(i,s,0,this.B(this.s),s);return h(i)}setHMACKey(t,n,r){if(!this.L)throw new Error("Variant does not support HMAC");if(this.u)throw new Error("Cannot set MAC key after calling update");const i=e(n,(r||{}).encoding||"UTF8",this.K);this.M(i(t))}M(t){const n=this.p>>>3,e=n/4-1;let r;if(1!==this.numRounds)throw new Error("Cannot set numRounds with MAC");if(this.A)throw new Error("MAC key already set");for(n<t.binLen/8&&(t.value=this.F(t.value,t.binLen,0,this.B(this.s),this.U));t.value.length<=e;)t.value.push(0);for(r=0;r<=e;r+=1)this.H[r]=909522486^t.value[r],this.S[r]=1549556828^t.value[r];this.C=this.R(this.H,this.C),this.l=this.p,this.A=!0}getHMAC(t,n){const e=w(n);return r(t,this.U,this.K,e)(this.k())}k(){let t;if(!this.A)throw new Error("Cannot call getHMAC without first setting MAC key");const n=this.F(this.o.slice(),this.h,this.l,this.g(this.C),this.U);return t=this.R(this.S,this.B(this.s)),t=this.F(n,this.U,this.p,t,this.U),t}}function a(t,n){return t<<n|t>>>32-n}function l(t,n){return t>>>n|t<<32-n}function A(t,n){return t>>>n}function E(t,n,e){return t^n^e}function H(t,n,e){return t&n^~t&e}function S(t,n,e){return t&n^t&e^n&e}function b(t){return l(t,2)^l(t,13)^l(t,22)}function p(t,n){const e=(65535&t)+(65535&n);return(65535&(t>>>16)+(n>>>16)+(e>>>16))<<16|65535&e}function d(t,n,e,r){const i=(65535&t)+(65535&n)+(65535&e)+(65535&r);return(65535&(t>>>16)+(n>>>16)+(e>>>16)+(r>>>16)+(i>>>16))<<16|65535&i}function m(t,n,e,r,i){const s=(65535&t)+(65535&n)+(65535&e)+(65535&r)+(65535&i);return(65535&(t>>>16)+(n>>>16)+(e>>>16)+(r>>>16)+(i>>>16)+(s>>>16))<<16|65535&s}function C(t){return l(t,7)^l(t,18)^A(t,3)}function y(t){return l(t,6)^l(t,11)^l(t,25)}function R(t){return[1732584193,4023233417,2562383102,271733878,3285377520]}function U(t,n){let e,r,i,s,o,h,u;const w=[];for(e=n[0],r=n[1],i=n[2],s=n[3],o=n[4],u=0;u<80;u+=1)w[u]=u<16?t[u]:a(w[u-3]^w[u-8]^w[u-14]^w[u-16],1),h=u<20?m(a(e,5),H(r,i,s),o,1518500249,w[u]):u<40?m(a(e,5),E(r,i,s),o,1859775393,w[u]):u<60?m(a(e,5),S(r,i,s),o,2400959708,w[u]):m(a(e,5),E(r,i,s),o,3395469782,w[u]),o=s,s=i,i=a(r,30),r=e,e=h;return n[0]=p(e,n[0]),n[1]=p(r,n[1]),n[2]=p(i,n[2]),n[3]=p(s,n[3]),n[4]=p(o,n[4]),n}function v(t,n,e,r){let i;const s=15+(n+65>>>9<<4),o=n+e;for(;t.length<=s;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[s]=4294967295&o,t[s-1]=o/4294967296|0,i=0;i<t.length;i+=16)r=U(t.slice(i,i+16),r);return r}class K extends f{constructor(t,n,r){if("SHA-1"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.L=!0,this.T=this.k,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=U,this.g=function(t){return t.slice()},this.B=R,this.F=v,this.C=[1732584193,4023233417,2562383102,271733878,3285377520],this.p=512,this.U=160,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}function T(t){let n;return n="SHA-224"==t?s.slice():o.slice(),n}function F(t,n){let e,r,s,o,h,u,w,c,f,a,E;const R=[];for(e=n[0],r=n[1],s=n[2],o=n[3],h=n[4],u=n[5],w=n[6],c=n[7],E=0;E<64;E+=1)R[E]=E<16?t[E]:d(l(U=R[E-2],17)^l(U,19)^A(U,10),R[E-7],C(R[E-15]),R[E-16]),f=m(c,y(h),H(h,u,w),i[E],R[E]),a=p(b(e),S(e,r,s)),c=w,w=u,u=h,h=p(o,f),o=s,s=r,r=e,e=p(f,a);var U;return n[0]=p(e,n[0]),n[1]=p(r,n[1]),n[2]=p(s,n[2]),n[3]=p(o,n[3]),n[4]=p(h,n[4]),n[5]=p(u,n[5]),n[6]=p(w,n[6]),n[7]=p(c,n[7]),n}class g extends f{constructor(t,n,r){if("SHA-224"!==t&&"SHA-256"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.T=this.k,this.L=!0,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=F,this.g=function(t){return t.slice()},this.B=T,this.F=function(n,e,r,i){return function(t,n,e,r,i){let s,o;const h=15+(n+65>>>9<<4),u=n+e;for(;t.length<=h;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[h]=4294967295&u,t[h-1]=u/4294967296|0,s=0;s<t.length;s+=16)r=F(t.slice(s,s+16),r);return o="SHA-224"===i?[r[0],r[1],r[2],r[3],r[4],r[5],r[6]]:r,o}(n,e,r,i,t)},this.C=T(t),this.p=512,this.U="SHA-224"===t?224:256,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}class B{constructor(t,n){this.Y=t,this.N=n}}function L(t,n){let e;return n>32?(e=64-n,new B(t.N<<n|t.Y>>>e,t.Y<<n|t.N>>>e)):0!==n?(e=32-n,new B(t.Y<<n|t.N>>>e,t.N<<n|t.Y>>>e)):t}function M(t,n){let e;return n<32?(e=32-n,new B(t.Y>>>n|t.N<<e,t.N>>>n|t.Y<<e)):(e=64-n,new B(t.N>>>n|t.Y<<e,t.Y>>>n|t.N<<e))}function k(t,n){return new B(t.Y>>>n,t.N>>>n|t.Y<<32-n)}function Y(t,n,e){return new B(t.Y&n.Y^t.Y&e.Y^n.Y&e.Y,t.N&n.N^t.N&e.N^n.N&e.N)}function N(t){const n=M(t,28),e=M(t,34),r=M(t,39);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function I(t,n){let e,r;e=(65535&t.N)+(65535&n.N),r=(t.N>>>16)+(n.N>>>16)+(e>>>16);const i=(65535&r)<<16|65535&e;return e=(65535&t.Y)+(65535&n.Y)+(r>>>16),r=(t.Y>>>16)+(n.Y>>>16)+(e>>>16),new B((65535&r)<<16|65535&e,i)}function X(t,n,e,r){let i,s;i=(65535&t.N)+(65535&n.N)+(65535&e.N)+(65535&r.N),s=(t.N>>>16)+(n.N>>>16)+(e.N>>>16)+(r.N>>>16)+(i>>>16);const o=(65535&s)<<16|65535&i;return i=(65535&t.Y)+(65535&n.Y)+(65535&e.Y)+(65535&r.Y)+(s>>>16),s=(t.Y>>>16)+(n.Y>>>16)+(e.Y>>>16)+(r.Y>>>16)+(i>>>16),new B((65535&s)<<16|65535&i,o)}function z(t,n,e,r,i){let s,o;s=(65535&t.N)+(65535&n.N)+(65535&e.N)+(65535&r.N)+(65535&i.N),o=(t.N>>>16)+(n.N>>>16)+(e.N>>>16)+(r.N>>>16)+(i.N>>>16)+(s>>>16);const h=(65535&o)<<16|65535&s;return s=(65535&t.Y)+(65535&n.Y)+(65535&e.Y)+(65535&r.Y)+(65535&i.Y)+(o>>>16),o=(t.Y>>>16)+(n.Y>>>16)+(e.Y>>>16)+(r.Y>>>16)+(i.Y>>>16)+(s>>>16),new B((65535&o)<<16|65535&s,h)}function x(t,n){return new B(t.Y^n.Y,t.N^n.N)}function _(t){const n=M(t,19),e=M(t,61),r=k(t,6);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function O(t){const n=M(t,1),e=M(t,8),r=k(t,7);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}function P(t){const n=M(t,14),e=M(t,18),r=M(t,41);return new B(n.Y^e.Y^r.Y,n.N^e.N^r.N)}const V=[new B(i[0],3609767458),new B(i[1],602891725),new B(i[2],3964484399),new B(i[3],2173295548),new B(i[4],4081628472),new B(i[5],3053834265),new B(i[6],2937671579),new B(i[7],3664609560),new B(i[8],2734883394),new B(i[9],1164996542),new B(i[10],1323610764),new B(i[11],3590304994),new B(i[12],4068182383),new B(i[13],991336113),new B(i[14],633803317),new B(i[15],3479774868),new B(i[16],2666613458),new B(i[17],944711139),new B(i[18],2341262773),new B(i[19],2007800933),new B(i[20],1495990901),new B(i[21],1856431235),new B(i[22],3175218132),new B(i[23],2198950837),new B(i[24],3999719339),new B(i[25],766784016),new B(i[26],2566594879),new B(i[27],3203337956),new B(i[28],1034457026),new B(i[29],2466948901),new B(i[30],3758326383),new B(i[31],168717936),new B(i[32],1188179964),new B(i[33],1546045734),new B(i[34],1522805485),new B(i[35],2643833823),new B(i[36],2343527390),new B(i[37],1014477480),new B(i[38],1206759142),new B(i[39],344077627),new B(i[40],1290863460),new B(i[41],3158454273),new B(i[42],3505952657),new B(i[43],106217008),new B(i[44],3606008344),new B(i[45],1432725776),new B(i[46],1467031594),new B(i[47],851169720),new B(i[48],3100823752),new B(i[49],1363258195),new B(i[50],3750685593),new B(i[51],3785050280),new B(i[52],3318307427),new B(i[53],3812723403),new B(i[54],2003034995),new B(i[55],3602036899),new B(i[56],1575990012),new B(i[57],1125592928),new B(i[58],2716904306),new B(i[59],442776044),new B(i[60],593698344),new B(i[61],3733110249),new B(i[62],2999351573),new B(i[63],3815920427),new B(3391569614,3928383900),new B(3515267271,566280711),new B(3940187606,3454069534),new B(4118630271,4000239992),new B(116418474,1914138554),new B(174292421,2731055270),new B(289380356,3203993006),new B(460393269,320620315),new B(685471733,587496836),new B(852142971,1086792851),new B(1017036298,365543100),new B(1126000580,2618297676),new B(1288033470,3409855158),new B(1501505948,4234509866),new B(1607167915,987167468),new B(1816402316,1246189591)];function Z(t){return"SHA-384"===t?[new B(3418070365,s[0]),new B(1654270250,s[1]),new B(2438529370,s[2]),new B(355462360,s[3]),new B(1731405415,s[4]),new B(41048885895,s[5]),new B(3675008525,s[6]),new B(1203062813,s[7])]:[new B(o[0],4089235720),new B(o[1],2227873595),new B(o[2],4271175723),new B(o[3],1595750129),new B(o[4],2917565137),new B(o[5],725511199),new B(o[6],4215389547),new B(o[7],327033209)]}function j(t,n){let e,r,i,s,o,h,u,w,c,f,a,l;const A=[];for(e=n[0],r=n[1],i=n[2],s=n[3],o=n[4],h=n[5],u=n[6],w=n[7],a=0;a<80;a+=1)a<16?(l=2*a,A[a]=new B(t[l],t[l+1])):A[a]=X(_(A[a-2]),A[a-7],O(A[a-15]),A[a-16]),c=z(w,P(o),(H=h,S=u,new B((E=o).Y&H.Y^~E.Y&S.Y,E.N&H.N^~E.N&S.N)),V[a],A[a]),f=I(N(e),Y(e,r,i)),w=u,u=h,h=o,o=I(s,c),s=i,i=r,r=e,e=I(c,f);var E,H,S;return n[0]=I(e,n[0]),n[1]=I(r,n[1]),n[2]=I(i,n[2]),n[3]=I(s,n[3]),n[4]=I(o,n[4]),n[5]=I(h,n[5]),n[6]=I(u,n[6]),n[7]=I(w,n[7]),n}class q extends f{constructor(t,n,r){if("SHA-384"!==t&&"SHA-512"!==t)throw new Error(h);super(t,n,r);const i=r||{};this.T=this.k,this.L=!0,this.K=-1,this.m=e(this.t,this.i,this.K),this.R=j,this.g=function(t){return t.slice()},this.B=Z,this.F=function(n,e,r,i){return function(t,n,e,r,i){let s,o;const h=31+(n+129>>>10<<5),u=n+e;for(;t.length<=h;)t.push(0);for(t[n>>>5]|=128<<24-n%32,t[h]=4294967295&u,t[h-1]=u/4294967296|0,s=0;s<t.length;s+=32)r=j(t.slice(s,s+32),r);return o="SHA-384"===i?[(r=r)[0].Y,r[0].N,r[1].Y,r[1].N,r[2].Y,r[2].N,r[3].Y,r[3].N,r[4].Y,r[4].N,r[5].Y,r[5].N]:[r[0].Y,r[0].N,r[1].Y,r[1].N,r[2].Y,r[2].N,r[3].Y,r[3].N,r[4].Y,r[4].N,r[5].Y,r[5].N,r[6].Y,r[6].N,r[7].Y,r[7].N],o}(n,e,r,i,t)},this.C=Z(t),this.p=1024,this.U="SHA-384"===t?384:512,this.v=!1,i.hmacKey&&this.M(c("hmacKey",i.hmacKey,this.K))}}const D=[new B(0,1),new B(0,32898),new B(2147483648,32906),new B(2147483648,2147516416),new B(0,32907),new B(0,2147483649),new B(2147483648,2147516545),new B(2147483648,32777),new B(0,138),new B(0,136),new B(0,2147516425),new B(0,2147483658),new B(0,2147516555),new B(2147483648,139),new B(2147483648,32905),new B(2147483648,32771),new B(2147483648,32770),new B(2147483648,128),new B(0,32778),new B(2147483648,2147483658),new B(2147483648,2147516545),new B(2147483648,32896),new B(0,2147483649),new B(2147483648,2147516424)],G=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]];function J(t){let n;const e=[];for(n=0;n<5;n+=1)e[n]=[new B(0,0),new B(0,0),new B(0,0),new B(0,0),new B(0,0)];return e}function Q(t){let n;const e=[];for(n=0;n<5;n+=1)e[n]=t[n].slice();return e}function W(t,n){let e,r,i,s;const o=[],h=[];if(null!==t)for(r=0;r<t.length;r+=2)n[(r>>>1)%5][(r>>>1)/5|0]=x(n[(r>>>1)%5][(r>>>1)/5|0],new B(t[r+1],t[r]));for(e=0;e<24;e+=1){for(s=J(),r=0;r<5;r+=1)o[r]=(u=n[r][0],w=n[r][1],c=n[r][2],f=n[r][3],a=n[r][4],new B(u.Y^w.Y^c.Y^f.Y^a.Y,u.N^w.N^c.N^f.N^a.N));for(r=0;r<5;r+=1)h[r]=x(o[(r+4)%5],L(o[(r+1)%5],1));for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)n[r][i]=x(n[r][i],h[r]);for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)s[i][(2*r+3*i)%5]=L(n[r][i],G[r][i]);for(r=0;r<5;r+=1)for(i=0;i<5;i+=1)n[r][i]=x(s[r][i],new B(~s[(r+1)%5][i].Y&s[(r+2)%5][i].Y,~s[(r+1)%5][i].N&s[(r+2)%5][i].N));n[0][0]=x(n[0][0],D[e])}var u,w,c,f,a;return n}function $(t){let n,e,r=0;const i=[0,0],s=[4294967295&t,t/4294967296&2097151];for(n=6;n>=0;n--)e=s[n>>2]>>>8*n&255,0===e&&0===r||(i[r+1>>2]|=e<<8*(r+1),r+=1);return r=0!==r?r:1,i[0]|=r,{value:r+1>4?i:[i[0]],binLen:8+8*r}}function tt(t){return u($(t.binLen),t)}function nt(t,n){let e,r=$(n);r=u(r,t);const i=n>>>2,s=(i-r.value.length%i)%i;for(e=0;e<s;e++)r.value.push(0);return r.value}class et extends f{constructor(t,n,r){let i=6,s=0;super(t,n,r);const o=r||{};if(1!==this.numRounds){if(o.kmacKey||o.hmacKey)throw new Error("Cannot set numRounds with MAC");if("CSHAKE128"===this.s||"CSHAKE256"===this.s)throw new Error("Cannot set numRounds for CSHAKE variants")}switch(this.K=1,this.m=e(this.t,this.i,this.K),this.R=W,this.g=Q,this.B=J,this.C=J(),this.v=!1,t){case"SHA3-224":this.p=s=1152,this.U=224,this.L=!0,this.T=this.k;break;case"SHA3-256":this.p=s=1088,this.U=256,this.L=!0,this.T=this.k;break;case"SHA3-384":this.p=s=832,this.U=384,this.L=!0,this.T=this.k;break;case"SHA3-512":this.p=s=576,this.U=512,this.L=!0,this.T=this.k;break;case"SHAKE128":i=31,this.p=s=1344,this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"SHAKE256":i=31,this.p=s=1088,this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"KMAC128":i=4,this.p=s=1344,this.I(r),this.U=-1,this.v=!0,this.L=!1,this.T=this.X;break;case"KMAC256":i=4,this.p=s=1088,this.I(r),this.U=-1,this.v=!0,this.L=!1,this.T=this.X;break;case"CSHAKE128":this.p=s=1344,i=this._(r),this.U=-1,this.v=!0,this.L=!1,this.T=null;break;case"CSHAKE256":this.p=s=1088,i=this._(r),this.U=-1,this.v=!0,this.L=!1,this.T=null;break;default:throw new Error(h)}this.F=function(t,n,e,r,o){return function(t,n,e,r,i,s,o){let h,u,w=0;const c=[],f=i>>>5,a=n>>>5;for(h=0;h<a&&n>=i;h+=f)r=W(t.slice(h,h+f),r),n-=i;for(t=t.slice(h),n%=i;t.length<f;)t.push(0);for(h=n>>>3,t[h>>2]^=s<<h%4*8,t[f-1]^=2147483648,r=W(t,r);32*c.length<o&&(u=r[w%5][w/5|0],c.push(u.N),!(32*c.length>=o));)c.push(u.Y),w+=1,0==64*w%i&&(W(null,r),w=0);return c}(t,n,0,r,s,i,o)},o.hmacKey&&this.M(c("hmacKey",o.hmacKey,this.K))}_(t,n){const e=function(t){const n=t||{};return{funcName:c("funcName",n.funcName,1,{value:[],binLen:0}),customization:c("Customization",n.customization,1,{value:[],binLen:0})}}(t||{});n&&(e.funcName=n);const r=u(tt(e.funcName),tt(e.customization));if(0!==e.customization.binLen||0!==e.funcName.binLen){const t=nt(r,this.p>>>3);for(let n=0;n<t.length;n+=this.p>>>5)this.C=this.R(t.slice(n,n+(this.p>>>5)),this.C),this.l+=this.p;return 4}return 31}I(t){const n=function(t){const n=t||{};return{kmacKey:c("kmacKey",n.kmacKey,1),funcName:{value:[1128353099],binLen:32},customization:c("Customization",n.customization,1,{value:[],binLen:0})}}(t||{});this._(t,n.funcName);const e=nt(tt(n.kmacKey),this.p>>>3);for(let t=0;t<e.length;t+=this.p>>>5)this.C=this.R(e.slice(t,t+(this.p>>>5)),this.C),this.l+=this.p;this.A=!0}X(t){const n=u({value:this.o.slice(),binLen:this.h},function(t){let n,e,r=0;const i=[0,0],s=[4294967295&t,t/4294967296&2097151];for(n=6;n>=0;n--)e=s[n>>2]>>>8*n&255,0===e&&0===r||(i[r>>2]|=e<<8*r,r+=1);return r=0!==r?r:1,i[r>>2]|=r<<8*r,{value:r+1>4?i:[i[0]],binLen:8+8*r}}(t.outputLen));return this.F(n.value,n.binLen,this.l,this.g(this.C),t.outputLen)}}/* harmony default export */ __webpack_exports__["default"] = (class{constructor(t,n,e){if("SHA-1"==t)this.O=new K(t,n,e);else if("SHA-224"==t||"SHA-256"==t)this.O=new g(t,n,e);else if("SHA-384"==t||"SHA-512"==t)this.O=new q(t,n,e);else{if("SHA3-224"!=t&&"SHA3-256"!=t&&"SHA3-384"!=t&&"SHA3-512"!=t&&"SHAKE128"!=t&&"SHAKE256"!=t&&"CSHAKE128"!=t&&"CSHAKE256"!=t&&"KMAC128"!=t&&"KMAC256"!=t)throw new Error(h);this.O=new et(t,n,e)}}update(t){this.O.update(t)}getHash(t,n){return this.O.getHash(t,n)}setHMACKey(t,n,e){this.O.setHMACKey(t,n,e)}getHMAC(t,n){return this.O.getHMAC(t,n)}});
//# sourceMappingURL=sha.mjs.map


/***/ }),

/***/ "./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js

;(function (global, factory) {
     true ? module.exports = factory() :
    undefined
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                !(function webpackMissingModule() { var e = new Error("Cannot find module 'undefined'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/javascript/leaderboard.v3.js":
/*!******************************************!*\
  !*** ./src/javascript/leaderboard.v3.js ***!
  \******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _polyfills__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills */ "./src/javascript/polyfills/index.js");
/* harmony import */ var _polyfills__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_polyfills__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_setTimeoutGlobal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/setTimeoutGlobal */ "./src/javascript/modules/setTimeoutGlobal.js");
/* harmony import */ var _modules_setTimeoutGlobal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_modules_setTimeoutGlobal__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var identicon_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! identicon.js */ "./node_modules/identicon.js/identicon.js");
/* harmony import */ var identicon_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(identicon_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var jssha__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! jssha */ "./node_modules/jssha/dist/sha.mjs");
/* harmony import */ var _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _modules_dragElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/dragElement */ "./src/javascript/modules/dragElement.js");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils */ "./src/javascript/utils/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*
 COMPETITION LABS LTD v1.0.5
 (c) 2015-2020 Aleksandr Bernotas
 License: www.competitionlabs.com/terms-of-service
*/









(function () {
  'use strict';
  /**
   * Ajax method
   *
   * @class Ajax
   * @constructor
   */

  _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax = function () {
    this.xhr = new XMLHttpRequest();
  };

  _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax.prototype.createCORSRequest = function (method, url) {
    var obj = this;

    if ("withCredentials" in obj.xhr) {
      // Most browsers.
      obj.xhr.open(method, url, true);
    } else if (typeof XDomainRequest != "undefined") {
      // IE8 & IE9
      obj.xhr = new XDomainRequest();
      url = url.indexOf("https") > -1 && location.protocol !== 'https:' ? url.replace('https', 'http') : url;
      obj.xhr.open(method, url);
    } else {
      // CORS not supported.
      obj.xhr = null;
    }

    return obj.xhr;
  };

  _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax.prototype.abort = function () {
    var _this = this;

    if (_this.xhr && typeof _this.xhr.readyState !== "undefined" && _this.xhr.readyState !== 4 && _this.xhr.readyState > 0) {
      //console.error("aborting Ajax", _this.xhr.readyState, _this.xhr);
      _this.xhr.abort();
    }

    return _this;
  };
  /**
   * Retrieves data from a URL without page refresh
   *
   * @method getData
   * @param {Object} configuration object
   *  - object contains: HTTP method "type: POST, GET", url: to send the request to, data: {object}
   * @return {String} in success object
   */


  _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax.prototype.getData = function (data) {
    var obj = this;

    try {
      data.type = data.type !== undefined && typeof data.type === 'string' && data.type.length > 0 ? data.type : 'POST';
      data.data = data.data !== undefined && _typeof(data.data) === 'object' ? data.data : {};
      data.url = data.url !== undefined && typeof data.url === 'string' && data.url.length > 0 ? data.url : '';
      data.success = data.success !== undefined ? data.success : function () {};
      data.error = data.error !== undefined ? data.error : function () {};
      data.headers = data.headers !== undefined ? data.headers : {};
      data.extraCallback = data.extraCallback !== undefined ? data.extraCallback : function () {}; // cross browser CORS support

      obj.xhr = this.createCORSRequest(data.type, data.url);

      obj.xhr.onload = function () {
        data.extraCallback(data, obj.xhr);
        data.success(obj.xhr.responseText, data, obj.xhr);
      };

      obj.xhr.onerror = function () {
        data.error(obj.xhr.status);
      };

      if (typeof XDomainRequest === "undefined") {
        if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["sizeof"])(data.headers) > 0) {
          var item;

          for (item in data.headers) {
            obj.xhr.setRequestHeader(item, data.headers[item]);
          }
        } else if ((data.type === 'POST' || data.type === 'PUT') && Object(_utils__WEBPACK_IMPORTED_MODULE_7__["sizeof"])(data.headers) === 0) {
          obj.xhr.setRequestHeader("Content-Type", "application/json");
        } else {
          obj.xhr.setRequestHeader("Content-Type", "text/plain");
        }
      }

      obj.xhr.send(JSON.stringify(data.data));
      return obj.xhr;
    } catch (err) {
      console.log(err);
    }
  };
  /**
   * SSE Messaging
   * @param options
   * @constructor
   */


  var Messaging = function Messaging(options) {
    this.settings = {
      source: null,
      ajax: {
        url: null,
        apiKey: undefined,
        errorCallback: function errorCallback() {}
      },
      sseUrl: null,
      heartbeat: null,
      lastHeartbeat: null,
      mainAjax: new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax(),
      heartBeatAjax: new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax(),
      heartWaitTime: 25000,
      messageQueue: [],
      messageInterval: 1000,
      startupCheck: true,
      active: false,
      debug: false,
      callback: function callback(data) {},
      onStartupError: function onStartupError() {}
    };

    if (typeof options !== "undefined") {
      for (var opt in options) {
        if (options.hasOwnProperty(opt)) {
          this.settings[opt] = options[opt];
        }
      }
    }

    this.intervalInstance = null;
    this.heartbeatIntervalInstance = null;

    this.lookupData = function () {
      var _this = this;

      if (_this.settings.messageQueue.length > 0) {
        var data = _this.settings.messageQueue[0];

        var index = _this.settings.messageQueue.indexOf(data);

        if (index > -1) {
          _this.settings.messageQueue.splice(index, 1);
        }

        if (typeof _this.settings.ajax.url === "string" && _this.settings.ajax.url.length > 0) {
          _this.getData(data);
        } else {
          _this.settings.callback(data);
        }
      }
    };

    this.setInterval = function () {
      var _this = this;

      _this.intervalInstance = setInterval(function () {
        _this.lookupData();
      }, _this.settings.messageInterval);

      if (_this.settings.heartbeat !== null) {
        _this.settings.lastHeartbeat = new Date();
        _this.heartbeatIntervalInstance = setInterval(function () {
          var currentTime = new Date(),
              diff = _this.settings.lastHeartbeat.getTime() - currentTime.getTime();

          if (_this.settings.source.readyState === 0 && diff > _this.settings.heartWaitTime) {
            _this.closeChanel();
          }

          _this.hearBeatCheck();
        }, _this.settings.heartWaitTime);
      }
    };
    /**
     * Request a heartbeat
     * - if the request is failing close the connection
     * - if the request is successful but the connection is closed reopen and call for a heartbeat again
     */


    this.hearBeatCheck = function () {
      var _this = this;

      var dataObj = {
        url: _this.settings.heartbeat,
        headers: _this.settings.ajax.apiKey,
        type: "GET",
        success: function success(response, dataObject, xhr) {
          if (xhr.status !== 200 && _this.settings.source.readyState === 0) {
            if (_this.settings.debug) console.log('[Msg] SSE Closing connection');

            _this.closeChanel();
          } else if (xhr.status === 200 && _this.settings.source.readyState === 2) {
            if (_this.settings.debug) console.log('[Msg] SSE Trying to re-open the connection');

            _this.openChanel();

            setTimeout(function () {
              _this.hearBeatCheck();
            }, 200);
          }
        }
      };

      if (typeof _this.settings.ajax.apiKey !== "undefined") {
        dataObj.headers = _this.settings.ajax.apiKey;
      }

      _this.settings.heartBeatAjax.abort().getData(dataObj);
    };

    this.getData = function () {
      var _this = this;

      var dataObj = {
        url: _this.settings.ajax.url,
        type: "GET",
        success: function success(response, dataObject, xhr) {
          var json = {};

          try {
            json = JSON.parse(response);
          } catch (e) {
            if (_this.settings.debug) console.log(e, _this.settings);
          }

          if (xhr.status === 200) {
            _this.settings.callback(json);
          } else {
            _this.settings.ajax.errorCallback(json);
          }
        }
      };

      if (typeof _this.settings.ajax.apiKey !== "undefined") {
        dataObj.headers = _this.settings.ajax.apiKey;
      }

      _this.settings.mainAjax.abort().getData(dataObj);
    };

    this.openChanel = function () {
      var _this = this;

      _this.settings.source = new EventSource(_this.settings.sseUrl, {
        withCredentials: true
      });

      _this.serverSideEventListeners(_this.settings.source);
    };

    this.serverSideEventListeners = function (source) {
      var _this = this;

      source.addEventListener('open', function (e) {
        _this.settings.active = true;
        if (_this.settings.debug) console.log("[Msg] connection opened", e);
      }, false);
      source.addEventListener('message', function (e) {
        if (_this.settings.debug) {
          console.log("[Msg] message check", _this.settings.sseUrl);
          console.log(e.data);
        }

        var data = e.data,
            json = null;

        try {
          json = JSON.parse(data);
        } catch (e) {}

        if (_this.settings.heartbeat !== null) {
          _this.settings.lastHeartbeat = new Date();
        }

        if (json !== null && typeof json.heartbeat === "undefined") {
          _this.settings.messageQueue.push(json);
        }
      }, false);
      source.addEventListener('error', function (e) {
        if (_this.settings.debug) console.log("[Msg] error check", _this.settings.sseUrl);

        if (e.readyState == EventSource.CLOSED) {
          if (_this.settings.debug) console.warn("[Msg] connection closed", e);
        } else {
          if (_this.settings.debug) console.log(e, e.readyState);
        }

        _this.closeChanel();

        _this.settings.startupCheck = false;
      }, false);
    };

    this.closeChanel = function () {
      this.settings.active = false;
      this.settings.source.close();
    };

    this.sseFailed = function () {
      var _this = this;

      _this.settings.heartbeat = null;
      _this.settings.active = false;

      if (_this.heartbeatIntervalInstance !== null) {
        clearInterval(_this.heartbeatIntervalInstance);
      }

      _this.settings.onStartupError(_this.settings);
    };

    this.windowActivity = function () {
      var _this = this;

      (function () {
        var hidden = "hidden"; // Standards:

        if (hidden in document) document.addEventListener("visibilitychange", onchange);else if ((hidden = "mozHidden") in document) document.addEventListener("mozvisibilitychange", onchange);else if ((hidden = "webkitHidden") in document) document.addEventListener("webkitvisibilitychange", onchange);else if ((hidden = "msHidden") in document) document.addEventListener("msvisibilitychange", onchange); // IE 9 and lower:
        else if ("onfocusin" in document) document.onfocusin = document.onfocusout = onchange; // All others:
          else window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;

        function onchange(evt) {
          var status = "",
              v = "visible",
              h = "hidden",
              evtMap = {
            focus: v,
            focusin: v,
            pageshow: v,
            blur: h,
            focusout: h,
            pagehide: h
          };
          evt = evt || window.event;

          if (evt.type in evtMap) {
            status = evtMap[evt.type];
          } else {
            status = this[hidden] ? "hidden" : "visible";
          }

          if (status === "visible" && _this.settings.source.readyState !== 0 && _this.settings.source.readyState !== 1) {
            _this.openChanel();
          } else if (status === "hidden" && (_this.settings.source.readyState === 0 || _this.settings.source.readyState === 1)) {
            _this.closeChanel();
          }
        } // set the initial state (but only if browser supports the Page Visibility API)


        if (document[hidden] !== undefined) onchange({
          type: document[hidden] ? "blur" : "focus"
        });
      })();
    };

    this.init = function () {
      var _this = this;

      try {
        if (_this.settings.debug) console.log("[Msg] SSE starting", _this.settings.sseUrl, new Date());

        _this.openChanel();

        if (_this.settings.debug) console.log("[Msg] SSE started", _this.settings.sseUrl, new Date(), _this.settings.source.readyState);

        _this.setInterval();

        _this.windowActivity();

        setTimeout(function () {
          if (!_this.settings.startupCheck) {
            console.log("sse failed");

            _this.sseFailed();
          }
        }, 2000);
        window.addEventListener('unload', function (event) {
          if (_this.settings.debug) console.log("[Msg] closing messaging service", new Date());

          _this.settings.source.close();

          _this.settings.active = false;

          _this.settings.heartBeatAjax.abort();

          if (_this.intervalInstance) clearInterval(_this.intervalInstance);
        });
        window.addEventListener('beforeunload', function (event) {
          if (_this.settings.debug) console.log("[Msg] closing messaging service");

          _this.settings.source.close();

          _this.settings.heartBeatAjax.abort();

          if (_this.intervalInstance) clearInterval(_this.intervalInstance);
        });
      } catch (e) {
        if (_this.settings.debug) console.log("EventSource failed");

        _this.sseFailed();
      }
    };

    this.init();
  };

  var MiniScoreBoard = function MiniScoreBoard(options) {
    this.settings = {
      lbWidget: null,
      container: null,
      overlayContainer: null,
      infoContainer: null,
      updateInterval: null,
      updateIntervalTime: 1000,
      active: false,
      enableDragging: true,
      dragging: false
    };

    if (typeof options !== "undefined") {
      for (var opt in options) {
        if (options.hasOwnProperty(opt)) {
          this.settings[opt] = options[opt];
        }
      }
    }

    this.layout = function () {
      var wrapper = document.createElement("div"),
          iconWrapper = document.createElement("div"),
          icon = document.createElement("div"),
          informationWrapper = document.createElement("div"),
          informationTopWrapper = document.createElement("div"),
          informationWrapperClose = document.createElement("div"),
          informationClose = document.createElement("a");
      wrapper.setAttribute("class", "cl-widget-ms-wrapper");
      iconWrapper.setAttribute("class", "cl-widget-ms-icon-wrapper");
      icon.setAttribute("class", "cl-widget-ms-icon");
      informationTopWrapper.setAttribute("class", "cl-widget-ms-information-top-wrapper");
      informationWrapper.setAttribute("class", "cl-widget-ms-information-wrapper");
      informationWrapperClose.setAttribute("class", "cl-widget-ms-information-close-wrapper");
      informationClose.setAttribute("class", "cl-widget-ms-information-close");
      informationClose.href = "javascript:void(0);";
      informationClose.innerHTML = "x";
      informationWrapperClose.appendChild(informationClose);
      informationWrapper.appendChild(informationWrapperClose);
      informationTopWrapper.appendChild(informationWrapper);
      iconWrapper.appendChild(icon);
      wrapper.appendChild(iconWrapper);
      wrapper.appendChild(informationTopWrapper);
      return wrapper;
    };

    this.overlayLayout = function () {
      var wrapper = document.createElement("div");
      wrapper.setAttribute("class", "cl-widget-ms-overlay-wrapper");
      return wrapper;
    };

    this.timeManagement = function () {
      var _this = this,
          diff = 0,
          label = "",
          date = "",
          dateObj = "",
          inverse = false;

      if (_this.settings.lbWidget.settings.competition.activeContest !== null) {
        diff = moment__WEBPACK_IMPORTED_MODULE_2___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledStart).diff(moment__WEBPACK_IMPORTED_MODULE_2___default()());
        label = _this.settings.lbWidget.settings.translation.miniLeaderboard.startsIn;
        date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_2___default.a.duration(diff));
        dateObj = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_2___default.a.duration(diff));
        inverse = false;

        if (diff < 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
          label = _this.settings.lbWidget.settings.translation.miniLeaderboard.starting;
          date = "";
        } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode > 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode < 3) {
          diff = moment__WEBPACK_IMPORTED_MODULE_2___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_2___default()());
          dateObj = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_2___default.a.duration(diff));
          label = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_2___default.a.duration(diff));
          date = _this.settings.lbWidget.settings.translation.miniLeaderboard.rank;
          inverse = true;
        } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
          label = _this.settings.lbWidget.settings.translation.miniLeaderboard.finishing;
          date = _this.settings.lbWidget.settings.translation.miniLeaderboard.rank;
          inverse = true;
        } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
          label = _this.settings.lbWidget.settings.translation.miniLeaderboard.finished;
          date = _this.settings.lbWidget.settings.translation.miniLeaderboard.rank;
          inverse = true;
        }
      }

      return {
        label: label,
        diff: diff,
        date: date,
        dateObj: dateObj,
        inverse: inverse
      };
    };

    this.layoutDefaultOrEmptyEntry = function () {
      var lbResultsMemEntry = document.createElement("div"),
          lbResultsMemLabel = document.createElement("div"),
          lbResultsMemRank = document.createElement("div"),
          lbResultsMemIcon = document.createElement("div"),
          lbResultsMemImg = document.createElement("img"),
          lbResultsMemPoints = document.createElement("div");
      lbResultsMemEntry.setAttribute("class", "cl-widget-ms-default-mem-entry");
      lbResultsMemLabel.setAttribute("class", "cl-widget-ms-default-mem-label");
      lbResultsMemRank.setAttribute("class", "cl-widget-ms-default-mem-rank");
      lbResultsMemIcon.setAttribute("class", "cl-widget-ms-default-mem-icon");
      lbResultsMemImg.setAttribute("class", "cl-widget-ms-default-mem-img");
      lbResultsMemImg.style.display = "none";
      lbResultsMemPoints.setAttribute("class", "cl-widget-ms-default-mem-points");
      lbResultsMemEntry.appendChild(lbResultsMemLabel);
      lbResultsMemEntry.appendChild(lbResultsMemRank);
      lbResultsMemIcon.appendChild(lbResultsMemImg);
      lbResultsMemEntry.appendChild(lbResultsMemIcon);
      lbResultsMemEntry.appendChild(lbResultsMemPoints);
      return lbResultsMemEntry;
    };

    this.layoutFirstToOrEmptyEntry = function () {
      var lbResultsMemEntry = document.createElement("div"),
          lbResultsMemLabel = document.createElement("div"),
          lbResultsMemRank = document.createElement("div"),
          lbResultsMemIcon = document.createElement("div"),
          lbResultsMemImg = document.createElement("img"),
          lbResultsMemPoints = document.createElement("div");
      lbResultsMemEntry.setAttribute("class", "cl-widget-ms-first-to-mem-entry");
      lbResultsMemLabel.setAttribute("class", "cl-widget-ms-first-to-mem-label");
      lbResultsMemRank.setAttribute("class", "cl-widget-ms-first-to-mem-rank");
      lbResultsMemIcon.setAttribute("class", "cl-widget-ms-first-to-mem-icon");
      lbResultsMemImg.setAttribute("class", "cl-widget-ms-first-to-mem-img");
      lbResultsMemImg.style.display = "none";
      lbResultsMemPoints.setAttribute("class", "cl-widget-ms-first-to-mem-points");
      lbResultsMemEntry.appendChild(lbResultsMemLabel);
      lbResultsMemEntry.appendChild(lbResultsMemRank);
      lbResultsMemIcon.appendChild(lbResultsMemImg);
      lbResultsMemEntry.appendChild(lbResultsMemIcon);
      lbResultsMemEntry.appendChild(lbResultsMemPoints);
      return lbResultsMemEntry;
    };

    var testLive = false;

    this.layoutDefaultOrEmpty = function () {
      var _this = this,
          timeManagement = _this.timeManagement(),
          diff = timeManagement.diff,
          label = timeManagement.label,
          date = timeManagement.date,
          dateObj = timeManagement.dateObj,
          wrapperDomObj = _this.settings.infoContainer,
          defaultDomObj = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-default-wrapper"),
          inverse = timeManagement.inverse;

      if (defaultDomObj === null) {
        _this.removeUnusedElements();

        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.container, "cl-ms-default-style");

        var lbWrapper = document.createElement("div"),
            lbDateWrapper = document.createElement("div"),
            lbDateLabel = document.createElement("div"),
            lbDate = document.createElement("div"),
            lbResultsWrapper = document.createElement("div"),
            lbResultsList = document.createElement("div"),
            lbHeaders = document.createElement("div"),
            lbHeadersRank = document.createElement("div"),
            lbHeadersPoints = document.createElement("div"),
            lbResultsMemEntry = _this.layoutDefaultOrEmptyEntry(),
            img = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbResultsMemEntry, ".cl-widget-ms-default-mem-img");

        lbWrapper.setAttribute("class", "cl-widget-ms-default-wrapper");
        lbDateLabel.setAttribute("class", "cl-widget-ms-default-date-label");
        lbDate.setAttribute("class", "cl-widget-ms-default-date");
        lbDateWrapper.setAttribute("class", "cl-widget-ms-default-date-wrapper");
        lbResultsWrapper.setAttribute("class", "cl-widget-ms-default-results-wrapper");
        lbResultsList.setAttribute("class", "cl-widget-ms-default-results-list");
        lbHeaders.setAttribute("class", "cl-widget-ms-default-results-headers");
        lbHeadersRank.setAttribute("class", "cl-widget-ms-default-results-header-rank");
        lbHeadersPoints.setAttribute("class", "cl-widget-ms-default-results-header-points");
        lbResultsMemEntry.setAttribute("class", "cl-widget-ms-default-mem-entry"); // lbDateLabel.innerHTML = label;

        lbDate.innerHTML = dateObj;
        lbDateWrapper.appendChild(lbDateLabel);
        lbDateWrapper.appendChild(lbDate);
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbResultsMemEntry, ".cl-widget-ms-default-mem-rank").innerHTML = "--";
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbResultsMemEntry, ".cl-widget-ms-default-mem-points").innerHTML = "--";
        img.src = "";
        img.alt = "";
        img.style.display = "block";
        lbHeadersRank.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
        lbHeadersPoints.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;
        lbHeaders.appendChild(lbHeadersRank);
        lbHeaders.appendChild(lbHeadersPoints);
        lbResultsList.appendChild(lbResultsMemEntry);
        lbResultsWrapper.appendChild(lbHeaders);
        lbResultsWrapper.appendChild(lbResultsList);
        lbWrapper.appendChild(lbDateWrapper);
        lbWrapper.appendChild(lbResultsWrapper);
        defaultDomObj = wrapperDomObj.appendChild(lbWrapper);
        setTimeout(function () {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(wrapperDomObj, "cl-show");
        }, 200);
      } else {
        if (!Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(wrapperDomObj, "cl-show")) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(wrapperDomObj, "cl-show");
        }

        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-default-date-label").innerHTML = label;
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-default-date").innerHTML = date;
      }

      mapObject(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
        if ((lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) && typeof lbEntry.rankings !== "undefined") {
          var scoreArea = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(defaultDomObj, ".cl-widget-ms-default-results-list");
          scoreArea.innerHTML = "";
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-default-date-label").innerHTML = "";
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-default-date").innerHTML = dateObj;
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-default-date-wrapper"), "cl-widget-ms-default-date-only");
          mapObject(lbEntry.rankings, function (lbRankingEntry) {
            var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lbRankingEntry.memberId),
                lbWrapper = _this.layoutDefaultOrEmptyEntry(),
                img = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbWrapper, ".cl-widget-ms-default-mem-img"),
                selfMember = lbRankingEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbRankingEntry.memberId === _this.settings.lbWidget.settings.memberId;

            img.src = icon;
            img.alt = "";
            img.style.display = "block";

            if (selfMember) {
              Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(lbWrapper, "cl-widget-ms-default-mem-self");
            }

            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbWrapper, ".cl-widget-ms-default-mem-label").innerHTML = selfMember ? "YOU" : "";
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbWrapper, ".cl-widget-ms-default-mem-rank").innerHTML = "<span class='cl-mem-rank-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.rank + "</span><span class='cl-mem-rank'>" + lbRankingEntry.rank + "</span>";
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbWrapper, ".cl-widget-ms-default-mem-points").innerHTML = "<span class='cl-mem-points-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.points + "</span><span class='cl-mem-points'>" + lbRankingEntry.points + "</span>";
            scoreArea.appendChild(lbWrapper);
          });
          testLive = true; // var lastScore = query(_this.settings.container, ".cl-widget-ms-default-last-score").innerHTML,
          // 	highScore = query(_this.settings.container, ".cl-widget-ms-default-high-score").innerHTML,
          // 	rank = query(_this.settings.container, ".cl-widget-ms-default-rank-value"),
          // 	change = (lbEntry.change < 0) ? "down" : ( lbEntry.change > 0 ? "up" : "same" ),
          // 	rankValue = lbEntry.rank;
          //
          // if( lastScore !== String(lbEntry.points) && String(lbEntry.points) !== highScore ){
          // 	query(_this.settings.container, ".cl-widget-ms-default-last-score").innerHTML = highScore;
          // }
          //
          // query(_this.settings.container, ".cl-widget-ms-default-high-score").innerHTML = lbEntry.points;
          //
          // removeClass(rank, "cl-ms-rank-up");
          // removeClass(rank, "cl-ms-rank-down");
          // removeClass(rank, "cl-ms-rank-same");
          //
          // addClass(rank, "cl-ms-rank-" + change);
          //
          // rank.innerHTML = rankValue;
        }
      });

      if (inverse && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(defaultDomObj, "cl-inverse")) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(defaultDomObj, "cl-inverse");
      }
    };

    this.layoutFirstToOrEmpty = function (strategy) {
      var _this = this,
          timeManagement = _this.timeManagement(),
          diff = timeManagement.diff,
          label = timeManagement.label,
          date = timeManagement.date,
          dateObj = timeManagement.dateObj,
          wrapperDomObj = _this.settings.infoContainer,
          defaultDomObj = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-first-to-wrapper"),
          inverse = timeManagement.inverse;

      if (defaultDomObj === null) {
        _this.removeUnusedElements();

        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.container, "cl-ms-first-to-style");

        var lbWrapper = document.createElement("div"),
            lbDateWrapper = document.createElement("div"),
            lbDateLabel = document.createElement("div"),
            lbDate = document.createElement("div"),
            lbResultsWrapper = document.createElement("div"),
            lbResultsList = document.createElement("div"),
            lbHeaders = document.createElement("div"),
            lbHeadersRank = document.createElement("div"),
            lbHeadersPoints = document.createElement("div"),
            lbResultsMemEntry = _this.layoutFirstToOrEmptyEntry(),
            img = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbResultsMemEntry, ".cl-widget-ms-first-to-mem-img");

        lbWrapper.setAttribute("class", "cl-widget-ms-first-to-wrapper");
        lbDateLabel.setAttribute("class", "cl-widget-ms-first-to-date-label");
        lbDate.setAttribute("class", "cl-widget-ms-first-to-date");
        lbDateWrapper.setAttribute("class", "cl-widget-ms-first-to-date-wrapper");
        lbResultsWrapper.setAttribute("class", "cl-widget-ms-first-to-results-wrapper");
        lbResultsList.setAttribute("class", "cl-widget-ms-first-to-results-list");
        lbHeaders.setAttribute("class", "cl-widget-ms-first-to-results-headers");
        lbHeadersRank.setAttribute("class", "cl-widget-ms-first-to-results-header-rank");
        lbHeadersPoints.setAttribute("class", "cl-widget-ms-first-to-results-header-points");
        lbResultsMemEntry.setAttribute("class", "cl-widget-ms-first-to-mem-entry"); // lbDateLabel.innerHTML = label;

        lbDate.innerHTML = dateObj;
        lbDateWrapper.appendChild(lbDateLabel);
        lbDateWrapper.appendChild(lbDate);
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbResultsMemEntry, ".cl-widget-ms-first-to-mem-rank").innerHTML = "--";
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbResultsMemEntry, ".cl-widget-ms-first-to-mem-points").innerHTML = "--/" + strategy.recordTimeWhenSumReaches;
        img.src = "";
        img.alt = "";
        img.style.display = "block";
        lbHeadersRank.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
        lbHeadersPoints.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;
        lbHeaders.appendChild(lbHeadersRank);
        lbHeaders.appendChild(lbHeadersPoints);
        lbResultsList.appendChild(lbResultsMemEntry);
        lbResultsWrapper.appendChild(lbHeaders);
        lbResultsWrapper.appendChild(lbResultsList);
        lbWrapper.appendChild(lbDateWrapper);
        lbWrapper.appendChild(lbResultsWrapper);
        defaultDomObj = wrapperDomObj.appendChild(lbWrapper);
        setTimeout(function () {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(wrapperDomObj, "cl-show");
        }, 200);
      } else {
        if (!Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(wrapperDomObj, "cl-show")) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(wrapperDomObj, "cl-show");
        }

        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-first-to-date-label").innerHTML = label;
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-first-to-date").innerHTML = date;
      }

      mapObject(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
        if ((lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) && typeof lbEntry.rankings !== "undefined") {
          var scoreArea = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(defaultDomObj, ".cl-widget-ms-first-to-results-list");
          scoreArea.innerHTML = "";
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-first-to-date-label").innerHTML = "";
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-first-to-date").innerHTML = dateObj;
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-first-to-date-wrapper"), "cl-widget-ms-first-to-date-only");
          mapObject(lbEntry.rankings, function (lbRankingEntry) {
            var icon = _this.settings.lbWidget.populateIdenticonBase64Image(lbRankingEntry.memberId),
                lbWrapper = _this.layoutFirstToOrEmptyEntry(),
                img = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbWrapper, ".cl-widget-ms-first-to-mem-img"),
                selfMember = lbRankingEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbRankingEntry.memberId === _this.settings.lbWidget.settings.memberId;

            if (selfMember) {
              Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(lbWrapper, "cl-widget-ms-first-to-mem-self");
            }

            img.src = icon;
            img.alt = "";
            img.style.display = "block";
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbWrapper, ".cl-widget-ms-first-to-mem-label").innerHTML = selfMember ? "YOU" : "";
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbWrapper, ".cl-widget-ms-first-to-mem-rank").innerHTML = "<span class='cl-mem-rank-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.rank + "</span><span class='cl-mem-rank'>" + lbRankingEntry.rank + "</span>";
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(lbWrapper, ".cl-widget-ms-first-to-mem-points").innerHTML = "<span class='cl-mem-points-label'>" + _this.settings.lbWidget.settings.translation.leaderboard.points + "</span><span class='cl-mem-points'>" + lbRankingEntry.points + "/" + strategy.recordTimeWhenSumReaches + "</span>";
            scoreArea.appendChild(lbWrapper);
          });
        }
      });

      if (inverse && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(defaultDomObj, "cl-inverse")) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(defaultDomObj, "cl-inverse");
      }
    };

    this.layoutSumBestOf = function () {
      var _this = this,
          timeManagement = _this.timeManagement(),
          diff = timeManagement.diff,
          label = timeManagement.label,
          date = timeManagement.date,
          wrapperDomObj = _this.settings.infoContainer,
          sumBestDomObj = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-wrapper"),
          inverse = timeManagement.inverse;

      if (sumBestDomObj === null) {
        _this.removeUnusedElements();

        var lbWrapper = document.createElement("div"),
            lbDateWrapper = document.createElement("div"),
            lbDateLabel = document.createElement("div"),
            lbDate = document.createElement("div"),
            lbResultsWrapper = document.createElement("div"),
            lbResultsScoreArea = document.createElement("div"),
            lbResultsScoreAreaHigh = document.createElement("div"),
            lbResultsScoreAreaHighLabel = document.createElement("div"),
            lbResultsScoreAreaHighScore = document.createElement("div"),
            lbResultsScoreAreaLast = document.createElement("div"),
            lbResultsScoreAreaLastLabel = document.createElement("div"),
            lbResultsScoreAreaLastScore = document.createElement("div"),
            lbResultsRankArea = document.createElement("div"),
            lbResultsRankValue = document.createElement("span");
        lbWrapper.setAttribute("class", "cl-widget-ms-sum-best-wrapper");
        lbDateLabel.setAttribute("class", "cl-widget-ms-sum-best-date-label");
        lbDate.setAttribute("class", "cl-widget-ms-sum-best-date");
        lbDateWrapper.setAttribute("class", "cl-widget-ms-sum-best-date-wrapper");
        lbResultsWrapper.setAttribute("class", "cl-widget-ms-sum-best-results-wrapper");
        lbResultsScoreArea.setAttribute("class", "cl-widget-ms-sum-best-area");
        lbResultsScoreAreaHigh.setAttribute("class", "cl-widget-ms-sum-best-high-area");
        lbResultsScoreAreaHighLabel.setAttribute("class", "cl-widget-ms-sum-best-high-label");
        lbResultsScoreAreaHighScore.setAttribute("class", "cl-widget-ms-sum-best-high-score");
        lbResultsScoreAreaLast.setAttribute("class", "cl-widget-ms-sum-best-last-area");
        lbResultsScoreAreaLastLabel.setAttribute("class", "cl-widget-ms-sum-best-last-label");
        lbResultsScoreAreaLastScore.setAttribute("class", "cl-widget-ms-sum-best-last-score");
        lbResultsRankArea.setAttribute("class", "cl-widget-ms-sum-best-rank-area");
        lbResultsRankValue.setAttribute("class", "cl-widget-ms-sum-best-rank-value");
        lbDateLabel.innerHTML = label;
        lbDate.innerHTML = date;
        lbResultsScoreAreaHighLabel.innerHTML = _this.settings.lbWidget.settings.translation.miniLeaderboard.highScore;
        lbResultsScoreAreaHighScore.innerHTML = "--";
        lbResultsScoreAreaHigh.appendChild(lbResultsScoreAreaHighLabel);
        lbResultsScoreAreaHigh.appendChild(lbResultsScoreAreaHighScore);
        lbResultsScoreArea.appendChild(lbResultsScoreAreaHigh);
        lbResultsScoreAreaLastLabel.innerHTML = _this.settings.lbWidget.settings.translation.miniLeaderboard.lastScore;
        lbResultsScoreAreaLastScore.innerHTML = "--";
        lbResultsScoreAreaLast.appendChild(lbResultsScoreAreaLastLabel);
        lbResultsScoreAreaLast.appendChild(lbResultsScoreAreaLastScore);
        lbResultsScoreArea.appendChild(lbResultsScoreAreaLast);
        lbResultsRankValue.innerHTML = "--";
        lbResultsRankArea.appendChild(lbResultsRankValue);
        lbResultsWrapper.appendChild(lbResultsScoreArea);
        lbResultsWrapper.appendChild(lbResultsRankArea);
        lbDateWrapper.appendChild(lbDateLabel);
        lbDateWrapper.appendChild(lbDate);
        lbWrapper.appendChild(lbDateWrapper);
        lbWrapper.appendChild(lbResultsWrapper);
        sumBestDomObj = wrapperDomObj.appendChild(lbWrapper);
        setTimeout(function () {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(wrapperDomObj, "cl-show");
        }, 200);
      } else {
        if (!Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(wrapperDomObj, "cl-show")) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(wrapperDomObj, "cl-show");
        }

        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-date-label").innerHTML = label;
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-date").innerHTML = date;
      }

      mapObject(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lbEntry) {
        if (lbEntry.memberRefId === _this.settings.lbWidget.settings.memberId || lbEntry.memberId === _this.settings.lbWidget.settings.memberId) {
          var lastScore = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-last-score").innerHTML,
              highScore = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-high-score").innerHTML,
              rank = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-rank-value"),
              change = lbEntry.change < 0 ? "down" : lbEntry.change > 0 ? "up" : "same",
              rankValue = lbEntry.rank;

          if (lastScore !== String(lbEntry.points) && String(lbEntry.points) !== highScore) {
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-last-score").innerHTML = highScore;
          }

          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-high-score").innerHTML = lbEntry.points;
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(rank, "cl-ms-rank-up");
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(rank, "cl-ms-rank-down");
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(rank, "cl-ms-rank-same");
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(rank, "cl-ms-rank-" + change);
          rank.innerHTML = rankValue;
        }
      });

      if (inverse && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(sumBestDomObj, "cl-inverse")) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(sumBestDomObj, "cl-inverse");
      }
    };

    this.layoutRequiresOptIn = function () {
      var _this = this,
          diff = moment__WEBPACK_IMPORTED_MODULE_2___default()(_this.settings.lbWidget.settings.competition.activeCompetition.scheduledStart).diff(moment__WEBPACK_IMPORTED_MODULE_2___default()()),
          label = "Starting In",
          wrapperDomObj = _this.settings.infoContainer,
          date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_2___default.a.duration(diff));

      if (diff < 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
        label = "starting";
        date = "";
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode > 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode < 3) {
        diff = moment__WEBPACK_IMPORTED_MODULE_2___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_2___default()());
        label = "started";
        date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_2___default.a.duration(diff));
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
        label = "finishing";
        date = "";
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
        label = "finished";
        date = "";
      }

      if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-optin-wrapper") === null) {
        _this.removeUnusedElements();

        var optInWrapper = document.createElement("div"),
            optInDateWrapper = document.createElement("div"),
            optInDateLabel = document.createElement("div"),
            optInDate = document.createElement("div"),
            optInDateActionWrapper = document.createElement("div"),
            optInDateAction = document.createElement("a");
        optInWrapper.setAttribute("class", "cl-widget-ms-optin-wrapper");
        optInDateLabel.setAttribute("class", "cl-widget-ms-optin-date-label");
        optInDate.setAttribute("class", "cl-widget-ms-optin-date");
        optInDateWrapper.setAttribute("class", "cl-widget-ms-optin-date-wrapper");
        optInDateActionWrapper.setAttribute("class", "cl-widget-ms-optin-action-wrapper");
        optInDateAction.setAttribute("class", "cl-widget-ms-optin-action");
        optInDateLabel.innerHTML = label;
        optInDate.innerHTML = date;
        optInDateAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
        optInDateWrapper.appendChild(optInDateLabel);
        optInDateWrapper.appendChild(optInDate);
        optInDateActionWrapper.appendChild(optInDateAction);
        optInWrapper.appendChild(optInDateWrapper);
        optInWrapper.appendChild(optInDateActionWrapper);
        wrapperDomObj.appendChild(optInWrapper);
        setTimeout(function () {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(wrapperDomObj, "cl-show");
        }, 200);
      } else {
        if (!Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(wrapperDomObj, "cl-show")) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(wrapperDomObj, "cl-show");
        }

        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-optin-date-label").innerHTML = label;
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-optin-date").innerHTML = date;
      }
    };

    this.removeUnusedElements = function () {
      var _this = this,
          defaultLayoutWrapperDomObj = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-default-wrapper"),
          optInWrapperDomObj = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-optin-wrapper"),
          sumBestDomObj = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-sum-best-wrapper"),
          firstToDomObj = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-first-to-wrapper");

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.container, "cl-ms-default-style");
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.container, "cl-ms-optin-style");
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.container, "cl-ms-sum-best-style");
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.container, "cl-ms-first-to-style");

      if (defaultLayoutWrapperDomObj !== null) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(defaultLayoutWrapperDomObj);
      }

      if (optInWrapperDomObj !== null) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(optInWrapperDomObj);
      }

      if (sumBestDomObj !== null) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(sumBestDomObj);
      }

      if (firstToDomObj !== null) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(firstToDomObj);
      }
    };

    this.clearAll = function () {
      var _this = this;

      if (_this.settings.updateInterval) {
        clearTimeout(_this.settings.updateInterval);
      }

      _this.removeInfoArea();

      _this.settings.active = false;
    };

    this.removeInfoArea = function () {
      var _this = this,
          wrapperDomObj = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-show"),
          layout = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-default-wrapper");

      if (wrapperDomObj !== null) Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(wrapperDomObj, "cl-show");

      if (layout !== null) {
        setTimeout(function () {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(layout);
        }, 300);
      }
    };

    this.updateScoreBoard = function () {
      var _this = this;

      if (_this.settings.updateInterval) {
        clearTimeout(_this.settings.updateInterval);
      }

      _this.settings.updateInterval = setTimeout(function () {
        _this.loadInfoArea(function () {
          _this.updateScoreBoard();
        });
      }, _this.settings.updateIntervalTime);
    };

    this.loadInfoArea = function (callback) {
      var _this = this;

      if (_this.settings.active && _this.settings.lbWidget.settings.competition.activeCompetition !== null && _this.settings.lbWidget.settings.competition.activeCompetition.statusCode < 7) {
        if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === "boolean" && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
          _this.layoutRequiresOptIn();

          callback();
        } else if (_this.settings.lbWidget.settings.competition.activeContest !== null && _this.settings.lbWidget.settings.competition.activeContest.strategy.type === "SumBest") {
          _this.layoutSumBestOf();

          callback();
        } else if (_this.settings.lbWidget.settings.competition.activeContest !== null && _this.settings.lbWidget.settings.competition.activeContest.strategy.type === "FirstTo") {
          _this.layoutFirstToOrEmpty(_this.settings.lbWidget.settings.competition.activeContest.strategy);

          callback();
        } else if (_this.settings.lbWidget.settings.competition.activeContestId !== null) {
          _this.layoutDefaultOrEmpty();

          callback();
        } else {
          _this.layoutDefaultOrEmpty();
        }
      } else {
        _this.clearAll();
      }
    };

    this.eventListeners = function () {
      var _this = this;

      Object(_modules_dragElement__WEBPACK_IMPORTED_MODULE_6__["default"])(_this.settings.container, Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-icon"), _this.settings.overlayContainer, _this.settings.lbWidget.settings.bindContainer, function (newTop, newLeft) {
        _this.settings.lbWidget.stopActivity();

        if (newTop <= 5) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.container, "cl-vertical-mini");
        } else if (newLeft <= 5) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.container, "cl-vertical-mini");
        }

        _this.settings.dragging = true;
      }, function () {
        _this.settings.lbWidget.restartActivity();

        setTimeout(function () {
          _this.settings.dragging = false;
        }, 200);
      }, function () {
        _this.settings.lbWidget.clickedMiniScoreBoard();
      });
    };

    this.initLayout = function (callback) {
      var _this = this;

      if (_this.settings.container === null) {
        _this.settings.active = true;
        _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layout());
        _this.settings.overlayContainer = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.overlayLayout());
        _this.settings.infoContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-ms-information-wrapper");

        _this.eventListeners();
      }

      if (typeof callback === "function") {
        callback();
      }
    };

    this.loadScoreBoard = function () {
      var _this = this;

      _this.initLayout(function () {
        _this.loadInfoArea(function () {
          _this.updateScoreBoard();
        });

        setTimeout(function () {
          _this.updateScoreBoard();
        }, 1000);
      });
    };
  };

  var Notifications = function Notifications(options) {
    this.settings = {
      container: null,
      detailsContainer: null,
      lbWidget: null,
      eventStream: [],
      checkTimeout: 2000,
      onDisplayCheckTimeout: 10000,
      checkInterval: null,
      autoNotificationHideInterval: null,
      autoNotificationHideTime: 10000,
      displayInProgress: false
    };

    if (typeof options !== "undefined") {
      for (var opt in options) {
        if (options.hasOwnProperty(opt)) {
          this.settings[opt] = options[opt];
        }
      }
    }

    this.layoutWrapper = function () {
      var wrapper = document.createElement("div"),
          iconWrapper = document.createElement("div"),
          icon = document.createElement("div"),
          informationWrapper = document.createElement("div"),
          informationTopWrapper = document.createElement("div"),
          informationDetailsContainer = document.createElement("div"),
          informationDetailsLabel = document.createElement("div"),
          informationDetailsDescription = document.createElement("div"),
          informationWrapperClose = document.createElement("div"),
          informationClose = document.createElement("a");
      wrapper.setAttribute("class", "cl-widget-notif-wrapper");
      iconWrapper.setAttribute("class", "cl-widget-notif-icon-wrapper");
      icon.setAttribute("class", "cl-widget-notif-icon");
      informationTopWrapper.setAttribute("class", "cl-widget-notif-information-top-wrapper");
      informationWrapper.setAttribute("class", "cl-widget-notif-information-wrapper");
      informationDetailsContainer.setAttribute("class", "cl-widget-notif-information-details-wrapper");
      informationDetailsLabel.setAttribute("class", "cl-widget-notif-information-details-label");
      informationDetailsDescription.setAttribute("class", "cl-widget-notif-information-details-description");
      informationWrapperClose.setAttribute("class", "cl-widget-notif-information-close-wrapper");
      informationClose.setAttribute("class", "cl-widget-notif-information-close");
      informationClose.href = "javascript:void(0);";
      informationClose.innerHTML = "x";
      informationDetailsContainer.appendChild(informationDetailsLabel);
      informationDetailsContainer.appendChild(informationDetailsDescription);
      informationWrapperClose.appendChild(informationClose);
      informationWrapper.appendChild(informationWrapperClose);
      informationWrapper.appendChild(informationDetailsContainer);
      informationTopWrapper.appendChild(informationWrapper);
      iconWrapper.appendChild(icon);
      wrapper.appendChild(iconWrapper);
      wrapper.appendChild(informationTopWrapper);
      return wrapper;
    };

    var processed = {};

    this.startSSE = function () {
      var _this = this;

      _this.settings.sseInstance = new Messaging({
        sseUrl: _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSE.replace(":space", _this.settings.lbWidget.settings.spaceName).replace(":id", _this.settings.lbWidget.settings.memberId),
        heartbeat: _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSEHeartbeat.replace(":space", _this.settings.lbWidget.settings.spaceName).replace(":id", _this.settings.lbWidget.settings.memberId),
        ajax: {
          url: null,
          apiKey: {
            "X-API-KEY": _this.settings.lbWidget.settings.apiKey
          }
        },
        callback: function callback(data) {
          var dataKey = JSON.stringify(data),
              currentTime = new Date().getTime();

          if (typeof processed[dataKey] === "undefined" || typeof processed[dataKey] !== "undefined" && processed[dataKey] + 10000 < currentTime) {
            processed[JSON.stringify(data)] = currentTime;

            _this.settings.eventStream.push(data);
          }
        },
        onStartupError: function onStartupError(settings) {},
        debug: true
      });
    };

    this.autoNotificationHide = function () {
      var _this = this;

      if (_this.settings.autoNotificationHideInterval) {
        clearTimeout(_this.settings.autoNotificationHideInterval);
      }

      _this.settings.autoNotificationHideInterval = setTimeout(function () {
        _this.hideNotification();
      }, _this.settings.autoNotificationHideTime);
    };

    this.hideNotification = function () {
      var _this = this;

      if (_this.settings.autoNotificationHideInterval) {
        clearTimeout(_this.settings.autoNotificationHideInterval);
      }

      _this.settings.displayInProgress = false;
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-notif-information-wrapper"), "cl-show");
      setTimeout(function () {
        _this.settings.container.style.display = "none";
      }, 200);
    };

    this.showAchievementNotification = function (data) {
      var _this = this,
          label = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.detailsContainer, ".cl-widget-notif-information-details-label"),
          description = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.detailsContainer, ".cl-widget-notif-information-details-description"),
          descriptionText = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["stripHtml"])(data.data.description);

      label.innerHTML = data.data.name.length > 23 ? data.data.name.substr(0, 23) + "..." : data.data.name;
      description.innerHTML = descriptionText.length > 60 ? descriptionText.substr(0, 60) + "..." : descriptionText;
      _this.settings.detailsContainer.dataset.id = data.data.id;
      _this.settings.container.style.display = "block";
      setTimeout(function () {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-notif-information-wrapper"), "cl-show");
      }, 200);

      _this.autoNotificationHide();
    };

    this.eventStreamCheck = function () {
      var _this = this;

      if (_this.settings.checkInterval) {
        clearTimeout(_this.settings.checkInterval);
      }

      if (_this.settings.eventStream.length > 0 && !_this.settings.displayInProgress) {
        var data = _this.settings.eventStream[0],
            index = _this.settings.eventStream.indexOf(data);

        if (typeof data.achievementId !== "undefined") {
          _this.settings.displayInProgress = true;

          _this.settings.lbWidget.getAchievement(data.achievementId, function (data) {
            _this.showAchievementNotification(data);

            _this.settings.checkInterval = setTimeout(function () {
              _this.eventStreamCheck();
            }, _this.settings.onDisplayCheckTimeout);
          });

          _this.settings.eventStream.splice(index, 1);
        } else if (typeof data.notificationId !== "undefined") {
          _this.settings.checkInterval = setTimeout(function () {
            _this.eventStreamCheck();
          }, _this.settings.checkTimeout);
        } else {
          _this.settings.checkInterval = setTimeout(function () {
            _this.eventStreamCheck();
          }, _this.settings.checkTimeout);
        }

        if (index > -1) {
          _this.settings.eventStream.splice(index, 1);
        }
      } else {
        _this.settings.checkInterval = setTimeout(function () {
          _this.eventStreamCheck();
        }, _this.settings.checkTimeout);
      }
    };

    this.init = function () {
      var _this = this;

      if (_this.settings.container === null) {
        _this.startSSE();

        _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layoutWrapper());
        _this.settings.detailsContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-widget-notif-information-details-wrapper");
      } else {
        // terminate SSE
        _this.settings.sseInstance.closeChanel(); // update the member


        _this.settings.sseInstance.settings.sseUrl = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSE.replace(":space", _this.settings.lbWidget.settings.spaceName).replace(":id", _this.settings.lbWidget.settings.memberId);
        _this.settings.sseInstance.settings.heartbeat = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.memberSSEHeartbeat.replace(":space", _this.settings.lbWidget.settings.spaceName).replace(":id", _this.settings.lbWidget.settings.memberId); // re-instantiate SSE

        _this.settings.sseInstance.openChanel();
      }

      _this.eventStreamCheck();
    };
  };

  var MainWidget = function MainWidget(options) {
    this.settings = {
      lbWidget: null,
      container: null,
      navigation: null,
      section: null,
      detailsContainer: null,
      tournamentListContainer: null,
      headerDate: null,
      preLoader: {
        preLoaderActive: false,
        preLoaderlastAttempt: null,
        preloaderCallbackRecovery: function preloaderCallbackRecovery() {}
      },
      achievement: {
        container: null,
        detailsContainer: null
      },
      reward: {
        container: null,
        detailsContainer: null
      },
      messages: {
        container: null,
        detailsContainer: null
      },
      leaderboard: {
        defaultEmptyList: 20,
        topResultSize: 3,
        header: null,
        container: null,
        list: null,
        topResults: null,
        timerInterval: null
      },
      tournamentsSection: {
        accordionLayout: [{
          label: "Upcoming Tournaments",
          type: "readyCompetitions",
          show: false,
          showTopResults: 1
        }, {
          label: "Active Tournaments",
          type: "activeCompetitions",
          show: true,
          showTopResults: 1
        }, {
          label: "Finished Tournaments",
          type: "finishedCompetitions",
          show: false,
          showTopResults: 1
        }]
      },
      rewardsSection: {
        accordionLayout: [{
          label: "Available Rewards",
          type: "availableRewards",
          show: true,
          showTopResults: 1
        }, {
          label: "Claimed Rewards",
          type: "rewards",
          show: false,
          showTopResults: 1
        }, {
          label: "Expired Rewards",
          type: "expiredRewards",
          show: false,
          showTopResults: 1
        }]
      },
      active: false,
      navigationSwitchLastAtempt: new Date().getTime(),
      navigationSwitchInProgress: false
    };

    if (typeof options !== "undefined") {
      for (var opt in options) {
        if (options.hasOwnProperty(opt)) {
          this.settings[opt] = options[opt];
        }
      }
    }
    /**
     * Accordion style layout
     * - parameters:
     *      - label: String "Available rewards"
     *      - type: String "available-rewards"
     *      - shown: Boolean true/false
     * @param data Array
     * @param onLayout Function
     */


    this.accordionStyle = function (data, onLayout) {
      var _this = this,
          accordionWrapper = document.createElement("div");

      accordionWrapper.setAttribute("class", "cl-main-accordion-container");
      mapObject(data, function (entry) {
        var accordionSection = document.createElement("div"),
            accordionLabel = document.createElement("div"),
            topShownEntry = document.createElement("div"),
            accordionListContainer = document.createElement("div"),
            accordionList = document.createElement("div");
        accordionSection.setAttribute("class", "cl-accordion " + entry.type + (typeof entry.show === "boolean" && entry.show ? " cl-shown" : ""));
        accordionLabel.setAttribute("class", "cl-accordion-label");
        topShownEntry.setAttribute("class", "cl-accordion-entry");
        accordionListContainer.setAttribute("class", "cl-accordion-list-container");
        accordionList.setAttribute("class", "cl-accordion-list");

        if (typeof _this.settings.lbWidget.settings.translation.rewards[entry.type] !== "undefined") {
          accordionLabel.innerHTML = _this.settings.lbWidget.settings.translation.rewards[entry.type];
        } else if (typeof _this.settings.lbWidget.settings.translation.tournaments[entry.type] !== "undefined") {
          accordionLabel.innerHTML = _this.settings.lbWidget.settings.translation.tournaments[entry.type];
        } else {
          accordionLabel.innerHTML = entry.label;
        }

        if (typeof onLayout === "function") {
          onLayout(accordionSection, accordionList, topShownEntry, entry);
        }

        accordionListContainer.appendChild(accordionList);
        accordionSection.appendChild(accordionLabel);
        accordionSection.appendChild(topShownEntry);
        accordionSection.appendChild(accordionListContainer);
        accordionWrapper.appendChild(accordionSection);
      });
      return accordionWrapper;
    };

    this.accordionNavigation = function (element) {
      var _this = this,
          parentEl = element.parentNode;

      if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(parentEl, "cl-shown")) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(parentEl, "cl-shown");
      } else {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(parentEl, ".cl-main-accordion-container"), ".cl-shown"), function (obj) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(obj, "cl-shown");
        });
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(parentEl, "cl-shown");
      }
    };

    this.layout = function () {
      var _this = this,
          wrapper = document.createElement("div"),
          innerWrapper = document.createElement("div"),
          navigationContainer = document.createElement("div"),
          navigationItems = document.createElement("div"),
          navigationItemLB = document.createElement("div"),
          navigationItemLBIcon = document.createElement("div"),
          navigationItemACH = document.createElement("div"),
          navigationItemACHIcon = document.createElement("div"),
          navigationItemRewards = document.createElement("div"),
          navigationItemRewardsIcon = document.createElement("div"),
          navigationItemInbox = document.createElement("div"),
          navigationItemInboxIcon = document.createElement("div"),
          mainSectionContainer = document.createElement("div"),
          preLoaderContainer = document.createElement("div"),
          preLoaderContent = document.createElement("div"),
          preLoaderBar1 = document.createElement("div"),
          preLoaderBar2 = document.createElement("div"),
          preLoaderBar3 = document.createElement("div"),
          sectionLB = _this.leaderboardAreaLayout(),
          sectionACH = _this.achievementsAreaLayout(),
          sectionRewards = _this.rewardsAreaLayout(),
          sectionInbox = _this.inboxAreaLayout();

      wrapper.setAttribute("class", "cl-main-widget-wrapper");
      innerWrapper.setAttribute("class", "cl-main-widget-inner-wrapper");
      navigationContainer.setAttribute("class", "cl-main-widget-navigation-container");
      navigationItems.setAttribute("class", "cl-main-widget-navigation-items");
      navigationItemLB.setAttribute("class", "cl-main-widget-navigation-lb cl-active-nav");
      navigationItemLBIcon.setAttribute("class", "cl-main-widget-navigation-lb-icon cl-main-navigation-item");
      navigationItemACH.setAttribute("class", "cl-main-widget-navigation-ach");
      navigationItemACHIcon.setAttribute("class", "cl-main-widget-navigation-ach-icon cl-main-navigation-item");
      navigationItemRewards.setAttribute("class", "cl-main-widget-navigation-rewards");
      navigationItemRewardsIcon.setAttribute("class", "cl-main-widget-navigation-rewards-icon cl-main-navigation-item");
      mainSectionContainer.setAttribute("class", "cl-main-widget-section-container");
      preLoaderContainer.setAttribute("class", "cl-main-widget-pre-loader");
      preLoaderContent.setAttribute("class", "cl-main-widget-pre-loader-content");
      preLoaderBar1.setAttribute("class", "cl-pre-loader-bar");
      preLoaderBar2.setAttribute("class", "cl-pre-loader-bar");
      preLoaderBar3.setAttribute("class", "cl-pre-loader-bar");
      preLoaderContent.appendChild(preLoaderBar1);
      preLoaderContent.appendChild(preLoaderBar2);
      preLoaderContent.appendChild(preLoaderBar3);
      preLoaderContainer.appendChild(preLoaderContent);
      navigationItemLB.appendChild(navigationItemLBIcon);
      navigationItems.appendChild(navigationItemLB);
      navigationItemACH.appendChild(navigationItemACHIcon);
      navigationItems.appendChild(navigationItemACH);
      navigationItemRewards.appendChild(navigationItemRewardsIcon);
      navigationItems.appendChild(navigationItemRewards);

      if (_this.settings.lbWidget.settings.messages.enable) {
        navigationItemInbox.setAttribute("class", "cl-main-widget-navigation-inbox");
        navigationItemInboxIcon.setAttribute("class", "cl-main-widget-navigation-inbox-icon cl-main-navigation-item");
        navigationItemInbox.appendChild(navigationItemInboxIcon);
        navigationItems.appendChild(navigationItemInbox);
      }

      navigationContainer.appendChild(navigationItems);
      mainSectionContainer.appendChild(sectionLB);
      mainSectionContainer.appendChild(sectionACH);
      mainSectionContainer.appendChild(sectionRewards);
      mainSectionContainer.appendChild(sectionInbox);
      mainSectionContainer.appendChild(preLoaderContainer);
      innerWrapper.appendChild(navigationContainer);
      innerWrapper.appendChild(mainSectionContainer);
      wrapper.appendChild(innerWrapper);
      return wrapper;
    };

    this.leaderboardAreaLayout = function () {
      var _this = this,
          sectionLB = document.createElement("div"),
          sectionLBHeader = document.createElement("div"),
          sectionLBHeaderList = document.createElement("div"),
          sectionLBHeaderListIcon = document.createElement("div"),
          sectionLBHeaderLabel = document.createElement("div"),
          sectionLBHeaderDate = document.createElement("div"),
          sectionLBHeaderClose = document.createElement("div"),
          sectionLBDetails = document.createElement("div"),
          sectionLBDetailsInfo = document.createElement("div"),
          sectionLBDetailsInfoIcon = document.createElement("div"),
          sectionLBDetailsContentContainer = document.createElement("div"),
          sectionLBDetailsContentContainerLabel = document.createElement("div"),
          sectionLBDetailsContentContainerDate = document.createElement("div"),
          sectionLBLeaderboard = document.createElement("div"),
          sectionLBLeaderboardHeader = document.createElement("div"),
          sectionLBLeaderboardHeaderLabels = document.createElement("div"),
          sectionLBLeaderboardHeaderTopResults = document.createElement("div"),
          sectionLBLeaderboardBody = document.createElement("div"),
          sectionLBLeaderboardBodyResults = document.createElement("div"),
          sectionLBMissingMember = document.createElement("div"),
          sectionLBOptInContainer = document.createElement("div"),
          sectionLBOptInAction = document.createElement("a"),
          sectionLBFooter = document.createElement("div"),
          sectionLBFooterContent = document.createElement("div"),
          sectionTournamentDetailsContainer = document.createElement("div"),
          sectionTournamentDetailsHeader = document.createElement("div"),
          sectionTournamentDetailsHeaderLabel = document.createElement("div"),
          sectionTournamentDetailsHeaderDate = document.createElement("div"),
          sectionTournamentDetailsBackBtn = document.createElement("a"),
          sectionTournamentDetailsBodyContainer = document.createElement("div"),
          sectionTournamentDetailsBodyImageContainer = document.createElement("div"),
          sectionTournamentDetailsBody = document.createElement("div"),
          sectionTournamentDetailsOptInContainer = document.createElement("div"),
          sectionTournamentDetailsOptInAction = document.createElement("a"),
          sectionTournamentList = document.createElement("div"),
          sectionTournamentListBody = document.createElement("div"),
          sectionTournamentListBodyResults = document.createElement("div"),
          sectionTournamentBackAction = document.createElement("a");

      sectionLB.setAttribute("class", "cl-main-widget-lb cl-main-section-item cl-main-active-section");
      sectionLBHeader.setAttribute("class", "cl-main-widget-lb-header");
      sectionLBHeaderList.setAttribute("class", "cl-main-widget-lb-header-list");
      sectionLBHeaderListIcon.setAttribute("class", "cl-main-widget-lb-header-list-icon");
      sectionLBHeaderLabel.setAttribute("class", "cl-main-widget-lb-header-label");
      sectionLBHeaderDate.setAttribute("class", "cl-main-widget-lb-header-date");
      sectionLBHeaderClose.setAttribute("class", "cl-main-widget-lb-header-close");
      sectionLBDetails.setAttribute("class", "cl-main-widget-lb-details");
      sectionLBDetailsInfo.setAttribute("class", "cl-main-widget-lb-details-info");
      sectionLBDetailsInfoIcon.setAttribute("class", "cl-main-widget-lb-details-info-icon");
      sectionLBDetailsContentContainer.setAttribute("class", "cl-main-widget-lb-details-content");
      sectionLBDetailsContentContainerLabel.setAttribute("class", "cl-main-widget-lb-details-content-label");
      sectionLBDetailsContentContainerDate.setAttribute("class", "cl-main-widget-lb-details-content-date"); // Leaderboard result container

      sectionLBLeaderboard.setAttribute("class", "cl-main-widget-lb-leaderboard");
      sectionLBLeaderboardHeader.setAttribute("class", "cl-main-widget-lb-leaderboard-header");
      sectionLBLeaderboardHeaderLabels.setAttribute("class", "cl-main-widget-lb-leaderboard-header-labels");
      sectionLBLeaderboardHeaderTopResults.setAttribute("class", "cl-main-widget-lb-leaderboard-header-top-res");
      sectionLBLeaderboardBody.setAttribute("class", "cl-main-widget-lb-leaderboard-body");
      sectionLBLeaderboardBodyResults.setAttribute("class", "cl-main-widget-lb-leaderboard-body-res");
      sectionLBMissingMember.setAttribute("class", "cl-main-widget-lb-missing-member"); // footer

      sectionLBFooter.setAttribute("class", "cl-main-widget-lb-footer");
      sectionLBFooterContent.setAttribute("class", "cl-main-widget-lb-footer-content"); // details section

      sectionTournamentDetailsContainer.setAttribute("class", "cl-main-widget-lb-details-container");
      sectionTournamentDetailsHeader.setAttribute("class", "cl-main-widget-lb-details-header");
      sectionTournamentDetailsHeaderLabel.setAttribute("class", "cl-main-widget-lb-details-header-label");
      sectionTournamentDetailsHeaderDate.setAttribute("class", "cl-main-widget-lb-details-header-date");
      sectionTournamentDetailsBackBtn.setAttribute("class", "cl-main-widget-lb-details-back-btn");
      sectionTournamentDetailsBodyContainer.setAttribute("class", "cl-main-widget-lb-details-body-container");
      sectionTournamentDetailsBodyImageContainer.setAttribute("class", "cl-main-widget-lb-details-body-image-cont");
      sectionTournamentDetailsBody.setAttribute("class", "cl-main-widget-lb-details-body");
      sectionTournamentDetailsOptInContainer.setAttribute("class", "cl-main-widget-lb-details-optin-container");
      sectionTournamentDetailsOptInAction.setAttribute("class", "cl-main-widget-lb-details-optin-action");
      sectionTournamentList.setAttribute("class", "cl-main-widget-tournaments-list");
      sectionTournamentBackAction.setAttribute("class", "cl-main-widget-tournaments-back-btn");
      sectionTournamentListBody.setAttribute("class", "cl-main-widget-tournaments-list-body");
      sectionTournamentListBodyResults.setAttribute("class", "cl-main-widget-tournaments-list-body-res");
      sectionLBOptInContainer.setAttribute("class", "cl-main-widget-lb-optin-container");
      sectionLBOptInAction.setAttribute("class", "cl-main-widget-lb-optin-action");
      sectionLBHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.label;
      sectionLBFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
      sectionTournamentDetailsOptInAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
      sectionTournamentDetailsOptInAction.href = "javascript:void(0);";
      sectionLBOptInAction.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
      sectionLBOptInAction.href = "javascript:void(0);";
      sectionLBHeaderList.appendChild(sectionLBHeaderListIcon);
      sectionLBHeader.appendChild(sectionLBHeaderList);
      sectionLBHeader.appendChild(sectionLBHeaderLabel);
      sectionLBHeader.appendChild(sectionLBHeaderDate);
      sectionLBHeader.appendChild(sectionLBHeaderClose);
      sectionLBDetailsInfo.appendChild(sectionLBDetailsInfoIcon);
      sectionLBDetailsContentContainer.appendChild(sectionLBDetailsContentContainerLabel);
      sectionLBDetailsContentContainer.appendChild(sectionLBDetailsContentContainerDate);
      sectionLBDetails.appendChild(sectionLBDetailsInfo);
      sectionLBDetails.appendChild(sectionLBDetailsContentContainer);
      sectionLBLeaderboardHeader.appendChild(sectionLBLeaderboardHeaderLabels);
      sectionLBLeaderboard.appendChild(sectionLBLeaderboardHeader);
      sectionLBLeaderboard.appendChild(sectionLBLeaderboardHeaderTopResults);
      sectionLBLeaderboardBody.appendChild(sectionLBLeaderboardBodyResults);
      sectionLBLeaderboard.appendChild(sectionLBLeaderboardBody);
      sectionLBFooter.appendChild(sectionLBFooterContent);
      sectionTournamentListBody.appendChild(sectionTournamentListBodyResults);
      sectionTournamentList.appendChild(sectionTournamentListBody);
      sectionTournamentList.appendChild(sectionTournamentBackAction);
      sectionTournamentDetailsHeader.appendChild(sectionTournamentDetailsHeaderLabel);
      sectionTournamentDetailsHeader.appendChild(sectionTournamentDetailsHeaderDate);
      sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsHeader);
      sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsBackBtn);
      sectionTournamentDetailsBodyContainer.appendChild(sectionTournamentDetailsBodyImageContainer);
      sectionTournamentDetailsBodyContainer.appendChild(sectionTournamentDetailsBody);
      sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsBodyContainer);
      sectionTournamentDetailsOptInContainer.appendChild(sectionTournamentDetailsOptInAction);
      sectionTournamentDetailsContainer.appendChild(sectionTournamentDetailsOptInContainer);
      sectionLBOptInContainer.appendChild(sectionLBOptInAction);
      sectionLB.appendChild(sectionLBHeader);
      sectionLB.appendChild(sectionLBDetails);
      sectionLB.appendChild(sectionLBLeaderboard);
      sectionLB.appendChild(sectionLBMissingMember);
      sectionLB.appendChild(sectionLBOptInContainer);
      sectionLB.appendChild(sectionLBFooter);
      sectionLB.appendChild(sectionTournamentDetailsContainer);
      sectionLB.appendChild(sectionTournamentList);
      return sectionLB;
    };

    this.achievementsAreaLayout = function () {
      var _this = this,
          sectionACH = document.createElement("div"),
          sectionACHHeader = document.createElement("div"),
          sectionACHHeaderLabel = document.createElement("div"),
          sectionACHHeaderDate = document.createElement("div"),
          sectionACHHeaderClose = document.createElement("div"),
          sectionACHDetails = document.createElement("div"),
          sectionACHDetailsInfo = document.createElement("div"),
          sectionACHDetailsInfoIcon = document.createElement("div"),
          sectionACHDetailsContentContainer = document.createElement("div"),
          sectionACHDetailsContentContainerLabel = document.createElement("div"),
          sectionACHDetailsContentContainerDate = document.createElement("div"),
          sectionACHList = document.createElement("div"),
          sectionACHListBody = document.createElement("div"),
          sectionACHListBodyResults = document.createElement("div"),
          sectionACHFooter = document.createElement("div"),
          sectionACHFooterContent = document.createElement("div"),
          sectionAchievementDetailsContainer = document.createElement("div"),
          sectionAchievementDetailsHeader = document.createElement("div"),
          sectionAchievementDetailsHeaderLabel = document.createElement("div"),
          sectionAchievementDetailsHeaderDate = document.createElement("div"),
          sectionAchievementDetailsBackBtn = document.createElement("a"),
          sectionAchievementDetailsBodyContainer = document.createElement("div"),
          sectionAchievementDetailsBodyImageContainer = document.createElement("div"),
          sectionAchievementDetailsBody = document.createElement("div");

      sectionACH.setAttribute("class", "cl-main-widget-section-ach cl-main-section-item");
      sectionACHHeader.setAttribute("class", "cl-main-widget-ach-header");
      sectionACHHeaderLabel.setAttribute("class", "cl-main-widget-ach-header-label");
      sectionACHHeaderDate.setAttribute("class", "cl-main-widget-ach-header-date");
      sectionACHHeaderClose.setAttribute("class", "cl-main-widget-ach-header-close");
      sectionACHDetails.setAttribute("class", "cl-main-widget-ach-details");
      sectionACHDetailsInfo.setAttribute("class", "cl-main-widget-ach-details-info");
      sectionACHDetailsInfoIcon.setAttribute("class", "cl-main-widget-ach-details-info-icon");
      sectionACHDetailsContentContainer.setAttribute("class", "cl-main-widget-ach-details-content");
      sectionACHDetailsContentContainerLabel.setAttribute("class", "cl-main-widget-ach-details-content-label");
      sectionACHDetailsContentContainerDate.setAttribute("class", "cl-main-widget-ach-details-content-date"); // Leaderboard result container

      sectionACHList.setAttribute("class", "cl-main-widget-ach-list");
      sectionACHListBody.setAttribute("class", "cl-main-widget-ach-list-body");
      sectionACHListBodyResults.setAttribute("class", "cl-main-widget-ach-list-body-res"); // footer

      sectionACHFooter.setAttribute("class", "cl-main-widget-ach-footer");
      sectionACHFooterContent.setAttribute("class", "cl-main-widget-ach-footer-content"); // details section

      sectionAchievementDetailsContainer.setAttribute("class", "cl-main-widget-ach-details-container");
      sectionAchievementDetailsHeader.setAttribute("class", "cl-main-widget-ach-details-header");
      sectionAchievementDetailsHeaderLabel.setAttribute("class", "cl-main-widget-ach-details-header-label");
      sectionAchievementDetailsHeaderDate.setAttribute("class", "cl-main-widget-ach-details-header-date");
      sectionAchievementDetailsBackBtn.setAttribute("class", "cl-main-widget-ach-details-back-btn");
      sectionAchievementDetailsBodyContainer.setAttribute("class", "cl-main-widget-ach-details-body-container");
      sectionAchievementDetailsBodyImageContainer.setAttribute("class", "cl-main-widget-ach-details-body-image-cont");
      sectionAchievementDetailsBody.setAttribute("class", "cl-main-widget-ach-details-body");
      sectionACHHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.achievements.label;
      sectionACHFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
      sectionAchievementDetailsHeader.appendChild(sectionAchievementDetailsHeaderLabel);
      sectionAchievementDetailsHeader.appendChild(sectionAchievementDetailsHeaderDate);
      sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsHeader);
      sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsBackBtn);
      sectionAchievementDetailsBodyContainer.appendChild(sectionAchievementDetailsBodyImageContainer);
      sectionAchievementDetailsBodyContainer.appendChild(sectionAchievementDetailsBody);
      sectionAchievementDetailsContainer.appendChild(sectionAchievementDetailsBodyContainer);
      sectionACHHeader.appendChild(sectionACHHeaderLabel);
      sectionACHHeader.appendChild(sectionACHHeaderDate);
      sectionACHHeader.appendChild(sectionACHHeaderClose);
      sectionACHDetailsInfo.appendChild(sectionACHDetailsInfoIcon);
      sectionACHDetailsContentContainer.appendChild(sectionACHDetailsContentContainerLabel);
      sectionACHDetailsContentContainer.appendChild(sectionACHDetailsContentContainerDate);
      sectionACHDetails.appendChild(sectionACHDetailsInfo);
      sectionACHDetails.appendChild(sectionACHDetailsContentContainer);
      sectionACHListBody.appendChild(sectionACHListBodyResults);
      sectionACHList.appendChild(sectionACHListBody);
      sectionACHFooter.appendChild(sectionACHFooterContent);
      sectionACH.appendChild(sectionACHHeader);
      sectionACH.appendChild(sectionACHDetails);
      sectionACH.appendChild(sectionACHList);
      sectionACH.appendChild(sectionACHFooter);
      sectionACH.appendChild(sectionAchievementDetailsContainer);
      return sectionACH;
    };

    this.rewardsAreaLayout = function () {
      var _this = this,
          sectionRewards = document.createElement("div"),
          sectionRewardsHeader = document.createElement("div"),
          sectionRewardsHeaderLabel = document.createElement("div"),
          sectionRewardsHeaderDate = document.createElement("div"),
          sectionRewardsHeaderClose = document.createElement("div"),
          sectionRewardsDetails = document.createElement("div"),
          sectionRewardsDetailsInfo = document.createElement("div"),
          sectionRewardsDetailsInfoIcon = document.createElement("div"),
          sectionRewardsDetailsContentContainer = document.createElement("div"),
          sectionRewardsDetailsContentContainerLabel = document.createElement("div"),
          sectionRewardsDetailsContentContainerDate = document.createElement("div"),
          sectionRewardsList = document.createElement("div"),
          sectionRewardsListBody = document.createElement("div"),
          sectionRewardsListBodyResults = document.createElement("div"),
          sectionRewardsFooter = document.createElement("div"),
          sectionRewardsFooterContent = document.createElement("div"),
          sectionRewardsDetailsContainer = document.createElement("div"),
          sectionRewardsDetailsHeader = document.createElement("div"),
          sectionRewardsDetailsHeaderLabel = document.createElement("div"),
          sectionRewardsDetailsHeaderDate = document.createElement("div"),
          sectionRewardsDetailsBackBtn = document.createElement("a"),
          sectionRewardsDetailsBodyContainer = document.createElement("div"),
          sectionRewardsDetailsBodyImageContainer = document.createElement("div"),
          sectionRewardsDetailsBody = document.createElement("div"),
          sectionRewardsWinningsContainer = document.createElement("div"),
          sectionRewardsWinningsIcon = document.createElement("div"),
          sectionRewardsWinningsValue = document.createElement("div"),
          sectionRewardsClaimContainer = document.createElement("div"),
          sectionRewardsClaimBtn = document.createElement("a");

      sectionRewards.setAttribute("class", "cl-main-widget-section-reward cl-main-section-item");
      sectionRewardsHeader.setAttribute("class", "cl-main-widget-reward-header");
      sectionRewardsHeaderLabel.setAttribute("class", "cl-main-widget-reward-header-label");
      sectionRewardsHeaderDate.setAttribute("class", "cl-main-widget-reward-header-date");
      sectionRewardsHeaderClose.setAttribute("class", "cl-main-widget-reward-header-close");
      sectionRewardsDetails.setAttribute("class", "cl-main-widget-reward-details");
      sectionRewardsDetailsInfo.setAttribute("class", "cl-main-widget-reward-details-info");
      sectionRewardsDetailsInfoIcon.setAttribute("class", "cl-main-widget-reward-details-info-icon");
      sectionRewardsDetailsContentContainer.setAttribute("class", "cl-main-widget-reward-details-content");
      sectionRewardsDetailsContentContainerLabel.setAttribute("class", "cl-main-widget-reward-details-content-label");
      sectionRewardsDetailsContentContainerDate.setAttribute("class", "cl-main-widget-reward-details-content-date"); // Leaderboard result container

      sectionRewardsList.setAttribute("class", "cl-main-widget-reward-list");
      sectionRewardsListBody.setAttribute("class", "cl-main-widget-reward-list-body");
      sectionRewardsListBodyResults.setAttribute("class", "cl-main-widget-reward-list-body-res"); // footer

      sectionRewardsFooter.setAttribute("class", "cl-main-widget-reward-footer");
      sectionRewardsFooterContent.setAttribute("class", "cl-main-widget-reward-footer-content"); // details section

      sectionRewardsDetailsContainer.setAttribute("class", "cl-main-widget-reward-details-container");
      sectionRewardsDetailsHeader.setAttribute("class", "cl-main-widget-reward-details-header");
      sectionRewardsDetailsHeaderLabel.setAttribute("class", "cl-main-widget-reward-details-header-label");
      sectionRewardsDetailsHeaderDate.setAttribute("class", "cl-main-widget-reward-details-header-date");
      sectionRewardsDetailsBackBtn.setAttribute("class", "cl-main-widget-reward-details-back-btn");
      sectionRewardsDetailsBodyContainer.setAttribute("class", "cl-main-widget-reward-details-body-container");
      sectionRewardsDetailsBodyImageContainer.setAttribute("class", "cl-main-widget-reward-details-body-image-cont");
      sectionRewardsDetailsBody.setAttribute("class", "cl-main-widget-reward-details-body");
      sectionRewardsWinningsContainer.setAttribute("class", "cl-main-widget-reward-winnings-container");
      sectionRewardsWinningsIcon.setAttribute("class", "cl-main-widget-reward-winnings-icon");
      sectionRewardsWinningsValue.setAttribute("class", "cl-main-widget-reward-winnings-value");
      sectionRewardsClaimContainer.setAttribute("class", "cl-main-widget-reward-claim-container");
      sectionRewardsClaimBtn.setAttribute("class", "cl-main-widget-reward-claim-btn");
      sectionRewardsHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.rewards.label;
      sectionRewardsFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
      sectionRewardsClaimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claim;
      sectionRewardsWinningsContainer.appendChild(sectionRewardsWinningsIcon);
      sectionRewardsWinningsContainer.appendChild(sectionRewardsWinningsValue);
      sectionRewardsClaimContainer.appendChild(sectionRewardsClaimBtn);
      sectionRewardsDetailsHeader.appendChild(sectionRewardsDetailsHeaderLabel);
      sectionRewardsDetailsHeader.appendChild(sectionRewardsDetailsHeaderDate);
      sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsHeader);
      sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsBackBtn);
      sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsDetailsBodyImageContainer);
      sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsDetailsBody);
      sectionRewardsDetailsBodyContainer.appendChild(sectionRewardsWinningsContainer);
      sectionRewardsDetailsContainer.appendChild(sectionRewardsDetailsBodyContainer);
      sectionRewardsDetailsContainer.appendChild(sectionRewardsClaimContainer);
      sectionRewardsHeader.appendChild(sectionRewardsHeaderLabel);
      sectionRewardsHeader.appendChild(sectionRewardsHeaderDate);
      sectionRewardsHeader.appendChild(sectionRewardsHeaderClose);
      sectionRewardsDetailsInfo.appendChild(sectionRewardsDetailsInfoIcon);
      sectionRewardsDetailsContentContainer.appendChild(sectionRewardsDetailsContentContainerLabel);
      sectionRewardsDetailsContentContainer.appendChild(sectionRewardsDetailsContentContainerDate);
      sectionRewardsDetails.appendChild(sectionRewardsDetailsInfo);
      sectionRewardsDetails.appendChild(sectionRewardsDetailsContentContainer);
      sectionRewardsListBody.appendChild(sectionRewardsListBodyResults);
      sectionRewardsList.appendChild(sectionRewardsListBody);
      sectionRewardsFooter.appendChild(sectionRewardsFooterContent);
      sectionRewards.appendChild(sectionRewardsHeader);
      sectionRewards.appendChild(sectionRewardsDetails);
      sectionRewards.appendChild(sectionRewardsList);
      sectionRewards.appendChild(sectionRewardsFooter);
      sectionRewards.appendChild(sectionRewardsDetailsContainer);
      return sectionRewards;
    };

    this.inboxAreaLayout = function () {
      var _this = this,
          sectionInbox = document.createElement("div"),
          sectionInboxHeader = document.createElement("div"),
          sectionInboxHeaderLabel = document.createElement("div"),
          sectionInboxHeaderDate = document.createElement("div"),
          sectionInboxHeaderClose = document.createElement("div"),
          sectionInboxDetails = document.createElement("div"),
          sectionInboxDetailsInfo = document.createElement("div"),
          sectionInboxDetailsInfoIcon = document.createElement("div"),
          sectionInboxDetailsContentContainer = document.createElement("div"),
          sectionInboxDetailsContentContainerLabel = document.createElement("div"),
          sectionInboxDetailsContentContainerDate = document.createElement("div"),
          sectionInboxList = document.createElement("div"),
          sectionInboxListBody = document.createElement("div"),
          sectionInboxListBodyResults = document.createElement("div"),
          sectionInboxFooter = document.createElement("div"),
          sectionInboxFooterContent = document.createElement("div"),
          sectionInboxDetailsContainer = document.createElement("div"),
          sectionInboxDetailsHeader = document.createElement("div"),
          sectionInboxDetailsHeaderLabel = document.createElement("div"),
          sectionInboxDetailsHeaderDate = document.createElement("div"),
          sectionInboxDetailsBackBtn = document.createElement("a"),
          sectionInboxDetailsBodyContainer = document.createElement("div"),
          sectionInboxDetailsBody = document.createElement("div");

      sectionInbox.setAttribute("class", "cl-main-widget-section-inbox cl-main-section-item");
      sectionInboxHeader.setAttribute("class", "cl-main-widget-inbox-header");
      sectionInboxHeaderLabel.setAttribute("class", "cl-main-widget-inbox-header-label");
      sectionInboxHeaderDate.setAttribute("class", "cl-main-widget-inbox-header-date");
      sectionInboxHeaderClose.setAttribute("class", "cl-main-widget-inbox-header-close");
      sectionInboxDetails.setAttribute("class", "cl-main-widget-inbox-details");
      sectionInboxDetailsInfo.setAttribute("class", "cl-main-widget-inbox-details-info");
      sectionInboxDetailsInfoIcon.setAttribute("class", "cl-main-widget-inbox-details-info-icon");
      sectionInboxDetailsContentContainer.setAttribute("class", "cl-main-widget-inbox-details-content");
      sectionInboxDetailsContentContainerLabel.setAttribute("class", "cl-main-widget-inbox-details-content-label");
      sectionInboxDetailsContentContainerDate.setAttribute("class", "cl-main-widget-inbox-details-content-date"); // Leaderboard result container

      sectionInboxList.setAttribute("class", "cl-main-widget-inbox-list");
      sectionInboxListBody.setAttribute("class", "cl-main-widget-inbox-list-body");
      sectionInboxListBodyResults.setAttribute("class", "cl-main-widget-inbox-list-body-res"); // footer

      sectionInboxFooter.setAttribute("class", "cl-main-widget-inbox-footer");
      sectionInboxFooterContent.setAttribute("class", "cl-main-widget-inbox-footer-content"); // details section

      sectionInboxDetailsContainer.setAttribute("class", "cl-main-widget-inbox-details-container");
      sectionInboxDetailsHeader.setAttribute("class", "cl-main-widget-inbox-details-header");
      sectionInboxDetailsHeaderLabel.setAttribute("class", "cl-main-widget-inbox-details-header-label");
      sectionInboxDetailsHeaderDate.setAttribute("class", "cl-main-widget-inbox-details-header-date");
      sectionInboxDetailsBackBtn.setAttribute("class", "cl-main-widget-inbox-details-back-btn");
      sectionInboxDetailsBodyContainer.setAttribute("class", "cl-main-widget-inbox-details-body-container");
      sectionInboxDetailsBody.setAttribute("class", "cl-main-widget-inbox-details-body");
      sectionInboxHeaderLabel.innerHTML = _this.settings.lbWidget.settings.translation.messages.label;
      sectionInboxFooterContent.innerHTML = _this.settings.lbWidget.settings.translation.global.copy;
      sectionInboxHeader.appendChild(sectionInboxHeaderLabel);
      sectionInboxHeader.appendChild(sectionInboxHeaderDate);
      sectionInboxHeader.appendChild(sectionInboxHeaderClose);
      sectionInboxDetailsInfo.appendChild(sectionInboxDetailsInfoIcon);
      sectionInboxDetailsContentContainer.appendChild(sectionInboxDetailsContentContainerLabel);
      sectionInboxDetailsContentContainer.appendChild(sectionInboxDetailsContentContainerDate);
      sectionInboxDetails.appendChild(sectionInboxDetailsInfo);
      sectionInboxDetails.appendChild(sectionInboxDetailsContentContainer);
      sectionInboxListBody.appendChild(sectionInboxListBodyResults);
      sectionInboxList.appendChild(sectionInboxListBody);
      sectionInboxDetailsHeader.appendChild(sectionInboxDetailsHeaderLabel);
      sectionInboxDetailsHeader.appendChild(sectionInboxDetailsHeaderDate);
      sectionInboxDetailsContainer.appendChild(sectionInboxDetailsHeader);
      sectionInboxDetailsContainer.appendChild(sectionInboxDetailsBackBtn);
      sectionInboxDetailsBodyContainer.appendChild(sectionInboxDetailsBody);
      sectionInboxDetailsContainer.appendChild(sectionInboxDetailsBodyContainer);
      sectionInboxFooter.appendChild(sectionInboxFooterContent);
      sectionInbox.appendChild(sectionInboxHeader);
      sectionInbox.appendChild(sectionInboxDetails);
      sectionInbox.appendChild(sectionInboxList);
      sectionInbox.appendChild(sectionInboxFooter);
      sectionInbox.appendChild(sectionInboxDetailsContainer);
      return sectionInbox;
    };

    this.leaderboardHeader = function () {
      var _this = this,
          rankCol = document.createElement("div"),
          iconCol = document.createElement("div"),
          nameCol = document.createElement("div"),
          growthCol = document.createElement("div"),
          pointsCol = document.createElement("div");

      rankCol.setAttribute("class", "cl-rank-col cl-col");
      iconCol.setAttribute("class", "cl-icon-col cl-col");
      nameCol.setAttribute("class", "cl-name-col cl-col");
      growthCol.setAttribute("class", "cl-growth-col cl-col");
      pointsCol.setAttribute("class", "cl-points-col cl-col");
      rankCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.rank;
      iconCol.innerHTML = "";
      nameCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.name;
      growthCol.innerHTML = "";
      pointsCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.points;

      _this.settings.leaderboard.header.appendChild(rankCol);

      _this.settings.leaderboard.header.appendChild(iconCol);

      _this.settings.leaderboard.header.appendChild(nameCol);

      _this.settings.leaderboard.header.appendChild(growthCol);

      _this.settings.leaderboard.header.appendChild(pointsCol);

      var rewardCol = document.createElement("div"),
          rewardEnabled = typeof _this.settings.lbWidget.settings.competition.activeContest !== "undefined" && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== "undefined" && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0;
      rewardCol.setAttribute("class", "cl-reward-col cl-col" + (rewardEnabled ? " cl-col-reward-enabled" : ""));
      rewardCol.innerHTML = _this.settings.lbWidget.settings.translation.leaderboard.prize;
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.leaderboard.header, "cl-reward-enabled");

      _this.settings.leaderboard.header.appendChild(rewardCol);
    };

    this.leaderboardRow = function (rank, icon, name, change, growth, points, reward, count, memberFound) {
      var _this = this,
          cellWrapper = document.createElement("div"),
          rankCel = document.createElement("div"),
          rankCelValue = document.createElement("div"),
          iconCel = document.createElement("div"),
          iconCelImg = new Image(),
          nameCel = document.createElement("div"),
          growthCel = document.createElement("div"),
          pointsCel = document.createElement("div"),
          memberFoundClass = memberFound ? " cl-lb-member-row" : "";

      cellWrapper.setAttribute("class", "cl-lb-row cl-lb-rank-" + rank + " cl-lb-count-" + count + memberFoundClass);
      rankCel.setAttribute("class", "cl-rank-col cl-col cl-rank-" + rank);
      rankCelValue.setAttribute("class", "cl-rank-col-value");
      iconCel.setAttribute("class", "cl-icon-col cl-col");
      iconCelImg.setAttribute("class", "cl-icon-col-img");
      nameCel.setAttribute("class", "cl-name-col cl-col");
      growthCel.setAttribute("class", "cl-growth-col cl-col");
      pointsCel.setAttribute("class", "cl-points-col cl-col");
      cellWrapper.dataset.rank = rank;
      rankCelValue.innerHTML = rank;
      nameCel.innerHTML = name;
      growthCel.dataset.growth = change < 0 ? "down" : change > 0 ? "up" : "same";
      growthCel.dataset.change = change;
      growthCel.innerHTML = growth;
      pointsCel.innerHTML = points;

      if (icon.length > 0) {
        iconCelImg.src = icon;
        iconCelImg.alt = name;
      } else {
        iconCelImg.style.display = "none";
      }

      rankCel.appendChild(rankCelValue);
      cellWrapper.appendChild(rankCel);
      iconCel.appendChild(iconCelImg);
      cellWrapper.appendChild(iconCel);
      cellWrapper.appendChild(nameCel);
      cellWrapper.appendChild(growthCel);
      cellWrapper.appendChild(pointsCel);
      var rewardCel = document.createElement("div"),
          rewardEnabled = typeof _this.settings.lbWidget.settings.competition.activeContest !== "undefined" && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== "undefined" && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0;
      rewardCel.setAttribute("class", "cl-reward-col cl-col" + (rewardEnabled ? " cl-col-reward-enabled" : ""));
      rewardCel.innerHTML = typeof reward !== "undefined" && reward !== null ? reward : "";
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(cellWrapper, "cl-reward-enabled");
      cellWrapper.appendChild(rewardCel);
      return cellWrapper;
    };

    this.leaderboardRowUpdate = function (rank, icon, name, change, growth, points, reward, count, memberFound, onMissing) {
      var _this = this,
          cellRow = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.container, ".cl-lb-rank-" + rank + ".cl-lb-count-" + count);

      if (cellRow === null) {
        onMissing(rank, icon, name, change, growth, points, reward, count, memberFound);
      } else {
        var rankCel = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(cellRow, ".cl-rank-col-value"),
            iconCel = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(cellRow, ".cl-icon-col-img"),
            nameCel = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(cellRow, ".cl-name-col"),
            growthCel = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(cellRow, ".cl-growth-col"),
            pointsCel = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(cellRow, ".cl-points-col"),
            memberFoundClass = "cl-lb-member-row",
            rowHasClass = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(cellRow, memberFoundClass);

        if (count > 0 && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(cellRow, "cl-shared-rank")) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(cellRow, "cl-shared-rank");
        }

        if (memberFound && !rowHasClass) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(cellRow, memberFoundClass);
        } else if (!memberFound && rowHasClass) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(cellRow, memberFoundClass);
        }

        cellRow.dataset.rank = rank;
        rankCel.innerHTML = rank;
        nameCel.innerHTML = name;
        growthCel.dataset.growth = change < 0 ? "down" : change > 0 ? "up" : "same";
        growthCel.dataset.change = change;
        growthCel.innerHTML = growth;
        pointsCel.innerHTML = points;

        if (icon.length > 0) {
          iconCel.src = icon;
          iconCel.alt = name;
          iconCel.style.display = "block";
        } else {
          iconCel.style.display = "none";
        }

        if (typeof _this.settings.lbWidget.settings.competition.activeContest !== "undefined" && _this.settings.lbWidget.settings.competition.activeContest !== null && typeof _this.settings.lbWidget.settings.competition.activeContest.rewards !== "undefined" && _this.settings.lbWidget.settings.competition.activeContest.rewards.length > 0) {
          var rewardCel = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(cellRow, ".cl-reward-col");

          if (rewardCel !== null) {
            rewardCel.innerHTML = typeof reward !== "undefined" && reward !== null ? reward : "";
          }
        }
      }
    };

    this.populateLeaderboardResultsWithDefaultEntries = function () {
      var _this = this,
          topResults = [],
          remainingResults = [];

      for (var i = 0; i < _this.settings.leaderboard.topResultSize; i++) {
        var rank = i + 1;
        topResults.push({
          name: "--",
          rank: rank,
          points: "--",
          memberId: "",
          memberRefId: ""
        });
      }

      for (var s = _this.settings.leaderboard.topResultSize; s < _this.settings.leaderboard.defaultEmptyList; s++) {
        var rank = s + 1;
        remainingResults.push({
          name: "--",
          rank: rank,
          points: "--",
          memberId: "",
          memberRefId: ""
        });
      }

      _this.updateLeaderboardTopResults(topResults);

      _this.updateLeaderboardResults(remainingResults);
    };

    this.updateLeaderboardTopResults = function (topResults) {
      var _this = this,
          rankCheck = [],
          cleanupRankCheck = []; // cleanup


      mapObject(topResults, function (lb) {
        cleanupRankCheck.push(lb.rank);
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.topResults, ".cl-lb-rank-" + lb.rank + ".cl-shared-rank"), function (obj) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(obj);
        });
      });
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.topResults, ".cl-lb-row"), function (obj) {
        var rank = parseInt(obj.dataset.rank);

        if (cleanupRankCheck.indexOf(rank) === -1 && rank > _this.settings.leaderboard.defaultEmptyList) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(obj);
        }
      });
      mapObject(topResults, function (lb) {
        var count = 0,
            icon = _this.settings.lbWidget.populateIdenticonBase64Image(lb.memberId),
            memberFound = _this.settings.lbWidget.settings.memberId === lb.memberId || _this.settings.lbWidget.settings.memberId === lb.memberRefId,
            memberName = memberFound ? _this.settings.lbWidget.settings.translation.leaderboard.you : lb.name,
            reward = _this.getReward(lb.rank),
            change = typeof lb.change === "undefined" ? 0 : lb.change,
            growthType = change < 0 ? "down" : change > 0 ? "up" : "same",
            growthIcon = "<span class='cl-growth-icon cl-growth-" + growthType + "'></span>";

        if (rankCheck.indexOf(lb.rank) !== -1) {
          for (var rc = 0; rc < rankCheck.length; rc++) {
            if (lb.rank === rankCheck[rc]) {
              count++;
            }
          }
        }

        _this.leaderboardRowUpdate(lb.rank, icon, // icon
        memberName, change, growthIcon, // growth
        lb.points, reward, // reward
        count, memberFound, function (rank, icon, name, change, growth, points, reward, count, memberFound) {
          var newRow = _this.leaderboardRow(rank, icon, name, change, growth, points, reward, count, memberFound),
              prevCellRow = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.container, ".cl-lb-rank-" + rank + ".cl-lb-count-" + (count - 1));

          if (prevCellRow !== null && typeof prevCellRow.length === "undefined") {
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["appendNext"])(prevCellRow, newRow);
          } else _this.settings.leaderboard.topResults.appendChild(newRow);
        });

        rankCheck.push(lb.rank);
      });
    };

    this.getReward = function (rank) {
      var _this = this,
          rewardResponse = [];

      if (typeof _this.settings.lbWidget.settings.competition.activeContest !== "undefined" && _this.settings.lbWidget.settings.competition.activeContest !== null) {
        mapObject(_this.settings.lbWidget.settings.competition.activeContest.rewards, function (reward) {
          if (reward.rewardRank instanceof Array && reward.rewardRank.indexOf(rank) !== -1) {
            rewardResponse.push(reward.value);
          }
        });
      }

      return rewardResponse.join(", ");
    };

    this.updateLeaderboardResults = function (remainingResults) {
      var _this = this,
          rankCheck = [],
          cleanupRankCheck = []; // cleanup


      mapObject(remainingResults, function (lb) {
        cleanupRankCheck.push(lb.rank);
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.list, ".cl-lb-rank-" + lb.rank + ".cl-shared-rank"), function (obj) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(obj);
        });
      });
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.container, ".cl-lb-row"), function (obj) {
        var rank = parseInt(obj.dataset.rank);

        if (cleanupRankCheck.indexOf(rank) === -1 && rank > _this.settings.leaderboard.defaultEmptyList) {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(obj);
        }
      });
      mapObject(remainingResults, function (lb) {
        var count = 0,
            icon = _this.settings.lbWidget.populateIdenticonBase64Image(lb.memberId),
            memberFound = _this.settings.lbWidget.settings.memberId === lb.memberId || _this.settings.lbWidget.settings.memberId === lb.memberRefId,
            memberName = memberFound ? _this.settings.lbWidget.settings.translation.leaderboard.you : lb.name,
            reward = _this.getReward(lb.rank),
            change = typeof lb.change === "undefined" ? 0 : lb.change,
            growthType = change < 0 ? "down" : change > 0 ? "up" : "same",
            growthIcon = "<span class='cl-growth-icon cl-growth-" + growthType + "'></span>";

        if (rankCheck.indexOf(lb.rank) !== -1) {
          for (var rc = 0; rc < rankCheck.length; rc++) {
            if (lb.rank === rankCheck[rc]) {
              count++;
            }
          }
        }

        _this.leaderboardRowUpdate(lb.rank, icon, // icon
        memberName, change, growthIcon, // growth
        lb.points, reward, count, memberFound, function (rank, icon, name, change, growth, points, reward, count, memberFound) {
          var newRow = _this.leaderboardRow(rank, icon, name, name, growth, points, reward, count, memberFound),
              prevCellRow = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.container, ".cl-lb-rank-" + rank + ".cl-lb-count-" + (count - 1));

          if (prevCellRow !== null && typeof prevCellRow.length === "undefined") {
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["appendNext"])(prevCellRow, newRow);
          } else _this.settings.leaderboard.list.appendChild(newRow);
        });

        rankCheck.push(lb.rank);
      });
    };

    this.updateLeaderboard = function () {
      var _this = this,
          topResults = [],
          remainingResults = [];

      _this.populateLeaderboardResultsWithDefaultEntries();

      mapObject(_this.settings.lbWidget.settings.leaderboard.leaderboardData, function (lb) {
        if (lb.rank <= _this.settings.leaderboard.topResultSize) {
          topResults.push(lb);
        } else {
          remainingResults.push(lb);
        }
      });

      _this.updateLeaderboardTopResults(topResults);

      _this.updateLeaderboardResults(remainingResults);

      var member = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.list, ".cl-lb-member-row");

      if (member !== null) {
        _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));
      }
    };

    this.updateLeaderboardTime = function () {
      var _this = this,
          diff = moment__WEBPACK_IMPORTED_MODULE_2___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledStart).diff(moment__WEBPACK_IMPORTED_MODULE_2___default()()),
          date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_2___default.a.duration(diff));

      if (_this.settings.leaderboard.timerInterval) {
        clearTimeout(_this.settings.leaderboard.timerInterval);
      }

      if (diff < 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode === 0) {
        date = "";
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode > 0 && _this.settings.lbWidget.settings.competition.activeContest.statusCode < 3) {
        diff = moment__WEBPACK_IMPORTED_MODULE_2___default()(_this.settings.lbWidget.settings.competition.activeContest.scheduledEnd).diff(moment__WEBPACK_IMPORTED_MODULE_2___default()());
        date = _this.settings.lbWidget.formatDateTime(moment__WEBPACK_IMPORTED_MODULE_2___default.a.duration(diff));
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode === 3) {
        date = _this.settings.lbWidget.settings.translation.tournaments.finishing;
      } else if (_this.settings.lbWidget.settings.competition.activeContest.statusCode >= 4) {
        date = _this.settings.lbWidget.settings.translation.tournaments.finished;
      }

      _this.settings.headerDate.innerHTML = date;
      _this.settings.detailsContainerDate.innerHTML = date;
      _this.settings.leaderboard.timerInterval = setTimeout(function () {
        _this.updateLeaderboardTime();
      }, 1000);
    };

    this.leaderboardDetailsUpdate = function () {
      var _this = this,
          mainLabel = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-lb-details-content-label");

      mainLabel.innerHTML = _this.settings.lbWidget.settings.competition.activeContest !== null ? _this.settings.lbWidget.settings.competition.activeContest.label : "No available competition";
    };

    this.leaderboardOptInCheck = function () {
      var _this = this,
          optIn = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-lb-optin-action");

      if (typeof _this.settings.lbWidget.settings.competition.activeCompetition !== "undefined" && _this.settings.lbWidget.settings.competition.activeCompetition !== null && typeof _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired === "boolean" && _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired) {
        if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === "boolean" && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
          optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
          optIn.parentNode.style.display = "block";
        } else {
          optIn.parentNode.style.display = "none";
        }
      } else {
        optIn.parentNode.style.display = "none";
      }
    }; //cleanup/recover activity


    this.preLoaderRerun = function () {
      var _this = this;

      if (_this.settings.preLoader.preLoaderActive && _this.settings.preLoader.preloaderCallbackRecovery !== null && _this.settings.preLoader.preLoaderlastAttempt !== null && typeof _this.settings.preLoader.preLoaderlastAttempt === "number" && _this.settings.preLoader.preLoaderlastAttempt + 8000 < new Date().getTime()) {
        _this.settings.preLoader.preloaderCallbackRecovery();
      }
    };

    this.preloader = function () {
      var _this = this,
          preLoader = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-pre-loader"),
          content = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-pre-loader-content");

      return {
        show: function show(callback) {
          _this.settings.preLoader.preLoaderActive = true;
          _this.settings.preLoader.preLoaderlastAttempt = new Date().getTime();
          preLoader.style.display = "block";
          setTimeout(function () {
            preLoader.style.opacity = 1;
          }, 20);

          if (_this.settings.preLoader.preloaderCallbackRecovery === null && typeof callback === "function") {
            _this.settings.preLoader.preloaderCallbackRecovery = callback;
          }

          callback();
        },
        hide: function hide() {
          _this.settings.preLoader.preLoaderActive = false;
          _this.settings.preLoader.preLoaderlastAttempt = null;
          preLoader.style.opacity = 0;

          if (_this.settings.preLoader.preloaderCallbackRecovery !== null) {
            _this.settings.preLoader.preloaderCallbackRecovery = null;
          }

          setTimeout(function () {
            preLoader.style.display = "none";
          }, 200);
        }
      };
    };

    this.loadLeaderboard = function (callback) {
      var _this = this;

      if (_this.settings.container === null) {
        _this.settings.container = _this.settings.lbWidget.settings.bindContainer.appendChild(_this.layout());
        _this.settings.navigation = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-navigation-container");
        _this.settings.section = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-container");
        _this.settings.leaderboard.container = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-lb-leaderboard");
        _this.settings.leaderboard.header = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.container, ".cl-main-widget-lb-leaderboard-header-labels");
        _this.settings.leaderboard.list = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.container, ".cl-main-widget-lb-leaderboard-body-res");
        _this.settings.leaderboard.topResults = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.container, ".cl-main-widget-lb-leaderboard-header-top-res");
        _this.settings.detailsContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-lb-details-container");
        _this.settings.tournamentListContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-tournaments-list");
        _this.settings.detailsContainerDate = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-lb-details-header-date");
        _this.settings.headerDate = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-lb-header-date");
        _this.settings.achievement.container = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-ach");
        _this.settings.achievement.detailsContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-ach-details-container");
        _this.settings.reward.container = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-reward");
        _this.settings.reward.detailsContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-reward-details-container");
        _this.settings.messages.container = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-inbox");
        _this.settings.messages.detailsContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-inbox-details-container");

        _this.leaderboardHeader();

        _this.eventListeners();
      }

      _this.leaderboardOptInCheck();

      _this.leaderboardDetailsUpdate();

      _this.updateLeaderboard();

      if (_this.settings.lbWidget.settings.competition.activeContest !== null) {
        _this.updateLeaderboardTime();
      }

      if (typeof callback === "function") {
        callback();
      }
    };

    this.clearAll = function () {
      var _this = this;

      _this.settings.active = false;

      if (_this.settings.leaderboard.timerInterval) {
        clearTimeout(_this.settings.leaderboard.timerInterval);
      }

      _this.settings.preLoader.preLoaderActive = false;
    };

    this.hide = function (callback) {
      var _this = this;

      _this.clearAll();

      if (_this.settings.container !== null) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.container, "cl-show");
        setTimeout(function () {
          _this.settings.container.style.display = "none";

          _this.hideCompetitionDetails();

          _this.hideAchievementDetails();

          if (typeof callback === "function") {
            callback();
          }
        }, 30);
      } else if (typeof callback === "function") {
        callback();
      }
    };

    this.missingMember = function (isVisible) {
      var _this = this,
          area = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-lb-missing-member");

      if (!isVisible) {
        var member = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.list, ".cl-lb-member-row");

        if (area !== null && member !== null) {
          area.innerHTML = member.innerHTML;
          area.style.display = "block";
        } else {
          area.style.display = "none";
        }
      } else {
        area.style.display = "none";
      }
    };

    this.isElementVisibleInView = function (el, container) {
      var position = el.getBoundingClientRect();
      var elemContainer = container.getBoundingClientRect();
      var elemTop = position.top;
      var elemBottom = position.bottom;
      var elemHeight = position.height;
      return elemTop <= elemContainer.top ? elemContainer.top - elemTop <= elemHeight : elemBottom - elemContainer.bottom <= elemHeight;
    };

    this.eventListeners = function () {
      var _this = this;

      _this.settings.leaderboard.list.parentNode.onscroll = function (evt) {
        evt.preventDefault();
        var member = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.list, ".cl-lb-member-row");

        if (member !== null) {
          _this.missingMember(_this.isElementVisibleInView(member, evt.target));
        }
      };

      window.onresize = function (evt) {
        var member = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.list, ".cl-lb-member-row");

        if (member !== null) {
          _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));
        }
      };
    }; // this.checkLeaderboardScrollContainer = function(){
    // 	var _this = this,
    // 		lbScrollContainer = query(_this.settings.leaderboard.container, ".cl-main-widget-lb-leaderboard-body");
    //
    // 	if( scrollEnabled(lbScrollContainer) ){
    // 		addClass(lbScrollContainer, "cl-element-scrollable");
    // 	}else{
    // 		removeClass(lbScrollContainer, "cl-element-scrollable");
    // 	}
    // };


    this.competitionDetailsOptInButtonState = function () {
      var _this = this,
          optIn = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.detailsContainer, ".cl-main-widget-lb-details-optin-action");

      if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired === "boolean" && _this.settings.lbWidget.settings.competition.activeCompetition.optinRequired) {
        if (typeof _this.settings.lbWidget.settings.competition.activeCompetition.optin === "boolean" && !_this.settings.lbWidget.settings.competition.activeCompetition.optin) {
          optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.enter;
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(optIn, "cl-disabled");
        } else {
          optIn.innerHTML = _this.settings.lbWidget.settings.translation.tournaments.registered;
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(optIn, "cl-disabled");
        }

        optIn.parentNode.style.display = "block";
      } else {
        optIn.parentNode.style.display = "none";
      }
    };

    this.loadCompetitionDetails = function (callback) {
      var _this = this,
          label = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.detailsContainer, ".cl-main-widget-lb-details-header-label"),
          date = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.detailsContainer, ".cl-main-widget-lb-details-header-date"),
          body = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.detailsContainer, ".cl-main-widget-lb-details-body"),
          image = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.detailsContainer, ".cl-main-widget-lb-details-body-image-cont");

      image.innerHTML = "";
      label.innerHTML = _this.settings.lbWidget.settings.competition.activeContest.label.length > 0 ? _this.settings.lbWidget.settings.competition.activeContest.label : _this.settings.lbWidget.settings.competition.activeCompetition.label;
      body.innerHTML = _this.settings.lbWidget.settings.competition.activeContest.description.length > 0 ? _this.settings.lbWidget.settings.competition.activeContest.description : _this.settings.lbWidget.settings.competition.activeCompetition.description;

      _this.competitionDetailsOptInButtonState();

      _this.settings.detailsContainer.style.display = "block";
      _this.settings.headerDate.style.display = "none";

      if (_this.settings.lbWidget.settings.competition.extractImageHeader) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(body, "img"), function (img, key, count) {
          if (count === 0) {
            var newImg = img.cloneNode(true);
            image.appendChild(newImg);
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(img);
          }
        });
      }

      setTimeout(function () {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.detailsContainer, "cl-show");
        if (typeof callback === "function") callback();
      }, 50);
    };

    this.loadCompetitionList = function (callback, ajaxInstance) {
      var _this = this,
          listResContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.tournamentListContainer, ".cl-main-widget-tournaments-list-body-res"),
          preLoader = _this.preloader();

      preLoader.show(function () {
        _this.settings.lbWidget.checkForAvailableCompetitions(function () {
          var accordionObj = _this.accordionStyle(_this.settings.tournamentsSection.accordionLayout, function (accordionSection, listContainer, topEntryContainer, layout) {
            var tournamentData = _this.settings.lbWidget.settings.tournaments[layout.type];

            if (typeof tournamentData !== "undefined") {
              if (tournamentData.length === 0) {
                accordionSection.style.display = "none";
              }

              mapObject(tournamentData, function (tournament, key, count) {
                if (count + 1 <= layout.showTopResults && Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(topEntryContainer, ".cl-tournament-" + tournament.id) === null) {
                  var topEntryContaineRlistItem = _this.tournamentItem(tournament);

                  topEntryContainer.appendChild(topEntryContaineRlistItem);
                }

                if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(listContainer, ".cl-tournament-" + tournament.id) === null) {
                  var listItem = _this.tournamentItem(tournament);

                  listContainer.appendChild(listItem);
                }
              });
            }
          });

          listResContainer.innerHTML = "";
          listResContainer.appendChild(accordionObj);
          _this.settings.tournamentListContainer.style.display = "block";
          setTimeout(function () {
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.tournamentListContainer, "cl-show");
            if (typeof callback === "function") callback();
            preLoader.hide();
          }, 50);
        }, ajaxInstance);
      });
    };

    this.hideCompetitionList = function (callback) {
      var _this = this;

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.tournamentListContainer, "cl-show");
      setTimeout(function () {
        _this.settings.tournamentListContainer.style.display = "none";
        if (typeof callback === "function") callback();
      }, 200);
    };

    this.hideCompetitionDetails = function (callback) {
      var _this = this;

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.detailsContainer, "cl-show");
      setTimeout(function () {
        _this.settings.detailsContainer.style.display = "none";
        _this.settings.headerDate.style.display = "block";
        if (typeof callback === "function") callback();
      }, 200);
    };

    this.achievementItem = function (ach, achieved, perc) {
      var _this = this,
          listItem = document.createElement("div"),
          detailsContainer = document.createElement("div"),
          detailsWrapper = document.createElement("div"),
          label = document.createElement("div"),
          category = document.createElement("div"),
          description = document.createElement("div"),
          progressionWrapper = document.createElement("div"),
          progressionCont = document.createElement("div"),
          progressionBar = document.createElement("div"),
          moreButton = document.createElement("a"),
          cpomntainsImage = typeof ach.icon !== "undefined" && ach.icon.length > 0;

      listItem.setAttribute("class", "cl-ach-list-item cl-ach-" + ach.id + (cpomntainsImage ? " cl-ach-with-image" : ""));
      detailsContainer.setAttribute("class", "cl-ach-list-details-cont");
      detailsWrapper.setAttribute("class", "cl-ach-list-details-wrap");
      label.setAttribute("class", "cl-ach-list-details-label");
      category.setAttribute("class", "cl-ach-list-details-category");
      description.setAttribute("class", "cl-ach-list-details-description");
      progressionWrapper.setAttribute("class", "cl-ach-list-progression");
      progressionCont.setAttribute("class", "cl-ach-list-progression-cont");
      progressionBar.setAttribute("class", "cl-ach-list-progression-bar");
      moreButton.setAttribute("class", "cl-ach-list-more");
      moreButton.dataset.id = ach.id;
      moreButton.innerHTML = _this.settings.lbWidget.settings.translation.achievements.more;
      moreButton.href = "javascript:void(0);";
      listItem.dataset.id = ach.id;
      label.innerHTML = ach.name;
      category.innerHTML = ach.category.join(", ");
      detailsWrapper.appendChild(label);
      detailsWrapper.appendChild(category);
      detailsWrapper.appendChild(description);

      if (cpomntainsImage) {
        var image = new Image(),
            imageIconWrapper = document.createElement("div");
        imageIconWrapper.setAttribute("class", "cl-ach-list-item-img-wrapper");
        image.setAttribute("class", "cl-ach-list-item-img");
        image.src = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.assets.replace(":attachmentId", ach.icon);
        image.alt = ach.name; // image.onload = function(){
        //
        // };

        imageIconWrapper.appendChild(image);
        detailsContainer.appendChild(imageIconWrapper);
      }

      detailsContainer.appendChild(detailsWrapper);
      progressionCont.appendChild(progressionBar);
      progressionWrapper.appendChild(progressionCont);
      progressionWrapper.appendChild(moreButton);
      listItem.appendChild(detailsContainer);
      listItem.appendChild(progressionWrapper);
      return listItem;
    };

    this.achievementListLayout = function (achievementData) {
      var _this = this,
          achList = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-section-ach .cl-main-widget-ach-list-body-res");

      mapObject(achievementData, function (ach) {
        if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(achList, ".cl-ach-" + ach.id) === null) {
          var listItem = _this.achievementItem(ach);

          achList.appendChild(listItem);
        }
      });
    };

    this.loadAchievementDetails = function (data, callback) {
      var _this = this,
          label = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.achievement.detailsContainer, ".cl-main-widget-ach-details-header-label"),
          body = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.achievement.detailsContainer, ".cl-main-widget-ach-details-body"),
          image = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.achievement.detailsContainer, ".cl-main-widget-ach-details-body-image-cont");

      image.innerHTML = "";
      label.innerHTML = data.data.name;
      body.innerHTML = data.data.description;

      if (_this.settings.lbWidget.settings.achievements.extractImageHeader) {
        var imageLookup = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(body, "img");
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(imageLookup, function (img, key, count) {
          if (count === 0) {
            var newImg = img.cloneNode(true);
            image.appendChild(newImg);
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(img);
          }
        });
      }

      _this.settings.achievement.detailsContainer.style.display = "block";
      setTimeout(function () {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.achievement.detailsContainer, "cl-show");
        if (typeof callback === "function") callback();
      }, 50);
    };

    this.hideAchievementDetails = function (callback) {
      var _this = this;

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.achievement.detailsContainer, "cl-show");
      setTimeout(function () {
        _this.settings.achievement.detailsContainer.style.display = "none";
        if (typeof callback === "function") callback();
      }, 200);
    };

    this.loadRewardDetails = function (data, callback) {
      var _this = this,
          label = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.reward.detailsContainer, ".cl-main-widget-reward-details-header-label"),
          body = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.reward.detailsContainer, ".cl-main-widget-reward-details-body"),
          image = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.reward.detailsContainer, ".cl-main-widget-reward-details-body-image-cont"),
          claimBtn = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.reward.detailsContainer, ".cl-main-widget-reward-claim-btn"),
          icon = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.reward.detailsContainer, ".cl-main-widget-reward-winnings-icon"),
          value = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.reward.detailsContainer, ".cl-main-widget-reward-winnings-value");

      label.innerHTML = data.data.reward.rewardName;
      body.innerHTML = data.data.reward.description;
      value.innerHTML = data.data.reward.value;
      claimBtn.dataset.id = data.data.id;

      if (data.data.claimed) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(claimBtn, "cl-claimed");
        claimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claimed;
      } else {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(claimBtn, "cl-claimed");
        claimBtn.innerHTML = _this.settings.lbWidget.settings.translation.rewards.claim;
      }

      if (typeof data.data.reward.icon !== "undefined") {
        icon.innerHTML = "";
        var image = new Image(),
            imageIconWrapper = document.createElement("div");
        imageIconWrapper.setAttribute("class", "cl-reward-list-item-img-wrapper");
        image.setAttribute("class", "cl-reward-list-item-img");
        image.src = _this.settings.lbWidget.settings.uri.gatewayDomain + _this.settings.lbWidget.settings.uri.assets.replace(":attachmentId", data.data.reward.icon);
        image.alt = data.data.reward.value;
        icon.appendChild(image);
      } else {
        icon.innerHTML = "<span class='cl-place-holder-reward-image'></span>";
      }

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(body, "img"), function (img, key, count) {
        if (count === 0) {
          var newImg = img.cloneNode(true);
          image.innerHTML = "";
          image.appendChild(newImg);
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["remove"])(img);
        }
      });
      _this.settings.reward.detailsContainer.style.display = "block";
      setTimeout(function () {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.reward.detailsContainer, "cl-show");
        if (typeof callback === "function") callback();
      }, 50);
    };

    this.loadMessageDetails = function (data, callback) {
      var _this = this,
          label = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.messages.detailsContainer, ".cl-main-widget-inbox-details-header-label"),
          body = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.messages.detailsContainer, ".cl-main-widget-inbox-details-body");

      label.innerHTML = data.data.subject;
      body.innerHTML = data.data.body;
      _this.settings.messages.detailsContainer.style.display = "block";
      setTimeout(function () {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.messages.detailsContainer, "cl-show");
        if (typeof callback === "function") callback();
      }, 50);
    };

    this.hideRewardDetails = function (callback) {
      var _this = this;

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.reward.detailsContainer, "cl-show");
      setTimeout(function () {
        _this.settings.reward.detailsContainer.style.display = "none";
        if (typeof callback === "function") callback();
      }, 200);
    };

    this.hideMessageDetails = function (callback) {
      var _this = this;

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(_this.settings.messages.detailsContainer, "cl-show");
      setTimeout(function () {
        _this.settings.messages.detailsContainer.style.display = "none";
        if (typeof callback === "function") callback();
      }, 200);
    };

    this.updateAchievementProgressionAndIssued = function (issued, progression) {
      var _this = this,
          achList = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-section-ach .cl-main-widget-ach-list-body-res");

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(achList, ".cl-ach-list-item"), function (ach) {
        var id = ach.dataset.id,
            issuedStatus = issued.indexOf(id) !== -1;
        var perc = 0;
        mapObject(progression, function (pr) {
          if (pr.achievementId === id) {
            perc = (parseFloat(pr.goalPercentageComplete) * 100).toFixed(1);
          }
        });

        if (ach !== null) {
          var bar = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(ach, ".cl-ach-list-progression-bar");

          if (issuedStatus) {
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(bar, "cl-ach-complete");
            bar.innerHTML = _this.settings.lbWidget.settings.translation.achievements.complete;
            bar.style.width = "100%";
          } else {
            bar.style.width = (perc > 1 || perc === 0 ? perc : 1) + "%";
          }
        }
      });
    };

    this.loadAchievements = function (callback) {
      var _this = this;

      _this.settings.lbWidget.checkForAvailableAchievements(function (achievementData) {
        _this.achievementListLayout(achievementData);

        var idList = [];
        mapObject(_this.settings.lbWidget.settings.achievements.list, function (ach) {
          idList.push(ach.id);
        });
        setTimeout(function () {
          _this.settings.lbWidget.checkForMemberAchievementsIssued(function (issued) {
            _this.settings.lbWidget.checkForMemberAchievementsProgression(idList, function (progression) {
              _this.updateAchievementProgressionAndIssued(issued, progression);
            });
          });
        }, 400);

        if (typeof callback === "function") {
          callback();
        }
      });
    };

    this.rewardItem = function (rew) {
      var _this = this,
          listItem = document.createElement("div"),
          detailsContainer = document.createElement("div"),
          detailsWrapper = document.createElement("div"),
          label = document.createElement("div"),
          description = document.createElement("div");

      listItem.setAttribute("class", "cl-rew-list-item cl-rew-" + rew.id);
      detailsContainer.setAttribute("class", "cl-rew-list-details-cont");
      detailsWrapper.setAttribute("class", "cl-rew-list-details-wrap");
      label.setAttribute("class", "cl-rew-list-details-label");
      description.setAttribute("class", "cl-rew-list-details-description");
      listItem.dataset.id = rew.id;

      if (typeof rew.prize !== "undefined") {
        listItem.dataset.rewardId = rew.prize.id;
        label.innerHTML = rew.subject + " - " + rew.prize.reward.rewardName + " (" + rew.prize.reward.value + ")";
        description.innerHTML = typeof rew.prize.reward.description !== "undefined" && rew.prize.reward.description.length > 0 ? rew.prize.reward.description : rew.body;
      } else {
        label.innerHTML = rew.subject;
        description.innerHTML = rew.body;
      }

      detailsWrapper.appendChild(label);
      detailsWrapper.appendChild(description);
      detailsContainer.appendChild(detailsWrapper);
      listItem.appendChild(detailsContainer);
      return listItem;
    };

    this.messageItem = function (inbox) {
      var _this = this,
          listItem = document.createElement("div"),
          detailsContainer = document.createElement("div"),
          detailsWrapper = document.createElement("div"),
          label = document.createElement("div"),
          description = document.createElement("div"),
          content = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["stripHtml"])(inbox.body);

      listItem.setAttribute("class", "cl-inbox-list-item cl-inbox-" + inbox.id);
      detailsContainer.setAttribute("class", "cl-inbox-list-details-cont");
      detailsWrapper.setAttribute("class", "cl-inbox-list-details-wrap");
      label.setAttribute("class", "cl-inbox-list-details-label");
      description.setAttribute("class", "cl-inbox-list-details-description");
      listItem.dataset.id = inbox.id;
      label.innerHTML = inbox.subject.length > 36 ? inbox.subject.substr(0, 36) + "..." : inbox.subject;
      description.innerHTML = content.length > 60 ? content.substr(0, 60) + "..." : content;
      detailsWrapper.appendChild(label);
      detailsWrapper.appendChild(description);
      detailsContainer.appendChild(detailsWrapper);
      listItem.appendChild(detailsContainer);
      return listItem;
    };

    this.tournamentItem = function (tournament) {
      var _this = this,
          listItem = document.createElement("div"),
          detailsContainer = document.createElement("div"),
          detailsWrapper = document.createElement("div"),
          label = document.createElement("div"),
          description = document.createElement("div"),
          descriptionContent = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["stripHtml"])(tournament.description);

      listItem.setAttribute("class", "cl-tour-list-item cl-tour-" + tournament.id);
      detailsContainer.setAttribute("class", "cl-tour-list-details-cont");
      detailsWrapper.setAttribute("class", "cl-tour-list-details-wrap");
      label.setAttribute("class", "cl-tour-list-details-label");
      description.setAttribute("class", "cl-tour-list-details-description");
      listItem.dataset.id = tournament.id;
      label.innerHTML = tournament.label;
      description.innerHTML = descriptionContent.length > 100 ? descriptionContent.substr(0, 100) + "..." : descriptionContent;
      detailsWrapper.appendChild(label);
      detailsWrapper.appendChild(description);
      detailsContainer.appendChild(detailsWrapper);
      listItem.appendChild(detailsContainer);
      return listItem;
    };

    this.rewardsListLayout = function (rewards, availableRewards, expiredRewards) {
      var _this = this,
          rewardList = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-section-reward .cl-main-widget-reward-list-body-res");

      var accordionObj = _this.accordionStyle(_this.settings.rewardsSection.accordionLayout, function (accordionSection, listContainer, topEntryContainer, layout) {
        var rewardData = _this.settings.lbWidget.settings.rewards[layout.type];

        if (typeof rewardData !== "undefined") {
          if (rewardData.length === 0) {
            accordionSection.style.display = "none";
          }

          mapObject(rewardData, function (rew, key, count) {
            if (count + 1 <= layout.showTopResults && Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(topEntryContainer, ".cl-reward-" + rew.id) === null) {
              var topEntryContaineRlistItem = _this.rewardItem(rew);

              topEntryContainer.appendChild(topEntryContaineRlistItem);
            }

            if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(listContainer, ".cl-reward-" + rew.id) === null) {
              var listItem = _this.rewardItem(rew);

              listContainer.appendChild(listItem);
            }
          });
        }
      });

      rewardList.innerHTML = "";
      rewardList.appendChild(accordionObj); // mapObject(rewardData, function(rew){
      // 	if( query(rewardList, ".cl-reward-" + rew.id) === null ) {
      // 		var listItem = _this.rewardItem(rew);
      //
      // 		rewardList.appendChild(listItem);
      // 	}
      // });
    };

    this.messagesListLayout = function (rewards, availableRewards, expiredRewards) {
      var _this = this,
          messageList = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.section, ".cl-main-widget-section-inbox .cl-main-widget-inbox-list-body-res");

      messageList.innerHTML = "";
      mapObject(_this.settings.lbWidget.settings.messages.messages, function (inboxItem, key, count) {
        var listItem = _this.messageItem(inboxItem);

        messageList.appendChild(listItem);
      });
    };

    this.loadRewards = function (callback) {
      var _this = this;

      _this.settings.lbWidget.checkForAvailableRewards(function (rewards, availableRewards, expiredRewards) {
        _this.rewardsListLayout(rewards, availableRewards, expiredRewards);

        if (typeof callback === "function") {
          callback();
        }
      });
    };

    this.loadMessages = function (callback) {
      var _this = this;

      _this.settings.lbWidget.checkForAvailableMessages(function (rewards, availableRewards, expiredRewards) {
        _this.messagesListLayout(rewards, availableRewards, expiredRewards);

        if (typeof callback === "function") {
          callback();
        }
      });
    };

    var changeInterval;
    var changeContainerInterval;

    this.navigationSwitch = function (target, callback) {
      var _this = this,
          preLoader = _this.preloader();

      if (_this.settings.navigationSwitchInProgress && _this.settings.navigationSwitchLastAtempt + 3000 < new Date().getTime()) {
        _this.settings.navigationSwitchInProgress = false;
      }

      if (!_this.settings.navigationSwitchInProgress) {
        _this.settings.navigationSwitchInProgress = true;
        _this.settings.navigationSwitchLastAtempt = new Date().getTime();

        if (!Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(target.parentNode, "cl-active-nav")) {
          preLoader.show(function () {
            if (changeInterval) clearTimeout(changeInterval);
            if (changeContainerInterval) clearTimeout(changeContainerInterval);
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-navigation-items .cl-active-nav"), function (obj) {
              Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(obj, "cl-active-nav");
            });
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-container .cl-main-active-section"), function (obj) {
              Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(obj, "cl-main-active-section");
              setTimeout(function () {
                obj.style.display = "none";
              }, 150);
            });
            changeContainerInterval = setTimeout(function () {
              if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(target, "cl-main-widget-navigation-lb-icon")) {
                _this.loadLeaderboard(function () {
                  var lbContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-container .cl-main-widget-lb");
                  lbContainer.style.display = "block";
                  changeInterval = setTimeout(function () {
                    Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(lbContainer, "cl-main-active-section");
                  }, 30);

                  if (typeof callback === "function") {
                    callback();
                  }

                  preLoader.hide();
                  _this.settings.navigationSwitchInProgress = false;
                });
              } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(target, "cl-main-widget-navigation-ach-icon")) {
                _this.loadAchievements(function () {
                  var achContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-container .cl-main-widget-section-ach");
                  _this.settings.achievement.detailsContainer.style.display = "none";
                  achContainer.style.display = "block";
                  changeInterval = setTimeout(function () {
                    Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(achContainer, "cl-main-active-section");

                    if (typeof callback === "function") {
                      callback();
                    }
                  }, 30);
                  preLoader.hide();
                  _this.settings.navigationSwitchInProgress = false;
                });
              } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(target, "cl-main-widget-navigation-rewards-icon")) {
                _this.loadRewards(function () {
                  var rewardsContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-container .cl-main-widget-section-reward");
                  rewardsContainer.style.display = "block";
                  changeInterval = setTimeout(function () {
                    Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(rewardsContainer, "cl-main-active-section");
                  }, 30);

                  if (typeof callback === "function") {
                    callback();
                  }

                  preLoader.hide();
                  _this.settings.navigationSwitchInProgress = false;
                });
              } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(target, "cl-main-widget-navigation-inbox-icon")) {
                _this.loadMessages(function () {
                  var inboxContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-container .cl-main-widget-section-inbox");
                  inboxContainer.style.display = "block";
                  changeInterval = setTimeout(function () {
                    Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(inboxContainer, "cl-main-active-section");
                  }, 30);
                  preLoader.hide();
                  _this.settings.navigationSwitchInProgress = false;
                });
              }
            }, 250);
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(target.parentNode, "cl-active-nav");
          });
        } else if (typeof callback === "function") {
          _this.settings.navigationSwitchInProgress = false;
          callback();
        }
      }
    };

    this.resetNavigation = function (callback) {
      var _this = this,
          lbContainer = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-container .cl-main-widget-lb");

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-navigation-items .cl-active-nav"), function (obj) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(obj, "cl-active-nav");
      });
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-section-container .cl-main-active-section"), function (obj) {
        obj.style.display = "none";
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(obj, "cl-main-active-section");
      });
      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.container, ".cl-main-widget-navigation-items .cl-main-widget-navigation-lb"), "cl-active-nav");
      setTimeout(function () {
        lbContainer.style.display = "block";
        setTimeout(function () {
          Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(lbContainer, "cl-main-active-section");
          if (typeof callback !== "undefined") callback();
        }, 30);
      }, 40);
    };

    this.initLayout = function (callback) {
      var _this = this;

      _this.settings.active = true;

      _this.loadLeaderboard();

      _this.settings.container.style.display = "block";
      setTimeout(function () {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(_this.settings.container, "cl-show");
        var member = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.leaderboard.list, ".cl-lb-member-row");

        if (member !== null) {
          _this.missingMember(_this.isElementVisibleInView(member, _this.settings.leaderboard.list.parentNode));
        }

        _this.resetNavigation(callback);
      }, 30);
    };
  };
  /**
   * Main leaderboard widget, controls all actions and initiation logic.
   * Main responsibility is to control the interactions between different widgets/plugins and user even actions
   * @param options {Object} setting parameters used to overwrite the default settings
   * @constructor
   */


  var LbWidget = function LbWidget(options) {
    this.settings = {
      debug: true,
      bindContainer: document.body,
      autoStart: true,
      sseMessaging: null,
      notifications: null,
      miniScoreBoard: null,
      enableNotifications: true,
      mainWidget: null,
      globalAjax: new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax(),
      checkAjax: new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax(),
      language: "en",
      currency: "",
      spaceName: "",
      memberId: "",
      groups: "",
      gameId: "",
      enforceGameLookup: false,
      // tournament lookup will include/exclude game only requests
      apiKey: "",
      member: null,
      competition: {
        activeCompetitionId: null,
        activeContestId: null,
        activeCompetition: null,
        activeContest: null,
        refreshInterval: null,
        refreshIntervalMillis: 10000,
        extractImageHeader: true // will extract the first found image inside the body tag and move it on top

      },
      achievements: {
        list: [],
        availableRewards: [],
        rewards: [],
        expiredRewards: [],
        extractImageHeader: true // will extract the first found image inside the body tag and move it on top

      },
      rewards: {
        availableRewards: [],
        rewards: [],
        expiredRewards: []
      },
      messages: {
        enable: false,
        messages: []
      },
      tournaments: {
        activeCompetitionId: null,
        readyCompetitions: [],
        // statusCode 3
        activeCompetitions: [],
        // statusCode 5
        finishedCompetitions: [] // statusCode 7

      },
      leaderboard: {
        fullLeaderboardSize: 100,
        refreshIntervalMillis: 3000,
        refreshInterval: null,
        refreshLbDataInterval: null,
        leaderboardData: [],
        loadLeaderboardHistory: {}
      },
      uri: {
        gatewayDomain: _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].api.url,
        members: "/api/v1/:space/members/reference/:id",
        assets: "/assets/attachments/:attachmentId",
        memberSSE: "/api/v1/:space/sse/reference/:id",
        memberSSEHeartbeat: "/api/v1/:space/sse/reference/:id/heartbeat",
        competitions: "/api/v1/:space/competitions",
        competitionById: "/api/v1/:space/competitions/:id",
        contestLeaderboard: "/api/v1/:space/contests/:id/leaderboard",
        achievement: "/api/v1/:space/achievements/:id",
        achievements: "/api/v1/:space/achievements/members/reference/:id",
        // achievements: "/api/v1/:space/achievements",
        achievementsProgression: "/api/v1/:space/members/reference/:id/achievements",
        achievementsIssued: "/api/v1/:space/members/reference/:id/achievements/issued",
        messages: "/api/v1/:space/members/reference/:id/messages",
        messageById: "/api/v1/:space/members/reference/:id/messages/:messageId",
        memberReward: "/api/v1/:space/members/reference/:id/award/:awardId",
        memberRewardClaim: "/api/v1/:space/members/reference/:id/award/:awardId/award",
        memberCompetitions: "/api/v1/:space/members/reference/:id/competitions",
        memberCompetitionById: "/api/v1/:space/members/reference/:id/competition/:competitionId",
        memberCompetitionOptIn: "/api/v1/:space/members/reference/:id/competition/:competitionId/optin",
        memberCompetitionOptInCheck: "/api/v1/:space/members/reference/:id/competition/:competitionId/optin-check",
        translationPath: "" //../i18n/translation_:language.json

      },
      loadTranslations: true,
      translation: {
        time: {
          days: "d",
          hours: "h",
          minutesShortHand: "min",
          minutes: "m",
          seconds: "s"
        },
        achievements: {
          label: "Achievements",
          more: "More",
          complete: "complete 100%"
        },
        tournaments: {
          label: "Tournaments",
          enter: "Enter Tournament",
          readyCompetitions: "Upcoming Tournaments",
          activeCompetitions: "Active Tournaments",
          finishedCompetitions: "Finished Tournaments",
          finishing: "Finishing",
          finished: "Finished",
          registered: "Registered"
        },
        leaderboard: {
          rank: "Rank",
          name: "Name",
          points: "Points",
          prize: "Prize",
          you: "You"
        },
        miniLeaderboard: {
          highScore: "High Score",
          lastScore: "Last Score",
          rank: "Rank",
          startsIn: "Starting In",
          starting: "starting",
          finishing: "finishing",
          finished: "finished"
        },
        rewards: {
          label: "Rewards",
          claim: "Claim Now",
          claimed: "Claimed",
          availableRewards: "Available Rewards",
          rewards: "Claimed Rewards",
          expiredRewards: "Expired Rewards"
        },
        messages: {
          label: "Messages"
        },
        global: {
          copy: "Powered By CompetitionLabs"
        }
      },
      resources: [_modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].api.url + "/assets/widgets/leaderboard_v3/css/style.css?t=" + new Date().getTime(), _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].api.url + "/assets/widgets/leaderboard_v3/css/fonts.css?t=" + new Date().getTime()],
      layoutBuildCallback: function layoutBuildCallback(layout, instance) {}
    };

    if (typeof options !== "undefined") {
      this.settings = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["mergeObjects"])(this.settings, options);
    }

    this.log = function (message) {
      if (this.settings.debug) {
        console.error(message);
      }
    };
    /**
     * Format duration of Date Time from moment() object
     * @param duration {moment}
     * @returns {string}
     */


    this.formatDateTime = function (duration) {
      var _this = this,
          largeResult = [],
          result = [];

      if (duration.days()) largeResult.push(duration.days() + '<span class="time-ind">' + _this.settings.translation.time.days + '</span>');

      if (duration.hours() || duration.days() > 0) {
        result.push(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(duration.hours(), 2) + '<span class="time-ind">' + _this.settings.translation.time.hours + '</span>');
      } else result.push('00<span class="time-ind">' + _this.settings.translation.time.hours + '</span>');

      if (duration.minutes() || duration.hours() > 0 || duration.days() > 0) {
        result.push(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(duration.minutes(), 2) + (duration.days() > 0 ? '<span class="time-ind">' + _this.settings.translation.time.minutes + '</span>' : '<span class="time-ind">' + _this.settings.translation.time.minutesShortHand + '</span>'));
      } else result.push("00" + (duration.days() > 0 ? '<span class="time-ind">' + _this.settings.translation.time.minutes + '</span>' : '<span class="time-ind">' + _this.settings.translation.time.minutesShortHand + '</span>')); // if (duration.seconds() && duration.days() === 0){ result.push( formatNumberLeadingZeros(duration.seconds(), 2) + '<span class="time-ind">s</span>' ) }else if(duration.days() === 0){result.push( '00<span class="time-ind">s</span>' )};


      result.push(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(duration.seconds(), 2) + '<span class="time-ind">' + _this.settings.translation.time.seconds + '</span>');
      return largeResult.length > 0 ? largeResult.join(" ") + " " + result.join(":") : result.join(":");
    };

    this.populateIdenticonBase64Image = function (str) {
      if (str.length > 0) {
        var shaObj = new jssha__WEBPACK_IMPORTED_MODULE_4__["default"]("SHA-512", "TEXT");
        shaObj.update(str);
        var hash = shaObj.getHash("HEX", 1);
        var data = new identicon_js__WEBPACK_IMPORTED_MODULE_3___default.a(hash, {
          background: [255, 255, 255, 255],
          // rgba white
          margin: 0.1,
          // 20% margin
          size: 22,
          // 420px square
          format: 'svg' // use SVG instead of PNG

        }).toString();
        var icon = 'data:image/svg+xml;base64,' + data;
        return icon;
      } else {
        return "";
      }
    };
    /**
     * get a list of available competition filtered by provided global criteria
     * @param callback {Function}
     */


    var competitionCheckAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.checkForAvailableCompetitions = function (callback, ajaxInstance) {
      var _this = this,
          url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitions.replace(":space", _this.settings.spaceName) : _this.settings.uri.memberCompetitions.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId),
          filters = ["statusCode>==3", "statusCode<==5", "_sortByFields=options.scheduledDates.end:desc", "_lang=" + _this.settings.language],
          ajaxInstanceToUse = typeof ajaxInstance !== "undefined" && ajaxInstance !== null ? ajaxInstance : competitionCheckAjax;

      if (typeof _this.settings.currency === "string" && _this.settings.currency.length > 0) {
        filters.push("_uomKey" + _this.settings.currency);
      }

      if (_this.settings.gameId.length > 0 && _this.settings.enforceGameLookup) {
        filters.push("options.products.productRefId=" + _this.settings.gameId);
      }

      if (_this.settings.groups.length > 0 && _this.settings.memberId.length === 0) {
        filters.push("options.limitEntrantsTo=" + _this.settings.groups);
      }

      ajaxInstanceToUse.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url + "?" + filters.join("&"),
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response);
            _this.settings.tournaments.readyCompetitions = [];
            _this.settings.tournaments.activeCompetitions = [];
            mapObject(json.data, function (comp) {
              if (comp.statusCode === 3) {
                _this.settings.tournaments.readyCompetitions.push(comp);
              } else if (comp.statusCode === 5) {
                _this.settings.tournaments.activeCompetitions.push(comp);
              }
            });

            _this.checkForFinishedCompetitions(callback, ajaxInstance);
          } else {
            _this.log("failed to checkForActiveCompetitions " + response);
          }
        }
      });
    };
    /**
     * get a list of finished competition filtered by provided global criteria
     * @param callback {Function}
     */


    var competitionFinishedCheckAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.checkForFinishedCompetitions = function (callback, ajaxInstance) {
      var _this = this,
          url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitions.replace(":space", _this.settings.spaceName) : _this.settings.uri.memberCompetitions.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId),
          filters = ["statusCode=7", "_limit=10", "_sortByFields=options.scheduledDates.end:desc", "_lang=" + _this.settings.language],
          ajaxInstanceToUse = typeof ajaxInstance !== "undefined" && ajaxInstance !== null ? ajaxInstance : competitionFinishedCheckAjax;

      if (typeof _this.settings.currency === "string" && _this.settings.currency.length > 0) {
        filters.push("_uomKey" + _this.settings.currency);
      }

      if (_this.settings.gameId.length > 0 && _this.settings.enforceGameLookup) {
        filters.push("options.products.productRefId=" + _this.settings.gameId);
      }

      if (_this.settings.groups.length > 0 && _this.settings.memberId.length === 0) {
        filters.push("options.limitEntrantsTo=" + _this.settings.groups);
      }

      ajaxInstanceToUse.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url + "?" + filters.join("&"),
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response);
            _this.settings.tournaments.finishedCompetitions = [];
            mapObject(json.data, function (comp) {
              if (comp.statusCode === 7) {
                _this.settings.tournaments.finishedCompetitions.push(comp);
              }
            });

            if (typeof callback === "function") {
              callback();
            }
          } else {
            _this.log("failed to checkForActiveCompetitions " + response);
          }
        }
      });
    };

    this.prepareActiveCompetition = function (callback) {
      var _this = this,
          activeCompetition = null,
          activeCompetitionId = null;

      if (_this.settings.tournaments.activeCompetitionId !== null) {
        mapObject(_this.settings.tournaments.activeCompetitions, function (comp) {
          if (comp.id === _this.settings.tournaments.activeCompetitionId) {
            activeCompetition = comp;
          }
        });
        mapObject(_this.settings.tournaments.readyCompetitions, function (comp) {
          if (comp.id === _this.settings.tournaments.activeCompetitionId) {
            activeCompetition = comp;
          }
        });
        mapObject(_this.settings.tournaments.finishedCompetitions, function (comp) {
          if (comp.id === _this.settings.tournaments.activeCompetitionId) {
            activeCompetition = comp;
          }
        });

        if (activeCompetition !== null) {
          activeCompetitionId = _this.settings.tournaments.activeCompetitionId;
        } else {
          _this.settings.tournaments.activeCompetitionId = null;
        }
      }

      if (activeCompetition === null && _this.settings.tournaments.activeCompetitions.length > 0) {
        activeCompetition = _this.settings.tournaments.activeCompetitions[0];
        activeCompetitionId = activeCompetition.id;
      } else if (activeCompetition === null && _this.settings.tournaments.readyCompetitions.length > 0) {
        activeCompetition = _this.settings.tournaments.readyCompetitions[0];
        activeCompetitionId = activeCompetition.id;
      }

      if (activeCompetitionId === null) {
        // no active or ready competitions found
        _this.deactivateCompetitionsAndLeaderboards();
      } else {
        if (_this.settings.competition.activeCompetitionId !== activeCompetitionId && activeCompetitionId !== null) {
          _this.settings.competition.activeCompetition = activeCompetition;
          _this.settings.competition.activeCompetitionId = activeCompetitionId;
        }

        if (activeCompetitionId !== null) {
          _this.loadActiveCompetition(function (json) {
            _this.setActiveCompetition(json, callback);
          });
        } else if (typeof callback === "function") {
          callback();
        }
      }
    };

    this.loadActiveCompetition = function (callback) {
      var _this = this,
          url = _this.settings.memberId.length === 0 ? _this.settings.uri.competitionById.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.competition.activeCompetitionId) : _this.settings.uri.memberCompetitionById.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId).replace(":competitionId", _this.settings.competition.activeCompetitionId),
          filters = ["_include=strategy", "_lang=" + _this.settings.language];

      if (typeof _this.settings.currency === "string" && _this.settings.currency.length > 0) {
        filters.push("_uomKey" + _this.settings.currency);
      }

      _this.settings.globalAjax.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url + "?" + filters.join("&"),
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response);

            if (typeof callback === "function") {
              callback(json);
            }
          } else {
            _this.log("failed to loadActiveCompetition " + response);
          }
        }
      });
    };

    this.setActiveCompetition = function (json, callback) {
      var _this = this;

      _this.settings.competition.activeCompetition = json.data;
      _this.settings.competition.activeContest = null;
      _this.settings.competition.activeContestId = null;

      if (typeof json.data.contests !== "undefined" && json.data.contests.length > 0) {
        mapObject(json.data.contests, function (contest) {
          if (contest.statusCode < 7 && _this.settings.competition.activeContest === null) {
            _this.settings.competition.activeContest = contest;
            _this.settings.competition.activeContestId = contest.id;

            if (typeof _this.settings.competition.activeContest.rewards === "undefined") {
              _this.settings.competition.activeContest.rewards = [];
            }

            var rewards = [];
            mapObject(_this.settings.competition.activeContest.rewards, function (reward) {
              if (typeof reward.rewardRank === "string") {
                var rankParts = reward.rewardRank.split(","),
                    rewardRank = [];
                mapObject(rankParts, function (part) {
                  if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["stringContains"])(part, "-")) {
                    var rankRange = part.split("-"),
                        rageStart = parseInt(rankRange[0]),
                        rangeEnd = parseInt(rankRange[1]);

                    for (var i = rageStart; i <= rangeEnd; i++) {
                      rewardRank.push(i);
                    }
                  } else {
                    rewardRank.push(parseInt(part));
                  }
                });
                reward.rewardRank = rewardRank;
              }

              rewards.push(reward);
            });
            _this.settings.competition.activeContest.rewards = rewards;
          }
        });
      }

      if (typeof callback === "function") {
        callback();
      }
    };

    this.getLeaderboardData = function (count, callback) {
      if (this.settings.competition.activeContestId !== null) {
        var _this = this,
            url = _this.settings.uri.contestLeaderboard.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.competition.activeContestId),
            filters = ["_limit=" + count, "rankings=2"];

        if (typeof _this.settings.memberId === "string" && _this.settings.memberId.length > 0) {
          filters.push("memberId=" + _this.settings.memberId);
        }

        _this.settings.globalAjax.abort().getData({
          type: "GET",
          url: _this.settings.uri.gatewayDomain + url + "?" + filters.join("&"),
          headers: {
            "X-API-KEY": _this.settings.apiKey
          },
          success: function success(response, dataObj, xhr) {
            if (xhr.status === 200) {
              var json = JSON.parse(response); // if(
              // 	typeof _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] === "undefined"
              // 	||
              // 	(
              // 		typeof _this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] !== "undefined"
              // 		&&
              // 		_this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] !== data
              // 	)
              // ) {
              // 	_this.settings.loadLeaderboardHistory[_this.settings.competition.activeContestId] = {
              // 		changed: true,
              // 		data: JSON.stringify(json.data)
              // 	};
              // }

              _this.settings.leaderboard.leaderboardData = json.data;
              callback(json.data);
            } else {
              _this.log("failed to getLeaderboardData " + response);
            }
          }
        });
      } else {
        callback();
      }
    };

    var checkAchievementsAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.checkForAvailableAchievements = function (callback) {
      var _this = this,
          url = _this.settings.uri.achievements.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId),
          filters = ["_limit=100", "_include=rewards", "_lang=" + _this.settings.language],
          withGroups = false;

      if (typeof _this.settings.currency === "string" && _this.settings.currency.length > 0) {
        filters.push("_uomKey" + _this.settings.currency);
      }

      if (typeof _this.settings.member.groups !== "undefined" && _this.settings.member.groups.length > 0) {
        withGroups = true;
        filters.push("memberGroups=" + _this.settings.member.groups.join(","));
      }

      checkAchievementsAjax.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url + "?_lang=" + _this.settings.language + "&_uomKey" + _this.settings.currency,
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var jsonForAll = JSON.parse(response);
            _this.settings.achievements.list = [];
            mapObject(jsonForAll.data, function (ach) {
              _this.settings.achievements.list.push(ach);
            });

            if (withGroups) {
              checkAchievementsAjax.abort().getData({
                type: "GET",
                url: _this.settings.uri.gatewayDomain + url + "?" + filters.join("&"),
                headers: {
                  "X-API-KEY": _this.settings.apiKey
                },
                success: function success(response, dataObj, xhr) {
                  if (xhr.status === 200) {
                    var json = JSON.parse(response);
                    mapObject(json.data, function (ach) {
                      _this.settings.achievements.list.push(ach);
                    });
                    if (typeof callback === "function") callback(_this.settings.achievements.list);
                  } else {
                    _this.log("failed to checkForAvailableAchievements " + response);
                  }
                }
              });
            } else {
              if (typeof callback === "function") callback(jsonForAll.data);
            }
          } else {
            _this.log("failed to checkForAvailableAchievements " + response);
          }
        }
      });
    };

    var getAchievementsAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.getAchievement = function (achievementId, callback) {
      var _this = this;

      getAchievementsAjax.abort().getData({
        url: _this.settings.uri.gatewayDomain + _this.settings.uri.achievement.replace(":space", _this.settings.spaceName).replace(":id", achievementId) + "?_lang=" + _this.settings.language + "&_uomKey" + _this.settings.currency,
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        type: "GET",
        success: function success(response, dataObj, xhr) {
          var json = null;

          if (xhr.status === 200) {
            try {
              json = JSON.parse(response);
            } catch (e) {}
          }

          if (typeof callback === "function") {
            callback(json);
          }
        },
        error: function error() {
          if (typeof callback === "function") {
            callback(null);
          }
        }
      });
    };

    var getRewardAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.getReward = function (rewardId, callback) {
      var _this = this;

      getRewardAjax.abort().getData({
        url: _this.settings.uri.gatewayDomain + _this.settings.uri.memberReward.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId).replace(":awardId", rewardId),
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        type: "GET",
        success: function success(response, dataObj, xhr) {
          var json = null;

          if (xhr.status === 200) {
            try {
              json = JSON.parse(response);
            } catch (e) {}
          }

          if (typeof callback === "function") {
            callback(json);
          }
        },
        error: function error() {
          if (typeof callback === "function") {
            callback(null);
          }
        }
      });
    };

    var getMessageAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.getMessage = function (messageId, callback) {
      var _this = this;

      getMessageAjax.abort().getData({
        url: _this.settings.uri.gatewayDomain + _this.settings.uri.messageById.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId).replace(":messageId", messageId),
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        type: "GET",
        success: function success(response, dataObj, xhr) {
          var json = null;

          if (xhr.status === 200) {
            try {
              json = JSON.parse(response);
            } catch (e) {}
          }

          if (typeof callback === "function") {
            callback(json);
          }
        },
        error: function error() {
          if (typeof callback === "function") {
            callback(null);
          }
        }
      });
    };

    var claimRewardAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.claimReward = function (rewardId, callback) {
      var _this = this;

      claimRewardAjax.abort().getData({
        url: _this.settings.uri.gatewayDomain + _this.settings.uri.memberRewardClaim.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId).replace(":awardId", rewardId),
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        type: "POST",
        success: function success(response, dataObj, xhr) {
          var json = null;

          if (xhr.status === 200) {
            try {
              json = JSON.parse(response);
            } catch (e) {}
          }

          if (typeof callback === "function") {
            callback(json);
          }
        },
        error: function error() {
          if (typeof callback === "function") {
            callback(null);
          }
        }
      });
    };

    var checkForMemberAchievementsAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.checkForMemberAchievementsIssued = function (callback) {
      var _this = this,
          url = _this.settings.uri.achievementsIssued.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId);

      checkForMemberAchievementsAjax.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url,
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response),
                idList = [];

            if (typeof json.aggregations !== "undefined" && json.aggregations.length > 0) {
              mapObject(json.aggregations[0].items, function (item) {
                idList.push(item.value);
              });
            }

            if (typeof callback === "function") callback(idList);
          } else {
            _this.log("failed to checkForMemberAchievementsIssued " + response);
          }
        }
      });
    };

    var checkForMemberAchievementsProgressionAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.checkForMemberAchievementsProgression = function (idList, callback) {
      var _this = this,
          url = _this.settings.uri.achievementsProgression.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId);

      checkForMemberAchievementsProgressionAjax.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url + (idList.length > 0 ? "?id=" + idList.join(",") : ""),
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response);
            if (typeof callback === "function") callback(json.data);
          } else {
            _this.log("failed to checkForMemberAchievementsProgression " + response);
          }
        }
      });
    };

    var checkForAvailableRewardsAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.checkForAvailableRewards = function (callback) {
      var _this = this,
          url = _this.settings.uri.messages.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId); // claimed rewards


      checkForAvailableRewardsAjax.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url + "?_sortByFields=created:desc&messageType=Reward&prize.claimed=true&_hasValuesFor=prize&_limit=100",
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var jsonForAll = JSON.parse(response);
            _this.settings.rewards.rewards = [];
            _this.settings.rewards.availableRewards = [];
            _this.settings.rewards.expiredRewards = [];
            mapObject(jsonForAll.data, function (message) {
              var expired = typeof message.expiry === "undefined" ? false : moment__WEBPACK_IMPORTED_MODULE_2___default()(message.expiry).diff(moment__WEBPACK_IMPORTED_MODULE_2___default()()) < 0 ? true : false;

              if (!expired) {
                _this.settings.rewards.rewards.push(message);
              }
            }); // not-claimed rewards

            checkForAvailableRewardsAjax.abort().getData({
              type: "GET",
              url: _this.settings.uri.gatewayDomain + url + "?_sortByFields=created:desc&messageType=Reward&prize.claimed=false&_hasValuesFor=prize&_limit=100",
              headers: {
                "X-API-KEY": _this.settings.apiKey
              },
              success: function success(response, dataObj, xhr) {
                if (xhr.status === 200) {
                  var jsonForAll = JSON.parse(response);
                  mapObject(jsonForAll.data, function (message) {
                    var expired = typeof message.expiry === "undefined" ? false : moment__WEBPACK_IMPORTED_MODULE_2___default()(message.expiry).diff(moment__WEBPACK_IMPORTED_MODULE_2___default()()) < 0 ? true : false;

                    if (!expired) {
                      _this.settings.rewards.availableRewards.push(message);
                    }
                  }); // expired rewards

                  var date = new Date(),
                      utcDate = date.getUTCFullYear() + "-" + Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(date.getUTCMonth() + 1, 2) + "-" + Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(date.getUTCDate(), 2) + "T" + Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(date.getUTCHours(), 2) + ":" + Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(date.getUTCMinutes(), 2) + ":00";

                  _this.settings.globalAjax.abort().getData({
                    type: "GET",
                    url: _this.settings.uri.gatewayDomain + url + "?_sortByFields=created:desc&_limit=100&messageType=Reward&_hasValuesFor=expiry&expiry<==" + utcDate,
                    headers: {
                      "X-API-KEY": _this.settings.apiKey
                    },
                    success: function success(response, dataObj, xhr) {
                      if (xhr.status === 200) {
                        var jsonForAll = JSON.parse(response);
                        mapObject(jsonForAll.data, function (message) {
                          _this.settings.rewards.expiredRewards.push(message);
                        });
                        if (typeof callback === "function") callback(_this.settings.rewards.rewards, _this.settings.rewards.availableRewards, _this.settings.rewards.expiredRewards);
                      } else {
                        _this.log("failed to checkForAvailableRewards expired " + response);
                      }
                    }
                  });
                } else {
                  _this.log("failed to checkForAvailableRewards not-claimed " + response);
                }
              }
            });
          } else {
            _this.log("failed to checkForAvailableRewards claimed " + response);
          }
        }
      });
    };

    var checkForAvailableMessagesAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.checkForAvailableMessages = function (callback) {
      var _this = this,
          url = _this.settings.uri.messages.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId),
          date = new Date();

      date.setDate(date.getMonth() - 1);
      var createdDateFilter = date.getFullYear() + "-" + Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(date.getMonth() + 1, 2) + "-" + Object(_utils__WEBPACK_IMPORTED_MODULE_7__["formatNumberLeadingZeros"])(date.getDate(), 2);
      checkForAvailableMessagesAjax.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url + "?_sortByFields=created:desc&_hasNoValuesFor=prize&_limit=100&created>==" + createdDateFilter,
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var jsonForAll = JSON.parse(response);
            _this.settings.messages.messages = [];
            mapObject(jsonForAll.data, function (message) {
              _this.settings.messages.messages.push(message);
            });
            if (typeof callback === "function") callback(_this.settings.messages.messages);
          } else {
            _this.log("failed to checkForAvailableMessages " + response);
          }
        }
      });
    };

    var optInMemberAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.optInMemberToActiveCompetition = function (callback) {
      var _this = this,
          url = _this.settings.uri.memberCompetitionOptIn.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId).replace(":competitionId", _this.settings.competition.activeCompetitionId);

      optInMemberAjax.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + url,
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            callback();
          } else {
            _this.log("failed to optInMemberToActiveCompetition " + response);
          }
        }
      });
    };

    var revalidationCount = 0;

    this.revalidateIfSuccessfullOptIn = function (callback) {
      var _this = this;

      _this.loadActiveCompetition(function (competitionJson) {
        if (typeof competitionJson.data.optin === "boolean" && !competitionJson.data.optin) {
          revalidationCount++;

          if (revalidationCount < 5) {
            setTimeout(function () {
              _this.revalidateIfSuccessfullOptIn(callback);
            }, 100);
          } else {
            revalidationCount = 0;
          }
        } else if (typeof competitionJson.data.optin === "boolean" && competitionJson.data.optin) {
          callback(competitionJson);
        }
      });
    };

    this.leaderboardDataRefresh = function () {
      var _this = this;

      if (_this.settings.leaderboard.refreshLbDataInterval) {
        clearTimeout(_this.settings.leaderboard.refreshLbDataInterval);
      }

      if (_this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optinRequired === "boolean" && !_this.settings.competition.activeCompetition.optinRequired || typeof _this.settings.competition.activeCompetition.optin === "boolean" && _this.settings.competition.activeCompetition.optin) {
        var count = _this.settings.miniScoreBoard.settings.active ? 0 : _this.settings.leaderboard.fullLeaderboardSize;

        _this.getLeaderboardData(count, function (data) {
          if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();
          if (_this.settings.mainWidget.settings.active) _this.settings.mainWidget.loadLeaderboard();
        });
      }

      _this.settings.leaderboard.refreshLbDataInterval = setTimeout(function () {
        _this.leaderboardDataRefresh();
      }, _this.settings.leaderboard.refreshIntervalMillis);
    };

    this.activeCompetitionDataRefresh = function (callback) {
      var _this = this;

      if (_this.settings.competition.refreshInterval) {
        clearTimeout(_this.settings.competition.refreshInterval);
      }

      _this.checkForAvailableCompetitions(function () {
        _this.prepareActiveCompetition(function () {
          var count = _this.settings.miniScoreBoard.settings.active ? 0 : _this.settings.leaderboard.fullLeaderboardSize; // clear to not clash with LB refresh that could happen at same time

          if (_this.settings.leaderboard.refreshInterval) {
            clearTimeout(_this.settings.leaderboard.refreshInterval);
          }

          if (_this.settings.miniScoreBoard.settings.active || _this.settings.mainWidget.settings.active) {
            if (_this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optinRequired === "boolean" && !_this.settings.competition.activeCompetition.optinRequired || _this.settings.competition.activeCompetition !== null && typeof _this.settings.competition.activeCompetition.optin === "boolean" && _this.settings.competition.activeCompetition.optin) {
              _this.getLeaderboardData(count, function (data) {
                if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();
                if (_this.settings.mainWidget.settings.active) _this.settings.mainWidget.loadLeaderboard(); // re-start leaderboard refresh

                _this.leaderboardDataRefresh();

                if (typeof callback === "function") {
                  callback();
                }
              });
            } else {
              if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();

              if (_this.settings.mainWidget.settings.active) {
                _this.getLeaderboardData(count, function (data) {
                  _this.settings.mainWidget.loadLeaderboard();
                });
              } // restart leaderboard refresh


              _this.leaderboardDataRefresh();

              if (typeof callback === "function") {
                callback();
              }
            }
          } else {
            if (_this.settings.miniScoreBoard.settings.active) _this.settings.miniScoreBoard.loadScoreBoard();

            if (typeof callback === "function") {
              callback();
            }
          }
        });
      });

      _this.settings.competition.refreshInterval = setTimeout(function () {
        _this.activeCompetitionDataRefresh();
      }, _this.settings.competition.refreshIntervalMillis);
    };

    this.deactivateCompetitionsAndLeaderboards = function (callback) {
      var _this = this;

      if (_this.settings.leaderboard.refreshInterval) {
        clearTimeout(_this.settings.leaderboard.refreshInterval);
      }

      _this.settings.miniScoreBoard.clearAll();

      _this.settings.mainWidget.clearAll();

      if (typeof callback === "function") {
        callback();
      }
    };

    this.stopActivity = function (callback) {
      var _this = this;

      if (_this.settings.leaderboard.refreshInterval) {
        clearTimeout(_this.settings.leaderboard.refreshInterval);
        clearInterval(_this.settings.leaderboard.refreshInterval);
      }

      if (_this.settings.leaderboard.refreshLbDataInterval) {
        clearTimeout(_this.settings.leaderboard.refreshLbDataInterval);
        clearInterval(_this.settings.leaderboard.refreshLbDataInterval);
      }

      if (_this.settings.miniScoreBoard.settings.updateInterval) {
        clearTimeout(_this.settings.miniScoreBoard.settings.updateInterval);
        clearInterval(_this.settings.leaderboard.refreshInterval);
      }

      if (typeof callback === "function") {
        callback();
      }
    };

    this.restartActivity = function (callback) {
      var _this = this;

      _this.activeCompetitionDataRefresh();

      _this.settings.miniScoreBoard.updateScoreBoard();

      if (typeof callback === "function") {
        callback();
      }
    };

    this.loadMember = function (callback) {
      var _this = this;

      _this.settings.globalAjax.abort().getData({
        type: "GET",
        url: _this.settings.uri.gatewayDomain + _this.settings.uri.members.replace(":space", _this.settings.spaceName).replace(":id", _this.settings.memberId),
        headers: {
          "X-API-KEY": _this.settings.apiKey
        },
        success: function success(response, dataObj, xhr) {
          if (xhr.status === 200) {
            var json = JSON.parse(response);
            _this.settings.member = json.data;
            callback(json.data);
          } else {
            _this.log("failed to loadMember " + response);
          }
        }
      });
    };

    this.loadWidgetTranslations = function (callback) {
      var _this = this;

      if (typeof _this.settings.uri.translationPath === "string" && _this.settings.uri.translationPath.length > 0 && _this.settings.loadTranslations) {
        _this.settings.globalAjax.abort().getData({
          type: "GET",
          url: _this.settings.uri.gatewayDomain + _this.settings.uri.translationPath.replace(":language", _this.settings.language),
          headers: {
            "X-API-KEY": _this.settings.apiKey
          },
          success: function success(response, dataObj, xhr) {
            if (xhr.status === 200) {
              var json = JSON.parse(response);
              _this.settings.translation = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["mergeObjects"])(_this.settings.translation, json);
              callback();
            } else {
              _this.log("no translation foound " + response);

              callback();
            }
          }
        });
      } else {
        callback();
      }
    };

    this.startup = function () {
      var _this = this;

      _this.settings.miniScoreBoard.initLayout(function () {
        _this.settings.miniScoreBoard.settings.active = true;

        _this.activeCompetitionDataRefresh();

        if (_this.settings.enableNotifications) {
          _this.settings.notifications.init();
        }

        _this.cleanup();
      });
    };

    var _cleanupInstance;

    this.cleanup = function () {
      var _this = this;

      if (_cleanupInstance) {
        clearTimeout(_cleanupInstance);
      }

      _cleanupInstance = setTimeout(function () {
        _this.settings.mainWidget.preLoaderRerun();

        _this.cleanup();
      }, 3000);
    };

    this.loadStylesheet = function (callback) {
      var _this = this,
          createdResources = false,
          availableLinks = [];

      Object(_utils__WEBPACK_IMPORTED_MODULE_7__["objectIterator"])(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])("link"), function (link) {
        if (link !== null) {
          availableLinks.push(link.href);
        }
      });
      mapObject(_this.settings.resources, function (resource, key, count) {
        var exists = false;
        mapObject(availableLinks, function (link) {
          if (link === resource) {
            exists = true;
          }
        });

        if (!exists) {
          var link = document.createElement("link");
          link.setAttribute("rel", "stylesheet");
          link.setAttribute("type", "text/css");
          link.setAttribute("href", resource);

          if (count === 0) {
            link.onload = function () {
              if (typeof callback === "function") {
                callback();
              }
            };

            link.onerror = function (e) {
              if (typeof callback === "function") {
                callback();
              }
            };
          }

          document.body.appendChild(link);
          createdResources = true;
        }
      });

      if (!createdResources && typeof callback === "function") {
        callback();
      }
    };

    this.clickedMiniScoreBoard = function () {
      var _this = this;

      if (!_this.settings.miniScoreBoard.settings.dragging) {
        _this.deactivateCompetitionsAndLeaderboards(function () {
          _this.settings.leaderboard.leaderboardData = [];

          _this.settings.mainWidget.initLayout(function () {
            _this.activeCompetitionDataRefresh();
          });

          setTimeout(function () {
            _this.settings.miniScoreBoard.settings.container.style.display = "none";
          }, 200);
        });
      }
    };
    /**
     * Open main widget and open specific tab and loads relevant action
     * @param tab String
     * @param actionCallback Function
     */


    this.openWithTabAndAction = function (tab, actionCallback) {
      var _this = this;

      if (_this.settings.mainWidget.settings.active) {
        var loadTab = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.mainWidget.settings.container, tab);

        _this.settings.mainWidget.navigationSwitch(loadTab, function () {
          _this.activeCompetitionDataRefresh();

          if (typeof actionCallback === "function") {
            actionCallback();
          }
        });

        setTimeout(function () {
          _this.settings.miniScoreBoard.settings.container.style.display = "none";
        }, 200);
      } else {
        _this.deactivateCompetitionsAndLeaderboards(function () {
          _this.settings.mainWidget.initLayout(function () {
            _this.settings.mainWidget.navigationSwitch(Object(_utils__WEBPACK_IMPORTED_MODULE_7__["query"])(_this.settings.mainWidget.settings.container, tab), function () {
              _this.activeCompetitionDataRefresh();

              if (typeof actionCallback === "function") {
                actionCallback();
              }
            });
          });

          setTimeout(function () {
            _this.settings.miniScoreBoard.settings.container.style.display = "none";
          }, 200);
        });
      }
    };

    var loadCompetitionListAjax = new _modules_cLabs__WEBPACK_IMPORTED_MODULE_5__["default"].Ajax();

    this.eventHandlers = function (el) {
      var _this = this; // mini scoreboard opt-in action


      if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-widget-ms-optin-action") && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "checking")) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(el, "checking");

        _this.optInMemberToActiveCompetition(function () {
          _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
            _this.settings.competition.activeCompetition = competitionJson.data; // _this.getLeaderboardData(1, function( data ){
            // 	_this.settings.miniScoreBoard.loadScoreBoard( data );
            // });
            // extra action to load competition details on mini scoreboard opt-in - Product request

            _this.deactivateCompetitionsAndLeaderboards(function () {
              _this.settings.leaderboard.leaderboardData = [];

              _this.settings.mainWidget.initLayout(function () {
                _this.activeCompetitionDataRefresh();

                _this.settings.mainWidget.loadCompetitionDetails(function () {});
              });

              setTimeout(function () {
                _this.settings.miniScoreBoard.settings.container.style.display = "none";
              }, 200);
            });

            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(el, "checking");
          });
        }); // Leaderboard details opt-in action

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-lb-details-optin-action") && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "checking")) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(el, "checking");

        _this.optInMemberToActiveCompetition(function () {
          _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
            _this.settings.competition.activeCompetition = competitionJson.data;

            _this.settings.mainWidget.competitionDetailsOptInButtonState();

            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(el, "checking");
          });
        }); // Leaderboard details opt-in action

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-lb-optin-action") && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "checking")) {
        Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(el, "checking");

        _this.optInMemberToActiveCompetition(function () {
          _this.revalidateIfSuccessfullOptIn(function (competitionJson) {
            _this.settings.competition.activeCompetition = competitionJson.data;

            _this.settings.mainWidget.loadCompetitionDetails(function () {});

            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(el, "checking");
            el.parentNode.style.display = "none";
          });
        }); // close mini scoreboard info area

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-widget-ms-information-close") && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "checking")) {
        _this.settings.miniScoreBoard.clearAll(); // close notification window

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-widget-notif-information-close") && !Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "checking")) {
        _this.settings.notifications.hideNotification(); // close leaderboard window

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-lb-header-close") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-ach-header-close") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-reward-header-close") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-inbox-header-close")) {
        _this.settings.mainWidget.hide(function () {
          _this.settings.miniScoreBoard.settings.active = true;
          _this.settings.miniScoreBoard.settings.container.style.display = "block";

          _this.activeCompetitionDataRefresh();
        }); // load competition details

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-lb-details-content-label")) {
        if (_this.settings.competition.activeContest !== null) {
          _this.settings.mainWidget.loadCompetitionDetails(function () {});
        } // load achievement details

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-ach-list-more")) {
        _this.getAchievement(el.dataset.id, function (data) {
          _this.settings.mainWidget.loadAchievementDetails(data, function () {});
        }); // leaderboard details back button

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-lb-details-back-btn")) {
        _this.settings.mainWidget.hideCompetitionDetails(); // achievements details back button

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-ach-details-back-btn")) {
        _this.settings.mainWidget.hideAchievementDetails(function () {}); // rewards details back button

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-reward-details-back-btn")) {
        _this.settings.mainWidget.hideRewardDetails(function () {}); // messages details back button

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-inbox-details-back-btn")) {
        _this.settings.mainWidget.hideMessageDetails(function () {}); // load rewards details

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-rew-list-item") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-rew-list-item") !== null) {
        var rewardId = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-rew-list-item") ? el.dataset.rewardId : Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-rew-list-item").dataset.rewardId;

        _this.getReward(rewardId, function (data) {
          _this.settings.mainWidget.loadRewardDetails(data, function () {});
        }); // load inbox details

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-inbox-list-item") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-inbox-list-item") !== null) {
        var messageId = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-inbox-list-item") ? el.dataset.rewardId : Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-inbox-list-item").dataset.id;

        _this.getMessage(messageId, function (data) {
          _this.settings.mainWidget.loadMessageDetails(data, function () {});
        }); // claim reward

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-reward-claim-btn")) {
        _this.claimReward(el.dataset.id, function (data) {
          if (data.data.claimed) {
            _this.settings.mainWidget.loadRewards();

            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["addClass"])(el, "cl-claimed");
            el.innerHTML = _this.settings.translation.rewards.claimed;
          } else {
            Object(_utils__WEBPACK_IMPORTED_MODULE_7__["removeClass"])(el, "cl-claimed");
            el.innerHTML = _this.settings.translation.rewards.claim;
          }
        }); // load achievement details window from notification window

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-widget-notif-information-details-wrapper") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-widget-notif-information-details-wrapper") !== null) {
        _this.openWithTabAndAction(".cl-main-widget-navigation-ach-icon", function () {
          var id = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-widget-notif-information-details-wrapper") ? el.dataset.id : Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-widget-notif-information-details-wrapper").dataset.id;

          _this.settings.notifications.hideNotification();

          _this.settings.mainWidget.hideAchievementDetails(function () {
            _this.getAchievement(id, function (data) {
              _this.settings.mainWidget.loadAchievementDetails(data);
            });
          });
        }); // primary widget navigation

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-navigation-item")) {
        _this.settings.mainWidget.navigationSwitch(el); // competition list

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-lb-header-list-icon")) {
        if (_this.settings.leaderboard.refreshInterval) {
          clearTimeout(_this.settings.leaderboard.refreshInterval);
        }

        _this.settings.mainWidget.loadCompetitionList(function () {
          _this.activeCompetitionDataRefresh();
        }, loadCompetitionListAjax); // load competition

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-tour-list-item") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-tour-list-item") !== null) {
        var tournamentId = Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-tour-list-item") ? el.dataset.id : Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-tour-list-item").dataset.id,
            preLoader = _this.settings.mainWidget.preloader();

        preLoader.show(function () {
          _this.settings.mainWidget.settings.active = true;
          _this.settings.tournaments.activeCompetitionId = tournamentId;

          _this.activeCompetitionDataRefresh(function () {
            _this.settings.mainWidget.hideCompetitionList(function () {
              preLoader.hide();
            });
          });
        }); // hide competition list view
      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-main-widget-tournaments-back-btn")) {
        _this.settings.mainWidget.hideCompetitionList(); // mini scoreboard action to open primary widget

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-widget-ms-icon-wrapper") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-widget-ms-icon-wrapper") !== null || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-widget-ms-information-wrapper") || Object(_utils__WEBPACK_IMPORTED_MODULE_7__["closest"])(el, ".cl-widget-ms-information-wrapper") !== null) {
        _this.clickedMiniScoreBoard(); // accordion navigation

      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_7__["hasClass"])(el, "cl-accordion-label")) {
        _this.settings.mainWidget.accordionNavigation(el);
      }
    };

    this.eventListeners = function () {
      var _this = this;

      document.body.addEventListener("keyup", function (event) {
        switch (event.keyCode) {
          case 27:
            // on escape
            if (_this.settings.mainWidget.settings.active) {
              _this.settings.mainWidget.hide(function () {
                _this.settings.miniScoreBoard.settings.active = true;
                _this.settings.miniScoreBoard.settings.container.style.display = "block";

                _this.activeCompetitionDataRefresh();
              });
            }

            break;
        }
      });

      if (_this.isMobile()) {
        document.body.addEventListener("touchend", function (event) {
          var el = event.target;

          if (!_this.settings.miniScoreBoard.settings.dragging) {
            _this.eventHandlers(el);
          }
        });
      } else {
        document.body.addEventListener("click", function (event) {
          var el = event.target;

          _this.eventHandlers(el);
        });
      }
    };

    this.closeEverything = function () {
      var _this = this;

      _this.deactivateCompetitionsAndLeaderboards(function () {
        _this.settings.leaderboard.leaderboardData = [];

        _this.settings.mainWidget.initLayout(function () {
          _this.activeCompetitionDataRefresh();
        });

        setTimeout(function () {
          _this.settings.miniScoreBoard.settings.container.style.display = "none";
        }, 200);
      });

      _this.settings.mainWidget.hide();

      _this.settings.mainWidget.settings.preLoader.preLoaderActive = false;
    };

    this.isMobile = function () {
      return Object(_utils__WEBPACK_IMPORTED_MODULE_7__["isMobileTablet"])();
    };

    this.init = function () {
      var _this = this;

      _this.loadStylesheet(function () {
        _this.loadMember(function (member) {
          _this.loadWidgetTranslations(function () {
            if (_this.settings.miniScoreBoard === null) {
              _this.settings.notifications = new Notifications();
              _this.settings.miniScoreBoard = new MiniScoreBoard({
                active: true
              });
              _this.settings.mainWidget = new MainWidget();
              _this.settings.notifications.settings.lbWidget = _this;
              _this.settings.miniScoreBoard.settings.lbWidget = _this;
              _this.settings.mainWidget.settings.lbWidget = _this;

              _this.startup();

              _this.eventListeners();
            } else {
              _this.settings.mainWidget.hide(function () {
                _this.deactivateCompetitionsAndLeaderboards(function () {
                  _this.settings.miniScoreBoard.settings.active = true;
                  _this.settings.miniScoreBoard.settings.container.style.display = "block";

                  _this.startup();
                });
              });
            }
          });
        });
      });
    };

    if (this.settings.autoStart) {
      this.init();
    }
  };

  if (typeof window._CLLBV3Opt === "undefined") {
    window._CLLBV3Opt = {
      autoStart: false
    };
  }

  if (typeof window._clLeaderBoardV3 === "undefined") {
    window._clLeaderBoardV3 = new LbWidget(window._CLLBV3Opt);
  } else {
    console.warn("window._clLeaderBoardV3 is already defined, widget is configured to run as a single instance");
  }
})();

/***/ }),

/***/ "./src/javascript/modules/cLabs.js":
/*!*****************************************!*\
  !*** ./src/javascript/modules/cLabs.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// default domain
// var apiURL = "http://192.168.1.8:9998";
var apiURL = "http://app.local:9998";
var cLabs = {
  api: {
    url: apiURL
  },
  classSelector: /^\.([\w-]+)$/,
  // class string expression check
  idSelector: /^#[\w\d\-\_\&\!\@\*]+$/,
  // ID string expression check
  tagSelector: /^[\w-]+$/ // TAG string expression check

};
/* harmony default export */ __webpack_exports__["default"] = (cLabs);

/***/ }),

/***/ "./src/javascript/modules/dragElement.js":
/*!***********************************************!*\
  !*** ./src/javascript/modules/dragElement.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils */ "./src/javascript/utils/index.js");
 // var scrollObj2 = null;

var movementInterval;

var dragElement = function dragElement(elmnt, draggableEl, overlayContainer, container, dragging, finishDragging, mobileTouch) {
  var pos1 = 0,
      pos2 = 0,
      pos3 = 0,
      pos4 = 0,
      isMobile = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["isMobileTablet"])(),
      isiOS = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["isiOSDevice"])(),
      isParentWindow = elmnt.parentNode.nodeName === "BODY",
      maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth,
      maxTop = isParentWindow ? window.innerHeight : container.offsetHeight,
      touchStart,
      moving = null; // scrollObj2 = query(".scroll-res");

  if (movementInterval) {
    clearTimeout(movementInterval);
  }

  var onWindowChange = function onWindowChange() {
    var isVertical = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, "cl-vertical-mini"),
        maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth,
        maxTop = isParentWindow ? window.innerHeight : container.offsetHeight,
        offsetMaxLeft = maxLeft - parseInt(elmnt.offsetWidth + (isVertical ? draggableEl.offsetWidth / 7 : draggableEl.offsetWidth / 1.6)),
        offsetMaxTop = maxTop - parseInt(elmnt.offsetHeight + (isVertical ? draggableEl.offsetHeight / 1.2 : draggableEl.offsetHeight / 4)),
        elTop = parseInt(elmnt.style.top),
        elLeft = parseInt(elmnt.style.left);

    if (elTop > offsetMaxTop && offsetMaxTop > 5) {
      elmnt.style.top = offsetMaxTop + "px";
    }

    if (elLeft > offsetMaxLeft && offsetMaxLeft > 5) {
      elmnt.style.left = offsetMaxLeft + "px";
    }
  };

  if (isMobile) {
    /* listen to the touchMove event,
      every time it fires, grab the location
      of touch and assign it to box */
    var justATouch = false;
    draggableEl.addEventListener('touchstart', function (e) {
      justATouch = true;
      if (touchStart) clearTimeout(touchStart);
      maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
      maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
      touchStart = setTimeout(function () {
        justATouch = false;
      }, 100);
    }, {
      passive: isiOS
    });
    draggableEl.addEventListener('touchmove', function (e) {
      e.preventDefault();
      pos3 = e.targetTouches[0].pageX;
      pos4 = e.targetTouches[0].pageY; // moving = new Date().getTime();

      elementDrag(e);
    }, {
      passive: isiOS
    });
    draggableEl.addEventListener('touchend', function (e) {
      // e.preventDefault();
      // current box position.
      closeDragElement(e);
      moving = null;

      if (justATouch && typeof mobileTouch === "function") {
        mobileTouch();
      }
    }, {
      passive: isiOS
    });
    window.addEventListener("orientationchange", function (e) {
      onWindowChange();
    }, true);
  } else {
    // if present, the header is where you move the DIV from:
    draggableEl.onmousedown = dragMouseDown;
    window.addEventListener("resize", function (e) {
      onWindowChange();
    }, true);
  }

  function dragMouseDown(e) {
    e = e || window.event;
    e.preventDefault();
    maxLeft = isParentWindow ? window.innerWidth : container.offsetWidth;
    maxTop = isParentWindow ? window.innerHeight : container.offsetHeight;
    overlayContainer.style.display = "block"; // get the mouse cursor position at startup:

    pos3 = e.clientX;
    pos4 = e.clientY;
    document.onmouseup = closeDragElement; // call a function whenever the cursor moves:

    document.onmousemove = elementDrag;
  }
  /**
   * Adds additional offset to max left and top based on orientation and container width (will be affected by CSS styling so needs to be adjusted accordingly)
   * - elmnt => is the main container that has the positioning applied to
   * - draggableEl => key element that is mean for dragging
   */


  var checkMaxMinRestraints = function checkMaxMinRestraints(newTop, newLeft, offsetMaxLeft, offsetMaxTop) {
    var // minLeft = (isVertical ? elmnt.offsetWidth/4 : 0 ), // attempt to restrict the container to go out of bounds by a few pixels, needs some work
    minLeft = 0,
        top = newTop <= 0 ? 0 : newTop,
        left = newLeft <= minLeft ? minLeft : newLeft;

    if (left >= offsetMaxLeft) {
      left = offsetMaxLeft;
    }

    if (top >= offsetMaxTop) {
      top = offsetMaxTop;
    }

    return {
      top: top,
      left: left
    };
  };

  function elementDrag(e) {
    e = e || window.event;
    e.preventDefault(); // calculate the new cursor position:

    var posX = isMobile ? e.targetTouches[0].pageX : e.clientX,
        posY = isMobile ? e.targetTouches[0].pageY : e.clientY,
        isVertical = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, "cl-vertical-mini"),
        offsetMaxLeft = maxLeft - parseInt(elmnt.offsetWidth + (isVertical ? draggableEl.offsetWidth / 7 : draggableEl.offsetWidth / 1.6)),
        offsetMaxTop = maxTop - parseInt(elmnt.offsetHeight + (isVertical ? draggableEl.offsetHeight / 1.2 : draggableEl.offsetHeight / 4));
    pos1 = pos3 - posX;
    pos2 = pos4 - posY;
    pos3 = parseInt(posX);
    pos4 = parseInt(posY);
    moving = new Date().getTime();
    checkMovement();
    if (!Object(_utils__WEBPACK_IMPORTED_MODULE_0__["hasClass"])(elmnt, "cl-being-moved")) Object(_utils__WEBPACK_IMPORTED_MODULE_0__["addClass"])(elmnt, "cl-being-moved");
    var newTop = isMobile ? posY - parseInt(draggableEl.offsetHeight / 2) : elmnt.offsetTop - pos2,
        newLeft = isMobile ? posX - parseInt(draggableEl.offsetWidth / 2) : elmnt.offsetLeft - pos1,
        leftTopCheck = checkMaxMinRestraints(newTop, newLeft, offsetMaxLeft, offsetMaxTop); // set the element's new position:
    // scrollObj2.innerHTML = leftTopCheck.top + "-" + leftTopCheck.left + " : "+ newTop + "-" + newLeft + " : " + (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) + "-" + (newTop > offsetMaxTop || newLeft > offsetMaxLeft);
    // scrollObj2.innerHTML = leftTopCheck.top + "-" + leftTopCheck.left + " : "+ newTop +"-"+ newLeft + " : " + (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) + "-" + (newTop > offsetMaxTop || newLeft > offsetMaxLeft);

    if (posX < 0 || posY < 0 || posX > maxLeft || posY > maxTop) {
      closeDragElement(e);
    } else if (newTop > offsetMaxTop || newLeft > offsetMaxLeft) {
      closeDragElement(e);
    } else if (leftTopCheck.top > offsetMaxTop || leftTopCheck.left > offsetMaxLeft) {
      closeDragElement(e);
    } else {
      elmnt.style.top = leftTopCheck.top + "px";
      elmnt.style.left = leftTopCheck.left + "px";
    }

    if (typeof dragging === "function") dragging(newTop, newLeft);
  }

  function closeDragElement(e) {
    overlayContainer.style.display = "none";

    if (isMobile) {
      e.preventDefault();
    } else {
      // stop moving when mouse button is released:
      document.onmouseup = null;
      document.onmousemove = null;
    }

    moving = null;
    Object(_utils__WEBPACK_IMPORTED_MODULE_0__["removeClass"])(elmnt, "cl-being-moved");
    if (typeof finishDragging === "function") finishDragging();
  }

  function checkMovement() {
    if (movementInterval) {
      clearTimeout(movementInterval);
    }

    movementInterval = setTimeout(function () {
      if (moving !== null && moving + 3000 < new Date().getTime() && !isMobile) {
        closeDragElement();
      } else if (moving !== null) {
        checkMovement();
      }
    }, 3000);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (dragElement);

/***/ }),

/***/ "./src/javascript/modules/setTimeoutGlobal.js":
/*!****************************************************!*\
  !*** ./src/javascript/modules/setTimeoutGlobal.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// global timeout handling
try {
  if (typeof setTimeoutGlobal !== 'function') {
    window._setTimeoutGlobalRepository = [];

    window.setTimeoutGlobal = function (id, func, timer) {
      var exists = false;
      mapObject(window._setTimeoutGlobalRepository, function (instance, key, count) {
        if (id === instance.id) {
          exists = true;
        }
      });

      if (!exists) {
        var interval = setTimeout(function () {
          mapObject(window._setTimeoutGlobalRepository, function (instance, key, count) {
            if (id === instance.id) {
              window._setTimeoutGlobalRepository.splice(key, 1);
            }
          });

          if (typeof func === "function") {
            func();
          }
        }, timer);

        window._setTimeoutGlobalRepository.push({
          id: id,
          func: func,
          timer: timer,
          interval: interval
        });

        return interval;
      } else {
        throw new Error("setTimeoutGlobal - ID [" + id + "] already in use");
      }
    };

    var closeTimeout = function closeTimeout() {
      if (window._setTimeoutGlobalRepository.length > 0) {
        mapObject(window._setTimeoutGlobalRepository, function (instance, key, count) {
          if (instance.interval) {
            clearInterval(instance.interval);
            instance.interval = null;
          }
        });
      }
    };

    var reEnableTimeouts = function reEnableTimeouts() {
      if (window._setTimeoutGlobalRepository.length > 0) {
        var tmp = [];
        mapObject(window._setTimeoutGlobalRepository, function (instance, key, count) {
          tmp.push(instance);
        });
        window._setTimeoutGlobalRepository = [];
        mapObject(tmp, function (instance, key, count) {
          window.setTimeoutGlobal(instance.id, instance.func, instance.timer);
        });
      }
    };

    var windowActivity = function windowActivity() {
      (function () {
        var hidden = "hidden"; // Standards:

        if (hidden in document) document.addEventListener("visibilitychange", onchange);else if ((hidden = "mozHidden") in document) document.addEventListener("mozvisibilitychange", onchange);else if ((hidden = "webkitHidden") in document) document.addEventListener("webkitvisibilitychange", onchange);else if ((hidden = "msHidden") in document) document.addEventListener("msvisibilitychange", onchange); // IE 9 and lower:
        else if ("onfocusin" in document) document.onfocusin = document.onfocusout = onchange; // All others:
          else window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange;

        function onchange(evt) {
          var status = "",
              v = "visible",
              h = "hidden",
              evtMap = {
            focus: v,
            focusin: v,
            pageshow: v,
            blur: h,
            focusout: h,
            pagehide: h
          };
          evt = evt || window.event;

          if (evt.type in evtMap) {
            status = evtMap[evt.type];
          } else {
            status = this[hidden] ? "hidden" : "visible";
          }

          if (status === "visible") {
            reEnableTimeouts();
          } else if (status === "hidden") {
            closeTimeout();
          }
        } // set the initial state (but only if browser supports the Page Visibility API)


        if (document[hidden] !== undefined) onchange({
          type: document[hidden] ? "blur" : "focus"
        });
      })();
    };

    windowActivity();
  }
} catch (err) {
  console.log(err);
}

/***/ }),

/***/ "./src/javascript/polyfills/index.js":
/*!*******************************************!*\
  !*** ./src/javascript/polyfills/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//
if (!window.console) {
  window.console = function () {};

  if (typeof XDomainRequest !== "undefined") {
    window.console.prototype.log = function (err) {
      throw new SyntaxError(err);
    };

    window.console.prototype.warn = function (err) {
      throw new SyntaxError(err);
    };

    window.console.prototype.error = function (err) {
      throw new SyntaxError(err);
    };
  }
} //


try {
  Event.prototype.preventDefault || (Event.prototype.preventDefault = function () {
    this.returnValue = !1;
  });
} catch (err) {
  console.log(err);
} //


try {
  Event.prototype.stopPropagation || (Event.prototype.stopPropagation = function () {
    this.cancelBubble = !0;
  });
} catch (err) {
  console.log(err);
} //


try {
  "function" != typeof mapObject && (window.mapObject = function (e, t) {
    if (null !== e) {
      var n = 0;

      for (var r in e) {
        e.hasOwnProperty(r) && (t(e[r], r, n), n++);
      }

      return !0;
    }

    return console.log("returned object is null", _typeof(e)), !1;
  });
} catch (err) {
  console.log(err);
} //


try {
  if (!Element.prototype.addEventListener) {
    var eventListeners = [],
        addEventListener = function addEventListener(e, t) {
      var n,
          r = this;

      if (n = function n(e) {
        e.target = e.srcElement, e.currentTarget = r, e.pageX = event.clientX + document.body.scrollLeft, e.pageY = event.clientY + document.body.scrollTop, t.handleEvent ? t.handleEvent(e) : t.call(r, e);
      }, "DOMContentLoaded" === e) {
        var o = function o(e) {
          "complete" === document.readyState && n(e);
        };

        if (document.attachEvent("onreadystatechange", o), eventListeners.push({
          object: this,
          type: e,
          listener: t,
          wrapper: o
        }), "complete" == document.readyState) {
          var i = new Event();
          i.srcElement = window, o(i);
        }
      } else this.attachEvent("on" + e, n), eventListeners.push({
        object: this,
        type: e,
        listener: t,
        wrapper: n
      });
    },
        removeEventListener = function removeEventListener(e, t) {
      for (var n = 0; n < eventListeners.length;) {
        var r = eventListeners[n];

        if (r.object == this && r.type == e && r.listener == t) {
          "DOMContentLoaded" == e ? this.detachEvent("onreadystatechange", r.wrapper) : this.detachEvent("on" + e, r.wrapper);
          break;
        }

        ++n;
      }
    };

    Element.prototype.addEventListener = addEventListener, Element.prototype.removeEventListener = removeEventListener, HTMLDocument && (HTMLDocument.prototype.addEventListener = addEventListener, HTMLDocument.prototype.removeEventListener = removeEventListener), Window && (Window.prototype.addEventListener = addEventListener, Window.prototype.removeEventListener = removeEventListener);
  }

  Element.prototype.remove || (Element.prototype.remove = function () {
    this.parentElement.removeChild(this);
  }, NodeList.prototype.remove = HTMLCollection.prototype.remove = function () {
    for (var e = 0, t = this.length; t > e; e++) {
      this[e] && this[e].parentElement && this[e].parentElement.removeChild(this[e]);
    }
  });
} catch (err) {
  console.log(err);
}

"undefined" != typeof XDomainRequest && ("object" != _typeof(window.JSON) && (window.JSON = {}), function () {
  "use strict";

  function f(e) {
    return 10 > e ? "0" + e : e;
  }

  function quote(e) {
    return escapable.lastIndex = 0, escapable.test(e) ? '"' + e.replace(escapable, function (e) {
      var t = meta[e];
      return "string" == typeof t ? t : "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + e + '"';
  }

  function str(e, t) {
    var n,
        r,
        o,
        i,
        a,
        p = gap,
        u = t[e];

    switch (u && "object" == _typeof(u) && "function" == typeof u.toJSON && (u = u.toJSON(e)), "function" == typeof rep && (u = rep.call(t, e, u)), _typeof(u)) {
      case "string":
        return quote(u);

      case "number":
        return isFinite(u) ? String(u) : "null";

      case "boolean":
      case "null":
        return String(u);

      case "object":
        if (!u) return "null";

        if (gap += indent, a = [], "[object Array]" === Object.prototype.toString.apply(u)) {
          for (i = u.length, n = 0; i > n; n += 1) {
            a[n] = str(n, u) || "null";
          }

          return o = 0 === a.length ? "[]" : gap ? "[\n" + gap + a.join(",\n" + gap) + "\n" + p + "]" : "[" + a.join(",") + "]", gap = p, o;
        }

        if (rep && "object" == _typeof(rep)) for (i = rep.length, n = 0; i > n; n += 1) {
          "string" == typeof rep[n] && (r = rep[n], o = str(r, u), o && a.push(quote(r) + (gap ? ": " : ":") + o));
        } else for (r in u) {
          Object.prototype.hasOwnProperty.call(u, r) && (o = str(r, u), o && a.push(quote(r) + (gap ? ": " : ":") + o));
        }
        return o = 0 === a.length ? "{}" : gap ? "{\n" + gap + a.join(",\n" + gap) + "\n" + p + "}" : "{" + a.join(",") + "}", gap = p, o;
    }
  }

  "function" != typeof Date.prototype.toJSON && (Date.prototype.toJSON = function () {
    return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null;
  }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
    return this.valueOf();
  });
  var cx, escapable, gap, indent, meta, rep;
  "function" != typeof window.JSON.stringify && (escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, meta = {
    "\b": "\\b",
    "	": "\\t",
    "\n": "\\n",
    "\f": "\\f",
    "\r": "\\r",
    '"': '\\"',
    "\\": "\\\\"
  }, window.JSON.stringify = function (e, t, n) {
    var r;
    if (gap = "", indent = "", "number" == typeof n) for (r = 0; n > r; r += 1) {
      indent += " ";
    } else "string" == typeof n && (indent = n);
    if (rep = t, t && "function" != typeof t && ("object" != _typeof(t) || "number" != typeof t.length)) throw new Error("JSON.stringify");
    return str("", {
      "": e
    });
  }), "function" != typeof window.JSON.parse && (cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, window.JSON.parse = function (text, reviver) {
    function walk(e, t) {
      var n,
          r,
          o = e[t];
      if (o && "object" == _typeof(o)) for (n in o) {
        Object.prototype.hasOwnProperty.call(o, n) && (r = walk(o, n), void 0 !== r ? o[n] = r : delete o[n]);
      }
      return reviver.call(e, t, o);
    }

    var j;
    if (text = String(text), cx.lastIndex = 0, cx.test(text) && (text = text.replace(cx, function (e) {
      return "\\u" + ("0000" + e.charCodeAt(0).toString(16)).slice(-4);
    })), /^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) return j = eval("(" + text + ")"), "function" == typeof reviver ? walk({
      "": j
    }, "") : j;
    throw new SyntaxError("JSON.parse");
  });
}()); //

var _slice = Array.prototype.slice;

try {
  _slice.call(document.documentElement);
} catch (e) {
  Array.prototype.slice = function (t, e) {
    if (e = "undefined" != typeof e ? e : this.length, "[object Array]" === Object.prototype.toString.call(this)) return _slice.call(this, t, e);
    var r,
        i,
        c = [],
        l = this.length,
        o = t || 0;
    o = o >= 0 ? o : l + o;
    var a = e ? e : l;
    if (0 > e && (a = l + e), i = a - o, i > 0) if (c = new Array(i), this.charAt) for (r = 0; i > r; r++) {
      c[r] = this.charAt(o + r);
    } else for (r = 0; i > r; r++) {
      c[r] = this[o + r];
    }
    return c;
  };
} //[EventSource] Polyfill fix: https://github.com/remy/polyfills/blob/master/EventSource.js


(function (global) {
  if ("EventSource" in global) return;
  var reTrim = /^(\s|\u00A0)+|(\s|\u00A0)+$/g;

  var EventSource = function EventSource(url) {
    var eventsource = this,
        interval = 500,

    /* polling interval  */
    lastEventId = null,
        cache = '';

    if (!url || typeof url != 'string') {
      throw new SyntaxError('Not enough arguments');
    }

    this.URL = url;
    this.readyState = this.CONNECTING;
    this._pollTimer = null;
    this._xhr = null;

    function pollAgain(interval) {
      eventsource._pollTimer = setTimeout(function () {
        poll.call(eventsource);
      }, interval);
    }

    function poll() {
      try {
        /* force hiding of the error message... insane?*/
        if (eventsource.readyState == eventsource.CLOSED) return;
        /* NOTE: IE7 and upwards support*/

        var xhr = new XMLHttpRequest();
        xhr.open('GET', eventsource.URL, true);
        xhr.setRequestHeader('Accept', 'text/event-stream');
        xhr.setRequestHeader('Cache-Control', 'no-cache');
        /* we must make use of this on the server side if we're working with Android - because they don't trigger readychange until the server connection is closed*/

        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        if (lastEventId != null) xhr.setRequestHeader('Last-Event-ID', lastEventId);
        cache = '';
        xhr.timeout = 50000;

        xhr.onreadystatechange = function () {
          if (this.readyState == 3 || this.readyState == 4 && this.status == 200) {
            /* on success*/
            if (eventsource.readyState == eventsource.CONNECTING) {
              eventsource.readyState = eventsource.OPEN;
              eventsource.dispatchEvent('open', {
                type: 'open'
              });
            }

            var responseText = '';

            try {
              responseText = this.responseText || '';
            } catch (e) {}
            /* process this.responseText*/


            var parts = responseText.substr(cache.length).split("\n"),
                eventType = 'message',
                data = [],
                i = 0,
                line = '';
            cache = responseText;
            /* TODO handle 'event' (for buffer name), retry*/

            for (; i < parts.length; i++) {
              line = parts[i].replace(reTrim, '');

              if (line.indexOf('event') == 0) {
                eventType = line.replace(/event:?\s*/, '');
              } else if (line.indexOf('retry') == 0) {
                var retry = parseInt(line.replace(/retry:?\s*/, ''));

                if (!isNaN(retry)) {
                  interval = retry;
                }
              } else if (line.indexOf('data') == 0) {
                data.push(line.replace(/data:?\s*/, ''));
              } else if (line.indexOf('id:') == 0) {
                lastEventId = line.replace(/id:?\s*/, '');
              } else if (line.indexOf('id') == 0) {
                /* this resets the id*/
                lastEventId = null;
              } else if (line == '') {
                if (data.length) {
                  var event = new MessageEvent(data.join('\n'), eventsource.url, lastEventId);
                  eventsource.dispatchEvent(eventType, event);
                  data = [];
                  eventType = 'message';
                }
              }
            }

            if (this.readyState == 4) pollAgain(interval);
            /* don't need to poll again, because we're long-loading*/
          } else if (eventsource.readyState !== eventsource.CLOSED) {
            if (this.readyState == 4) {
              /* and some other status dispatch error*/
              eventsource.readyState = eventsource.CONNECTING;
              eventsource.dispatchEvent('error', {
                type: 'error'
              });
              pollAgain(interval);
            } else if (this.readyState == 0) {
              /* likely aborted*/
              pollAgain(interval);
            } else {}
          }
        };

        xhr.send();
        setTimeout(function () {
          if (true) xhr.abort();
        }, xhr.timeout);
        eventsource._xhr = xhr;
      } catch (e) {
        /* in an attempt to silence the errors*/
        eventsource.dispatchEvent('error', {
          type: 'error',
          data: e.message
        });
        /* ???*/
      }
    }

    ;
    poll();
    /* init now*/
  };

  EventSource.prototype = {
    close: function close() {
      /* closes the connection - disabling the polling*/
      this.readyState = this.CLOSED;
      clearInterval(this._pollTimer);

      this._xhr.abort();
    },
    CONNECTING: 0,
    OPEN: 1,
    CLOSED: 2,
    dispatchEvent: function dispatchEvent(type, event) {
      var handlers = this['_' + type + 'Handlers'];

      if (handlers) {
        for (var i = 0; i < handlers.length; i++) {
          handlers[i].call(this, event);
        }
      }

      if (this['on' + type]) {
        this['on' + type].call(this, event);
      }
    },
    addEventListener: function addEventListener(type, handler) {
      if (!this['_' + type + 'Handlers']) {
        this['_' + type + 'Handlers'] = [];
      }

      this['_' + type + 'Handlers'].push(handler);
    },
    removeEventListener: function removeEventListener(type, handler) {
      var handlers = this['_' + type + 'Handlers'];

      if (!handlers) {
        return;
      }

      for (var i = handlers.length - 1; i >= 0; --i) {
        if (handlers[i] === handler) {
          handlers.splice(i, 1);
          break;
        }
      }
    },
    onerror: null,
    onmessage: null,
    onopen: null,
    readyState: 0,
    URL: ''
  };

  var MessageEvent = function MessageEvent(data, origin, lastEventId) {
    this.data = data;
    this.origin = origin;
    this.lastEventId = lastEventId || '';
  };

  MessageEvent.prototype = {
    data: null,
    type: 'message',
    lastEventId: '',
    origin: ''
  };
  if ('module' in global) module.exports = EventSource;
  global.EventSource = EventSource;
})(window);

/***/ }),

/***/ "./src/javascript/utils/addClass.js":
/*!******************************************!*\
  !*** ./src/javascript/utils/addClass.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * App/Append new class string to the provided DOM element
 * @param element
 * @param className
 * @returns {{classList}|*}
 */
var addClass = function addClass(element, className) {
  try {
    if (element.classList) {
      element.classList.add(className);
    } else {
      element.className += ' ' + className;
    }
  } catch (e) {
    console.trace();
  }

  return element;
};

/* harmony default export */ __webpack_exports__["default"] = (addClass);

/***/ }),

/***/ "./src/javascript/utils/appendNext.js":
/*!********************************************!*\
  !*** ./src/javascript/utils/appendNext.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var appendNext = function appendNext(el, newNode) {
  if (el.nextSibling) {
    el.parentNode.insertBefore(newNode, el.nextSibling);
  } else {
    el.parentNode.appendChild(newNode);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (appendNext);

/***/ }),

/***/ "./src/javascript/utils/closest.js":
/*!*****************************************!*\
  !*** ./src/javascript/utils/closest.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/javascript/utils/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



/**
 * Iterate up the tree of DOM elements to find the closes match
 * @param element
 * @param selector
 * @returns {null | ParentNode}
 */

var closest = function closest(element, selector) {
  if (_typeof(selector) === "object") {
    var selectorClassString = selector.getAttribute("class"),
        selectorIdString = selector.id;

    if (selectorIdString !== null && selectorIdString.length > 0) {
      selector = "#" + selectorIdString;
    } else if (selectorClassString !== null && selectorClassString.length > 0) {
      selector = "." + selectorClassString.split(" ")[0];
    } else {
      selector = selector.nodeName;
    }
  }

  function closest(element, selector) {
    try {
      element = element.parentNode;
    } catch (e) {
      console.log(element, selector);
      console.trace();
    }

    if (element !== null && _typeof(element) === 'object') {
      if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].classSelector) && Object(_index__WEBPACK_IMPORTED_MODULE_1__["hasClass"])(element, selector)) {
        return element;
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].idSelector) && element.id === selector.replace("#", "")) {
        return element;
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].tagSelector) && element.nodeName === selector.toUpperCase()) {
        return element;
      } else {
        return closest(element, selector);
      }
    } else {
      return null;
    }
  }

  if (_typeof(element) === 'object') {
    return closest(element, selector);
  } else {
    return null;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (closest);

/***/ }),

/***/ "./src/javascript/utils/formatNumberLeadingZeros.js":
/*!**********************************************************!*\
  !*** ./src/javascript/utils/formatNumberLeadingZeros.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Prepends 0 the provided number and returns the formated element as a string
 * @param num
 * @param size {number}
 * @returns {string} 1 => 001
 */
var formatNumberLeadingZeros = function formatNumberLeadingZeros(num, size) {
  var s = String(num);

  while (s.length < size) {
    s = "0" + s;
  }

  return s;
};

/* harmony default export */ __webpack_exports__["default"] = (formatNumberLeadingZeros);

/***/ }),

/***/ "./src/javascript/utils/getOffset.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/getOffset.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var getOffset = function getOffset(el) {
  var _x = 0;
  var _y = 0;

  while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
    _x += el.offsetLeft - el.scrollLeft;
    _y += el.offsetTop - el.scrollTop;
    el = el.offsetParent;
  }

  return {
    top: _y,
    left: _x
  };
};

/* harmony default export */ __webpack_exports__["default"] = (getOffset);

/***/ }),

/***/ "./src/javascript/utils/hasClass.js":
/*!******************************************!*\
  !*** ./src/javascript/utils/hasClass.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Provides an ability to check if a DOM element contains a class string
 * @param element
 * @param className
 * @returns {boolean}
 */
function _hasClass(element, className) {
  className = className.replace(".", "");

  try {
    if (element.classList) {
      return element.classList.contains(className);
    } else {
      return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
    }
  } catch (e) {
    if (typeof e.stack !== "undefined") {
      console.log(e.stack);
    }

    console.log(e, element, className);
    return false;
  }
}

var hasClass = function hasClass(element, className) {
  if (typeof className === 'string') {
    return _hasClass(element, className);
  } else if (className instanceof Array) {
    var hasClass = false;

    for (var i in className) {
      if (typeof className[i] === 'string' && _hasClass(element, className[i])) {
        hasClass = true;
      }
    }

    return hasClass;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (hasClass);

/***/ }),

/***/ "./src/javascript/utils/index.js":
/*!***************************************!*\
  !*** ./src/javascript/utils/index.js ***!
  \***************************************/
/*! exports provided: sizeof, isElement, objectCount, remove, objectIterator, addClass, removeClass, hasClass, stringContains, formatNumberLeadingZeros, stripHtml, closest, isMobileTablet, getOffset, isiOSDevice, appendNext, query, trim, mergeObjects, scrollEnabled */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _sizeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sizeof */ "./src/javascript/utils/sizeof.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sizeof", function() { return _sizeof__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony import */ var _isElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isElement */ "./src/javascript/utils/isElement.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isElement", function() { return _isElement__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _objectCount__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./objectCount */ "./src/javascript/utils/objectCount.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectCount", function() { return _objectCount__WEBPACK_IMPORTED_MODULE_2__["default"]; });

/* harmony import */ var _remove__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./remove */ "./src/javascript/utils/remove.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "remove", function() { return _remove__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _objectIterator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./objectIterator */ "./src/javascript/utils/objectIterator.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "objectIterator", function() { return _objectIterator__WEBPACK_IMPORTED_MODULE_4__["default"]; });

/* harmony import */ var _addClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./addClass */ "./src/javascript/utils/addClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "addClass", function() { return _addClass__WEBPACK_IMPORTED_MODULE_5__["default"]; });

/* harmony import */ var _removeClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./removeClass */ "./src/javascript/utils/removeClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "removeClass", function() { return _removeClass__WEBPACK_IMPORTED_MODULE_6__["default"]; });

/* harmony import */ var _hasClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./hasClass */ "./src/javascript/utils/hasClass.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hasClass", function() { return _hasClass__WEBPACK_IMPORTED_MODULE_7__["default"]; });

/* harmony import */ var _stringContains__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./stringContains */ "./src/javascript/utils/stringContains.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stringContains", function() { return _stringContains__WEBPACK_IMPORTED_MODULE_8__["default"]; });

/* harmony import */ var _formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./formatNumberLeadingZeros */ "./src/javascript/utils/formatNumberLeadingZeros.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "formatNumberLeadingZeros", function() { return _formatNumberLeadingZeros__WEBPACK_IMPORTED_MODULE_9__["default"]; });

/* harmony import */ var _stripHtml__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./stripHtml */ "./src/javascript/utils/stripHtml.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "stripHtml", function() { return _stripHtml__WEBPACK_IMPORTED_MODULE_10__["default"]; });

/* harmony import */ var _closest__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./closest */ "./src/javascript/utils/closest.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "closest", function() { return _closest__WEBPACK_IMPORTED_MODULE_11__["default"]; });

/* harmony import */ var _isMobileTablet__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./isMobileTablet */ "./src/javascript/utils/isMobileTablet.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isMobileTablet", function() { return _isMobileTablet__WEBPACK_IMPORTED_MODULE_12__["default"]; });

/* harmony import */ var _getOffset__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./getOffset */ "./src/javascript/utils/getOffset.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getOffset", function() { return _getOffset__WEBPACK_IMPORTED_MODULE_13__["default"]; });

/* harmony import */ var _isiOSDevice__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./isiOSDevice */ "./src/javascript/utils/isiOSDevice.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isiOSDevice", function() { return _isiOSDevice__WEBPACK_IMPORTED_MODULE_14__["default"]; });

/* harmony import */ var _appendNext__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./appendNext */ "./src/javascript/utils/appendNext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "appendNext", function() { return _appendNext__WEBPACK_IMPORTED_MODULE_15__["default"]; });

/* harmony import */ var _query__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./query */ "./src/javascript/utils/query.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "query", function() { return _query__WEBPACK_IMPORTED_MODULE_16__["default"]; });

/* harmony import */ var _trim__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./trim */ "./src/javascript/utils/trim.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "trim", function() { return _trim__WEBPACK_IMPORTED_MODULE_17__["default"]; });

/* harmony import */ var _mergeObjects__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./mergeObjects */ "./src/javascript/utils/mergeObjects.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeObjects", function() { return _mergeObjects__WEBPACK_IMPORTED_MODULE_18__["default"]; });

/* harmony import */ var _scrollEnabled__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./scrollEnabled */ "./src/javascript/utils/scrollEnabled.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scrollEnabled", function() { return _scrollEnabled__WEBPACK_IMPORTED_MODULE_19__["default"]; });






















/***/ }),

/***/ "./src/javascript/utils/isElement.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/isElement.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Returns true if it is a DOM element
 *
 * @param o {Object}
 * @return {Boolean}
 */
var isElement = function isElement(o) {
  return (typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) === "object" ? o instanceof HTMLElement : //DOM2
  o && _typeof(o) === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string";
};

/* harmony default export */ __webpack_exports__["default"] = (isElement);

/***/ }),

/***/ "./src/javascript/utils/isMobileTablet.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/isMobileTablet.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/javascript/utils/index.js");
// a check to test if the device is a mobile or tablet


var isMobileTablet = function isMobileTablet() {
  var check = false;

  (function (a) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
  })(navigator.userAgent || navigator.vendor || window.opera); // custom solution because latest iOS 13 userAgent doesn't return correct mobile information


  if (!check) {
    check = Object(_index__WEBPACK_IMPORTED_MODULE_0__["stringContains"])(window.navigator.userAgent.toLowerCase(), 'macintosh') && 'ontouchend' in document;
  }

  return check;
};

/* harmony default export */ __webpack_exports__["default"] = (isMobileTablet);

/***/ }),

/***/ "./src/javascript/utils/isiOSDevice.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/isiOSDevice.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// check if iOS
var isiOSDevice = function isiOSDevice() {
  return !!navigator.platform && /iP(ad|hone|od)/.test(navigator.platform);
};

/* harmony default export */ __webpack_exports__["default"] = (isiOSDevice);

/***/ }),

/***/ "./src/javascript/utils/mergeObjects.js":
/*!**********************************************!*\
  !*** ./src/javascript/utils/mergeObjects.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/javascript/utils/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }



var mergeObjects = function mergeObjects(obj1, obj2, arrayType) {
  var obj3 = typeof arrayType === 'undefined' || arrayType === false ? {} : [];

  for (var i in obj1) {
    obj3[i] = obj1[i];
  }

  for (var k in obj2) {
    if (_typeof(obj1[k]) !== "object") {
      obj3[k] = obj2[k];
    } else if (obj1[k] instanceof Array) {
      obj3[k] = obj2[k]; // arrays get overwritten and not extended
    } else if (typeof obj1[k] !== "undefined" && _typeof(obj1[k]) === "object" && obj1[k] !== null && typeof obj1[k].nodeType === "undefined" && Object(_index__WEBPACK_IMPORTED_MODULE_0__["sizeof"])(obj1[k]) > 0) {
      obj3[k] = mergeObjects(obj1[k], obj2[k]);
    } else if (typeof obj1[k] !== "undefined" && _typeof(obj1[k]) === "object") {
      obj3[k] = obj2[k];
    } else {
      console.log("fail");
    }

    if (obj3[k] === undefined) {
      delete obj3[k];
    }
  }

  return obj3;
};

/* harmony default export */ __webpack_exports__["default"] = (mergeObjects);

/***/ }),

/***/ "./src/javascript/utils/objectCount.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/objectCount.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Returns a count of object from a query result
 * @paramobj  {Object} anything or Array object
 */
var objectCount = function objectCount(obj) {
  if (obj !== null && obj.length !== undefined && obj instanceof Array) {
    return obj.length;
  } else if (obj !== null) {
    return 1;
  } else {
    return 0;
  }
};

/* harmony default export */ __webpack_exports__["default"] = (objectCount);

/***/ }),

/***/ "./src/javascript/utils/objectIterator.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/objectIterator.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Object iterator - best usage is for a list of DOM elements
 * @param obj
 * @param callback
 */
var objectIterator = function objectIterator(obj, callback) {
  if (typeof obj !== "undefined" && obj !== null && typeof obj.length !== "undefined" && obj instanceof Array) {
    var count = 0;

    for (var key in obj) {
      callback(obj[key], key, count, obj.length);
      count++;
    }
  } else if (typeof obj !== "undefined" && obj !== null) {
    callback(obj, 0, 0, 1);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (objectIterator);

/***/ }),

/***/ "./src/javascript/utils/query.js":
/*!***************************************!*\
  !*** ./src/javascript/utils/query.js ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_cLabs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/cLabs */ "./src/javascript/modules/cLabs.js");
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index */ "./src/javascript/utils/index.js");


/**
 * Query selector, supports CSS element selection
 *
 * Supports:
 *  - Class selection: ".element"
 *  - ID selection: "#element"
 *  - Tag selection: "div"
 *  - Multi depth selection: '.element ul li'
 *
 * @param {Object} "optional"
 * @param {String} CSS element selector
 * @returns {(Object|null|Array)} depending on the provided selector results can vary (null, node, NodeList array)
 */

var query = function query(doc, selector) {
  var result;
  var tmpDoc = doc,
      tmpSelector = selector; // used for debug only

  if (typeof doc === 'string' && selector === undefined) {
    selector = doc;
    doc = document;
  }

  try {
    if (doc !== null) {
      selector = Object(_index__WEBPACK_IMPORTED_MODULE_1__["trim"])(selector); //

      if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].classSelector)) {
        result = doc.getElementsByClassName(selector.replace(".", ""));
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].idSelector)) {
        result = document.getElementById(selector.replace("#", ""));
      } else if (selector.match(_modules_cLabs__WEBPACK_IMPORTED_MODULE_0__["default"].tagSelector)) {
        result = doc.getElementsByTagName(selector);
      } else {
        result = doc.querySelectorAll(selector);
      }
    }

    if (result !== null && result !== undefined && result.nodeType) {
      return result;
    } else if (result !== null && result !== undefined && result.length === 1) {
      return result[0];
    } else if (result !== null && result !== undefined && result.length > 0) {
      return Array.prototype.slice.call(result);
    } else {
      return null;
    }
  } catch (e) {
    console.log(e);
    console.log(tmpSelector);
    console.log(tmpDoc);
    console.log(doc, selector);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (query);

/***/ }),

/***/ "./src/javascript/utils/remove.js":
/*!****************************************!*\
  !*** ./src/javascript/utils/remove.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes an HTML DOM element
 * @paramobj el {Object} DOM element
 */
var remove = function remove(el) {
  if (el !== null) {
    el.parentElement.removeChild(el);
  }
};

/* harmony default export */ __webpack_exports__["default"] = (remove);

/***/ }),

/***/ "./src/javascript/utils/removeClass.js":
/*!*********************************************!*\
  !*** ./src/javascript/utils/removeClass.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Remove class string from provided DOM element
 * @param element
 * @param className
 * @returns {{classList}|*}
 */
var removeClass = function removeClass(element, className) {
  try {
    if (element.classList) {
      element.classList.remove(className);
    } else {
      element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
    }
  } catch (e) {
    console.log(element, className);
    console.error(e);
    console.trace();
  }

  return element;
};

/* harmony default export */ __webpack_exports__["default"] = (removeClass);

/***/ }),

/***/ "./src/javascript/utils/scrollEnabled.js":
/*!***********************************************!*\
  !*** ./src/javascript/utils/scrollEnabled.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var scrollEnabled = function scrollEnabled(doc) {
  return doc !== null ? doc.scrollHeight > doc.offsetHeight : false;
};

/* harmony default export */ __webpack_exports__["default"] = (scrollEnabled);

/***/ }),

/***/ "./src/javascript/utils/sizeof.js":
/*!****************************************!*\
  !*** ./src/javascript/utils/sizeof.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index */ "./src/javascript/utils/index.js");

/**
 * returns the size of an Object or array
 *
 * @param obj {Object}
 * @return {Number}
 */

var sizeof = function sizeof(obj) {
  var size = 0,
      key;

  for (key in obj) {
    if (obj.hasOwnProperty(key)) size++;
  }

  if (size === 0 && Object(_index__WEBPACK_IMPORTED_MODULE_0__["isElement"])(obj)) {
    size = 1;
  }

  return size;
};

/* harmony default export */ __webpack_exports__["default"] = (sizeof);

/***/ }),

/***/ "./src/javascript/utils/stringContains.js":
/*!************************************************!*\
  !*** ./src/javascript/utils/stringContains.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * A check if a string contains an entry of searched for term
 * @param str {string}
 * @param partial {string}
 * @returns {boolean}
 */
var stringContains = function stringContains(str, partial) {
  return str.indexOf(partial) > -1;
};

/* harmony default export */ __webpack_exports__["default"] = (stringContains);

/***/ }),

/***/ "./src/javascript/utils/stripHtml.js":
/*!*******************************************!*\
  !*** ./src/javascript/utils/stripHtml.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Removes HTML tags from the provided input and returns only the text
 * - this is a very basic implementation and should be used carefully
 * @param html {string}
 * @returns {string | string}
 */
var stripHtml = function stripHtml(html) {
  var tmp = document.createElement("DIV");
  tmp.innerHTML = html;
  return tmp.textContent || tmp.innerText || "";
};

/* harmony default export */ __webpack_exports__["default"] = (stripHtml);

/***/ }),

/***/ "./src/javascript/utils/trim.js":
/*!**************************************!*\
  !*** ./src/javascript/utils/trim.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var trim = function trim(string) {
  return string.replace(/^\s+|\s+$/g, '');
};

/* harmony default export */ __webpack_exports__["default"] = (trim);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,